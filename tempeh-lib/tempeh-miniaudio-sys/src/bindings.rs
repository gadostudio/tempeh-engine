/* automatically generated by rust-bindgen 0.61.0 */

#![allow(nonstandard_style, clippy::all)]

pub const MA_VERSION_MAJOR: u32 = 0;
pub const MA_VERSION_MINOR: u32 = 11;
pub const MA_VERSION_REVISION: u32 = 10;
pub const MA_SIZEOF_PTR: u32 = 8;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const MA_TRUE: u32 = 1;
pub const MA_FALSE: u32 = 0;
pub const MA_SIZE_MAX: u32 = 4294967295;
pub const MA_SIMD_ALIGNMENT: u32 = 32;
pub const MA_MIN_CHANNELS: u32 = 1;
pub const MA_MAX_CHANNELS: u32 = 254;
pub const MA_MAX_FILTER_ORDER: u32 = 8;
pub const MA_MAX_LOG_CALLBACKS: u32 = 4;
pub const MA_CHANNEL_INDEX_NULL: u32 = 255;
pub const MA_DATA_FORMAT_FLAG_EXCLUSIVE_MODE: u32 = 2;
pub const MA_MAX_DEVICE_NAME_LENGTH: u32 = 255;
pub const MA_DATA_SOURCE_SELF_MANAGED_RANGE_AND_LOOP_POINT: u32 = 1;
pub const MA_RESOURCE_MANAGER_MAX_JOB_THREAD_COUNT: u32 = 64;
pub const MA_MAX_NODE_BUS_COUNT: u32 = 254;
pub const MA_MAX_NODE_LOCAL_BUS_COUNT: u32 = 2;
pub const MA_NODE_BUS_COUNT_UNKNOWN: u32 = 255;
pub const MA_ENGINE_MAX_LISTENERS: u32 = 4;
pub const MA_SOUND_SOURCE_CHANNEL_COUNT: u32 = 4294967295;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    ) -> !;
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    const UNINIT: ::std::mem::MaybeUninit<__crt_locale_data_public> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_pctype) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(__crt_locale_data_public),
        "::",
        stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_mb_cur_max) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(__crt_locale_data_public),
        "::",
        stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_lc_codepage) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(__crt_locale_data_public),
        "::",
        stringify!(_locale_lc_codepage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    const UNINIT: ::std::mem::MaybeUninit<__crt_locale_pointers> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locinfo) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(__crt_locale_pointers),
        "::",
        stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mbcinfo) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(__crt_locale_pointers),
        "::",
        stringify!(mbcinfo)
        )
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    const UNINIT: ::std::mem::MaybeUninit<_Mbstatet> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Wchar) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(_Mbstatet),
        "::",
        stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Byte) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(_Mbstatet),
        "::",
        stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._State) as usize - ptr as usize },
        6usize,
        concat!(
        "Offset of field: ",
        stringify!(_Mbstatet),
        "::",
        stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __threadid() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __threadhandle() -> usize;
}
pub type ma_int8 = ::std::os::raw::c_schar;
pub type ma_uint8 = ::std::os::raw::c_uchar;
pub type ma_int16 = ::std::os::raw::c_short;
pub type ma_uint16 = ::std::os::raw::c_ushort;
pub type ma_int32 = ::std::os::raw::c_int;
pub type ma_uint32 = ::std::os::raw::c_uint;
pub type ma_int64 = ::std::os::raw::c_longlong;
pub type ma_uint64 = ::std::os::raw::c_ulonglong;
pub type ma_uintptr = ma_uint64;
pub type ma_bool8 = ma_uint8;
pub type ma_bool32 = ma_uint32;
pub type ma_handle = *mut ::std::os::raw::c_void;
pub type ma_ptr = *mut ::std::os::raw::c_void;
pub type ma_proc = ::std::option::Option<unsafe extern "C" fn()>;
pub const ma_log_level_MA_LOG_LEVEL_DEBUG: ma_log_level = 4;
pub const ma_log_level_MA_LOG_LEVEL_INFO: ma_log_level = 3;
pub const ma_log_level_MA_LOG_LEVEL_WARNING: ma_log_level = 2;
pub const ma_log_level_MA_LOG_LEVEL_ERROR: ma_log_level = 1;
pub type ma_log_level = ::std::os::raw::c_int;
pub type ma_channel = ma_uint8;
pub const _ma_channel_position_MA_CHANNEL_NONE: _ma_channel_position = 0;
pub const _ma_channel_position_MA_CHANNEL_MONO: _ma_channel_position = 1;
pub const _ma_channel_position_MA_CHANNEL_FRONT_LEFT: _ma_channel_position = 2;
pub const _ma_channel_position_MA_CHANNEL_FRONT_RIGHT: _ma_channel_position = 3;
pub const _ma_channel_position_MA_CHANNEL_FRONT_CENTER: _ma_channel_position = 4;
pub const _ma_channel_position_MA_CHANNEL_LFE: _ma_channel_position = 5;
pub const _ma_channel_position_MA_CHANNEL_BACK_LEFT: _ma_channel_position = 6;
pub const _ma_channel_position_MA_CHANNEL_BACK_RIGHT: _ma_channel_position = 7;
pub const _ma_channel_position_MA_CHANNEL_FRONT_LEFT_CENTER: _ma_channel_position = 8;
pub const _ma_channel_position_MA_CHANNEL_FRONT_RIGHT_CENTER: _ma_channel_position = 9;
pub const _ma_channel_position_MA_CHANNEL_BACK_CENTER: _ma_channel_position = 10;
pub const _ma_channel_position_MA_CHANNEL_SIDE_LEFT: _ma_channel_position = 11;
pub const _ma_channel_position_MA_CHANNEL_SIDE_RIGHT: _ma_channel_position = 12;
pub const _ma_channel_position_MA_CHANNEL_TOP_CENTER: _ma_channel_position = 13;
pub const _ma_channel_position_MA_CHANNEL_TOP_FRONT_LEFT: _ma_channel_position = 14;
pub const _ma_channel_position_MA_CHANNEL_TOP_FRONT_CENTER: _ma_channel_position = 15;
pub const _ma_channel_position_MA_CHANNEL_TOP_FRONT_RIGHT: _ma_channel_position = 16;
pub const _ma_channel_position_MA_CHANNEL_TOP_BACK_LEFT: _ma_channel_position = 17;
pub const _ma_channel_position_MA_CHANNEL_TOP_BACK_CENTER: _ma_channel_position = 18;
pub const _ma_channel_position_MA_CHANNEL_TOP_BACK_RIGHT: _ma_channel_position = 19;
pub const _ma_channel_position_MA_CHANNEL_AUX_0: _ma_channel_position = 20;
pub const _ma_channel_position_MA_CHANNEL_AUX_1: _ma_channel_position = 21;
pub const _ma_channel_position_MA_CHANNEL_AUX_2: _ma_channel_position = 22;
pub const _ma_channel_position_MA_CHANNEL_AUX_3: _ma_channel_position = 23;
pub const _ma_channel_position_MA_CHANNEL_AUX_4: _ma_channel_position = 24;
pub const _ma_channel_position_MA_CHANNEL_AUX_5: _ma_channel_position = 25;
pub const _ma_channel_position_MA_CHANNEL_AUX_6: _ma_channel_position = 26;
pub const _ma_channel_position_MA_CHANNEL_AUX_7: _ma_channel_position = 27;
pub const _ma_channel_position_MA_CHANNEL_AUX_8: _ma_channel_position = 28;
pub const _ma_channel_position_MA_CHANNEL_AUX_9: _ma_channel_position = 29;
pub const _ma_channel_position_MA_CHANNEL_AUX_10: _ma_channel_position = 30;
pub const _ma_channel_position_MA_CHANNEL_AUX_11: _ma_channel_position = 31;
pub const _ma_channel_position_MA_CHANNEL_AUX_12: _ma_channel_position = 32;
pub const _ma_channel_position_MA_CHANNEL_AUX_13: _ma_channel_position = 33;
pub const _ma_channel_position_MA_CHANNEL_AUX_14: _ma_channel_position = 34;
pub const _ma_channel_position_MA_CHANNEL_AUX_15: _ma_channel_position = 35;
pub const _ma_channel_position_MA_CHANNEL_AUX_16: _ma_channel_position = 36;
pub const _ma_channel_position_MA_CHANNEL_AUX_17: _ma_channel_position = 37;
pub const _ma_channel_position_MA_CHANNEL_AUX_18: _ma_channel_position = 38;
pub const _ma_channel_position_MA_CHANNEL_AUX_19: _ma_channel_position = 39;
pub const _ma_channel_position_MA_CHANNEL_AUX_20: _ma_channel_position = 40;
pub const _ma_channel_position_MA_CHANNEL_AUX_21: _ma_channel_position = 41;
pub const _ma_channel_position_MA_CHANNEL_AUX_22: _ma_channel_position = 42;
pub const _ma_channel_position_MA_CHANNEL_AUX_23: _ma_channel_position = 43;
pub const _ma_channel_position_MA_CHANNEL_AUX_24: _ma_channel_position = 44;
pub const _ma_channel_position_MA_CHANNEL_AUX_25: _ma_channel_position = 45;
pub const _ma_channel_position_MA_CHANNEL_AUX_26: _ma_channel_position = 46;
pub const _ma_channel_position_MA_CHANNEL_AUX_27: _ma_channel_position = 47;
pub const _ma_channel_position_MA_CHANNEL_AUX_28: _ma_channel_position = 48;
pub const _ma_channel_position_MA_CHANNEL_AUX_29: _ma_channel_position = 49;
pub const _ma_channel_position_MA_CHANNEL_AUX_30: _ma_channel_position = 50;
pub const _ma_channel_position_MA_CHANNEL_AUX_31: _ma_channel_position = 51;
pub const _ma_channel_position_MA_CHANNEL_LEFT: _ma_channel_position = 2;
pub const _ma_channel_position_MA_CHANNEL_RIGHT: _ma_channel_position = 3;
pub const _ma_channel_position_MA_CHANNEL_POSITION_COUNT: _ma_channel_position = 52;
pub type _ma_channel_position = ::std::os::raw::c_int;
pub const ma_result_MA_SUCCESS: ma_result = 0;
pub const ma_result_MA_ERROR: ma_result = -1;
pub const ma_result_MA_INVALID_ARGS: ma_result = -2;
pub const ma_result_MA_INVALID_OPERATION: ma_result = -3;
pub const ma_result_MA_OUT_OF_MEMORY: ma_result = -4;
pub const ma_result_MA_OUT_OF_RANGE: ma_result = -5;
pub const ma_result_MA_ACCESS_DENIED: ma_result = -6;
pub const ma_result_MA_DOES_NOT_EXIST: ma_result = -7;
pub const ma_result_MA_ALREADY_EXISTS: ma_result = -8;
pub const ma_result_MA_TOO_MANY_OPEN_FILES: ma_result = -9;
pub const ma_result_MA_INVALID_FILE: ma_result = -10;
pub const ma_result_MA_TOO_BIG: ma_result = -11;
pub const ma_result_MA_PATH_TOO_LONG: ma_result = -12;
pub const ma_result_MA_NAME_TOO_LONG: ma_result = -13;
pub const ma_result_MA_NOT_DIRECTORY: ma_result = -14;
pub const ma_result_MA_IS_DIRECTORY: ma_result = -15;
pub const ma_result_MA_DIRECTORY_NOT_EMPTY: ma_result = -16;
pub const ma_result_MA_AT_END: ma_result = -17;
pub const ma_result_MA_NO_SPACE: ma_result = -18;
pub const ma_result_MA_BUSY: ma_result = -19;
pub const ma_result_MA_IO_ERROR: ma_result = -20;
pub const ma_result_MA_INTERRUPT: ma_result = -21;
pub const ma_result_MA_UNAVAILABLE: ma_result = -22;
pub const ma_result_MA_ALREADY_IN_USE: ma_result = -23;
pub const ma_result_MA_BAD_ADDRESS: ma_result = -24;
pub const ma_result_MA_BAD_SEEK: ma_result = -25;
pub const ma_result_MA_BAD_PIPE: ma_result = -26;
pub const ma_result_MA_DEADLOCK: ma_result = -27;
pub const ma_result_MA_TOO_MANY_LINKS: ma_result = -28;
pub const ma_result_MA_NOT_IMPLEMENTED: ma_result = -29;
pub const ma_result_MA_NO_MESSAGE: ma_result = -30;
pub const ma_result_MA_BAD_MESSAGE: ma_result = -31;
pub const ma_result_MA_NO_DATA_AVAILABLE: ma_result = -32;
pub const ma_result_MA_INVALID_DATA: ma_result = -33;
pub const ma_result_MA_TIMEOUT: ma_result = -34;
pub const ma_result_MA_NO_NETWORK: ma_result = -35;
pub const ma_result_MA_NOT_UNIQUE: ma_result = -36;
pub const ma_result_MA_NOT_SOCKET: ma_result = -37;
pub const ma_result_MA_NO_ADDRESS: ma_result = -38;
pub const ma_result_MA_BAD_PROTOCOL: ma_result = -39;
pub const ma_result_MA_PROTOCOL_UNAVAILABLE: ma_result = -40;
pub const ma_result_MA_PROTOCOL_NOT_SUPPORTED: ma_result = -41;
pub const ma_result_MA_PROTOCOL_FAMILY_NOT_SUPPORTED: ma_result = -42;
pub const ma_result_MA_ADDRESS_FAMILY_NOT_SUPPORTED: ma_result = -43;
pub const ma_result_MA_SOCKET_NOT_SUPPORTED: ma_result = -44;
pub const ma_result_MA_CONNECTION_RESET: ma_result = -45;
pub const ma_result_MA_ALREADY_CONNECTED: ma_result = -46;
pub const ma_result_MA_NOT_CONNECTED: ma_result = -47;
pub const ma_result_MA_CONNECTION_REFUSED: ma_result = -48;
pub const ma_result_MA_NO_HOST: ma_result = -49;
pub const ma_result_MA_IN_PROGRESS: ma_result = -50;
pub const ma_result_MA_CANCELLED: ma_result = -51;
pub const ma_result_MA_MEMORY_ALREADY_MAPPED: ma_result = -52;
pub const ma_result_MA_FORMAT_NOT_SUPPORTED: ma_result = -100;
pub const ma_result_MA_DEVICE_TYPE_NOT_SUPPORTED: ma_result = -101;
pub const ma_result_MA_SHARE_MODE_NOT_SUPPORTED: ma_result = -102;
pub const ma_result_MA_NO_BACKEND: ma_result = -103;
pub const ma_result_MA_NO_DEVICE: ma_result = -104;
pub const ma_result_MA_API_NOT_FOUND: ma_result = -105;
pub const ma_result_MA_INVALID_DEVICE_CONFIG: ma_result = -106;
pub const ma_result_MA_LOOP: ma_result = -107;
pub const ma_result_MA_DEVICE_NOT_INITIALIZED: ma_result = -200;
pub const ma_result_MA_DEVICE_ALREADY_INITIALIZED: ma_result = -201;
pub const ma_result_MA_DEVICE_NOT_STARTED: ma_result = -202;
pub const ma_result_MA_DEVICE_NOT_STOPPED: ma_result = -203;
pub const ma_result_MA_FAILED_TO_INIT_BACKEND: ma_result = -300;
pub const ma_result_MA_FAILED_TO_OPEN_BACKEND_DEVICE: ma_result = -301;
pub const ma_result_MA_FAILED_TO_START_BACKEND_DEVICE: ma_result = -302;
pub const ma_result_MA_FAILED_TO_STOP_BACKEND_DEVICE: ma_result = -303;
pub type ma_result = ::std::os::raw::c_int;
pub const ma_stream_format_ma_stream_format_pcm: ma_stream_format = 0;
pub type ma_stream_format = ::std::os::raw::c_int;
pub const ma_stream_layout_ma_stream_layout_interleaved: ma_stream_layout = 0;
pub const ma_stream_layout_ma_stream_layout_deinterleaved: ma_stream_layout = 1;
pub type ma_stream_layout = ::std::os::raw::c_int;
pub const ma_dither_mode_ma_dither_mode_none: ma_dither_mode = 0;
pub const ma_dither_mode_ma_dither_mode_rectangle: ma_dither_mode = 1;
pub const ma_dither_mode_ma_dither_mode_triangle: ma_dither_mode = 2;
pub type ma_dither_mode = ::std::os::raw::c_int;
pub const ma_format_ma_format_unknown: ma_format = 0;
pub const ma_format_ma_format_u8: ma_format = 1;
pub const ma_format_ma_format_s16: ma_format = 2;
pub const ma_format_ma_format_s24: ma_format = 3;
pub const ma_format_ma_format_s32: ma_format = 4;
pub const ma_format_ma_format_f32: ma_format = 5;
pub const ma_format_ma_format_count: ma_format = 6;
pub type ma_format = ::std::os::raw::c_int;
pub const ma_standard_sample_rate_ma_standard_sample_rate_48000: ma_standard_sample_rate = 48000;
pub const ma_standard_sample_rate_ma_standard_sample_rate_44100: ma_standard_sample_rate = 44100;
pub const ma_standard_sample_rate_ma_standard_sample_rate_32000: ma_standard_sample_rate = 32000;
pub const ma_standard_sample_rate_ma_standard_sample_rate_24000: ma_standard_sample_rate = 24000;
pub const ma_standard_sample_rate_ma_standard_sample_rate_22050: ma_standard_sample_rate = 22050;
pub const ma_standard_sample_rate_ma_standard_sample_rate_88200: ma_standard_sample_rate = 88200;
pub const ma_standard_sample_rate_ma_standard_sample_rate_96000: ma_standard_sample_rate = 96000;
pub const ma_standard_sample_rate_ma_standard_sample_rate_176400: ma_standard_sample_rate = 176400;
pub const ma_standard_sample_rate_ma_standard_sample_rate_192000: ma_standard_sample_rate = 192000;
pub const ma_standard_sample_rate_ma_standard_sample_rate_16000: ma_standard_sample_rate = 16000;
pub const ma_standard_sample_rate_ma_standard_sample_rate_11025: ma_standard_sample_rate = 11250;
pub const ma_standard_sample_rate_ma_standard_sample_rate_8000: ma_standard_sample_rate = 8000;
pub const ma_standard_sample_rate_ma_standard_sample_rate_352800: ma_standard_sample_rate = 352800;
pub const ma_standard_sample_rate_ma_standard_sample_rate_384000: ma_standard_sample_rate = 384000;
pub const ma_standard_sample_rate_ma_standard_sample_rate_min: ma_standard_sample_rate = 8000;
pub const ma_standard_sample_rate_ma_standard_sample_rate_max: ma_standard_sample_rate = 384000;
pub const ma_standard_sample_rate_ma_standard_sample_rate_count: ma_standard_sample_rate = 14;
pub type ma_standard_sample_rate = ::std::os::raw::c_int;
pub const ma_channel_mix_mode_ma_channel_mix_mode_rectangular: ma_channel_mix_mode = 0;
pub const ma_channel_mix_mode_ma_channel_mix_mode_simple: ma_channel_mix_mode = 1;
pub const ma_channel_mix_mode_ma_channel_mix_mode_custom_weights: ma_channel_mix_mode = 2;
pub const ma_channel_mix_mode_ma_channel_mix_mode_default: ma_channel_mix_mode = 0;
pub type ma_channel_mix_mode = ::std::os::raw::c_int;
pub const ma_standard_channel_map_ma_standard_channel_map_microsoft: ma_standard_channel_map = 0;
pub const ma_standard_channel_map_ma_standard_channel_map_alsa: ma_standard_channel_map = 1;
pub const ma_standard_channel_map_ma_standard_channel_map_rfc3551: ma_standard_channel_map = 2;
pub const ma_standard_channel_map_ma_standard_channel_map_flac: ma_standard_channel_map = 3;
pub const ma_standard_channel_map_ma_standard_channel_map_vorbis: ma_standard_channel_map = 4;
pub const ma_standard_channel_map_ma_standard_channel_map_sound4: ma_standard_channel_map = 5;
pub const ma_standard_channel_map_ma_standard_channel_map_sndio: ma_standard_channel_map = 6;
pub const ma_standard_channel_map_ma_standard_channel_map_webaudio: ma_standard_channel_map = 3;
pub const ma_standard_channel_map_ma_standard_channel_map_default: ma_standard_channel_map = 0;
pub type ma_standard_channel_map = ::std::os::raw::c_int;
pub const ma_performance_profile_ma_performance_profile_low_latency: ma_performance_profile = 0;
pub const ma_performance_profile_ma_performance_profile_conservative: ma_performance_profile = 1;
pub type ma_performance_profile = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_allocation_callbacks {
    pub pUserData: *mut ::std::os::raw::c_void,
    pub onMalloc: ::std::option::Option<
        unsafe extern "C" fn(
            sz: usize,
            pUserData: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub onRealloc: ::std::option::Option<
        unsafe extern "C" fn(
            p: *mut ::std::os::raw::c_void,
            sz: usize,
            pUserData: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub onFree: ::std::option::Option<
        unsafe extern "C" fn(
            p: *mut ::std::os::raw::c_void,
            pUserData: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[test]
fn bindgen_test_layout_ma_allocation_callbacks() {
    const UNINIT: ::std::mem::MaybeUninit<ma_allocation_callbacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_allocation_callbacks>(),
        32usize,
        concat!("Size of: ", stringify!(ma_allocation_callbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_allocation_callbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_allocation_callbacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pUserData) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_allocation_callbacks),
        "::",
        stringify!(pUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onMalloc) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_allocation_callbacks),
        "::",
        stringify!(onMalloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onRealloc) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_allocation_callbacks),
        "::",
        stringify!(onRealloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onFree) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_allocation_callbacks),
        "::",
        stringify!(onFree)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_lcg {
    pub state: ma_int32,
}
#[test]
fn bindgen_test_layout_ma_lcg() {
    const UNINIT: ::std::mem::MaybeUninit<ma_lcg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_lcg>(),
        4usize,
        concat!("Size of: ", stringify!(ma_lcg))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_lcg>(),
        4usize,
        concat!("Alignment of ", stringify!(ma_lcg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_lcg),
        "::",
        stringify!(state)
        )
    );
}
pub type ma_spinlock = ma_uint32;
pub const ma_thread_priority_ma_thread_priority_idle: ma_thread_priority = -5;
pub const ma_thread_priority_ma_thread_priority_lowest: ma_thread_priority = -4;
pub const ma_thread_priority_ma_thread_priority_low: ma_thread_priority = -3;
pub const ma_thread_priority_ma_thread_priority_normal: ma_thread_priority = -2;
pub const ma_thread_priority_ma_thread_priority_high: ma_thread_priority = -1;
pub const ma_thread_priority_ma_thread_priority_highest: ma_thread_priority = 0;
pub const ma_thread_priority_ma_thread_priority_realtime: ma_thread_priority = 1;
pub const ma_thread_priority_ma_thread_priority_default: ma_thread_priority = 0;
pub type ma_thread_priority = ::std::os::raw::c_int;
pub type ma_thread = ma_handle;
pub type ma_mutex = ma_handle;
pub type ma_event = ma_handle;
pub type ma_semaphore = ma_handle;
extern "C" {
    pub fn ma_version(pMajor: *mut ma_uint32, pMinor: *mut ma_uint32, pRevision: *mut ma_uint32);
}
extern "C" {
    pub fn ma_version_string() -> *const ::std::os::raw::c_char;
}
pub type ma_log_callback_proc = ::std::option::Option<
    unsafe extern "C" fn(
        pUserData: *mut ::std::os::raw::c_void,
        level: ma_uint32,
        pMessage: *const ::std::os::raw::c_char,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_log_callback {
    pub onLog: ma_log_callback_proc,
    pub pUserData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ma_log_callback() {
    const UNINIT: ::std::mem::MaybeUninit<ma_log_callback> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_log_callback>(),
        16usize,
        concat!("Size of: ", stringify!(ma_log_callback))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_log_callback>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_log_callback))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onLog) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_log_callback),
        "::",
        stringify!(onLog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pUserData) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_log_callback),
        "::",
        stringify!(pUserData)
        )
    );
}
extern "C" {
    pub fn ma_log_callback_init(
        onLog: ma_log_callback_proc,
        pUserData: *mut ::std::os::raw::c_void,
    ) -> ma_log_callback;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_log {
    pub callbacks: [ma_log_callback; 4usize],
    pub callbackCount: ma_uint32,
    pub allocationCallbacks: ma_allocation_callbacks,
    pub lock: ma_mutex,
}
#[test]
fn bindgen_test_layout_ma_log() {
    const UNINIT: ::std::mem::MaybeUninit<ma_log> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_log>(),
        112usize,
        concat!("Size of: ", stringify!(ma_log))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_log>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_log))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callbacks) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_log),
        "::",
        stringify!(callbacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callbackCount) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_log),
        "::",
        stringify!(callbackCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocationCallbacks) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_log),
        "::",
        stringify!(allocationCallbacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        104usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_log),
        "::",
        stringify!(lock)
        )
    );
}
extern "C" {
    pub fn ma_log_init(
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pLog: *mut ma_log,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_log_uninit(pLog: *mut ma_log);
}
extern "C" {
    pub fn ma_log_register_callback(pLog: *mut ma_log, callback: ma_log_callback) -> ma_result;
}
extern "C" {
    pub fn ma_log_unregister_callback(pLog: *mut ma_log, callback: ma_log_callback) -> ma_result;
}
extern "C" {
    pub fn ma_log_post(
        pLog: *mut ma_log,
        level: ma_uint32,
        pMessage: *const ::std::os::raw::c_char,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_log_postv(
        pLog: *mut ma_log,
        level: ma_uint32,
        pFormat: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_log_postf(
        pLog: *mut ma_log,
        level: ma_uint32,
        pFormat: *const ::std::os::raw::c_char,
        ...
    ) -> ma_result;
}
#[doc = "Biquad Filtering"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_biquad_coefficient {
    pub f32_: f32,
    pub s32: ma_int32,
}
#[test]
fn bindgen_test_layout_ma_biquad_coefficient() {
    const UNINIT: ::std::mem::MaybeUninit<ma_biquad_coefficient> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_biquad_coefficient>(),
        4usize,
        concat!("Size of: ", stringify!(ma_biquad_coefficient))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_biquad_coefficient>(),
        4usize,
        concat!("Alignment of ", stringify!(ma_biquad_coefficient))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f32_) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_biquad_coefficient),
        "::",
        stringify!(f32_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_biquad_coefficient),
        "::",
        stringify!(s32)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_biquad_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub b0: f64,
    pub b1: f64,
    pub b2: f64,
    pub a0: f64,
    pub a1: f64,
    pub a2: f64,
}
#[test]
fn bindgen_test_layout_ma_biquad_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_biquad_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_biquad_config>(),
        56usize,
        concat!("Size of: ", stringify!(ma_biquad_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_biquad_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_biquad_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_biquad_config),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_biquad_config),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b0) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_biquad_config),
        "::",
        stringify!(b0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b1) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_biquad_config),
        "::",
        stringify!(b1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b2) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_biquad_config),
        "::",
        stringify!(b2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a0) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_biquad_config),
        "::",
        stringify!(a0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a1) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_biquad_config),
        "::",
        stringify!(a1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a2) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_biquad_config),
        "::",
        stringify!(a2)
        )
    );
}
extern "C" {
    pub fn ma_biquad_config_init(
        format: ma_format,
        channels: ma_uint32,
        b0: f64,
        b1: f64,
        b2: f64,
        a0: f64,
        a1: f64,
        a2: f64,
    ) -> ma_biquad_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_biquad {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub b0: ma_biquad_coefficient,
    pub b1: ma_biquad_coefficient,
    pub b2: ma_biquad_coefficient,
    pub a1: ma_biquad_coefficient,
    pub a2: ma_biquad_coefficient,
    pub pR1: *mut ma_biquad_coefficient,
    pub pR2: *mut ma_biquad_coefficient,
    pub _pHeap: *mut ::std::os::raw::c_void,
    pub _ownsHeap: ma_bool32,
}
#[test]
fn bindgen_test_layout_ma_biquad() {
    const UNINIT: ::std::mem::MaybeUninit<ma_biquad> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_biquad>(),
        64usize,
        concat!("Size of: ", stringify!(ma_biquad))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_biquad>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_biquad))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_biquad),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_biquad),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b0) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_biquad),
        "::",
        stringify!(b0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b1) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_biquad),
        "::",
        stringify!(b1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b2) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_biquad),
        "::",
        stringify!(b2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a1) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_biquad),
        "::",
        stringify!(a1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a2) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_biquad),
        "::",
        stringify!(a2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pR1) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_biquad),
        "::",
        stringify!(pR1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pR2) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_biquad),
        "::",
        stringify!(pR2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pHeap) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_biquad),
        "::",
        stringify!(_pHeap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ownsHeap) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_biquad),
        "::",
        stringify!(_ownsHeap)
        )
    );
}
extern "C" {
    pub fn ma_biquad_get_heap_size(
        pConfig: *const ma_biquad_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_biquad_init_preallocated(
        pConfig: *const ma_biquad_config,
        pHeap: *mut ::std::os::raw::c_void,
        pBQ: *mut ma_biquad,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_biquad_init(
        pConfig: *const ma_biquad_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pBQ: *mut ma_biquad,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_biquad_uninit(
        pBQ: *mut ma_biquad,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
extern "C" {
    pub fn ma_biquad_reinit(pConfig: *const ma_biquad_config, pBQ: *mut ma_biquad) -> ma_result;
}
extern "C" {
    pub fn ma_biquad_clear_cache(pBQ: *mut ma_biquad) -> ma_result;
}
extern "C" {
    pub fn ma_biquad_process_pcm_frames(
        pBQ: *mut ma_biquad,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_biquad_get_latency(pBQ: *const ma_biquad) -> ma_uint32;
}
#[doc = "Low-Pass Filtering"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_lpf1_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub cutoffFrequency: f64,
    pub q: f64,
}
#[test]
fn bindgen_test_layout_ma_lpf1_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_lpf1_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_lpf1_config>(),
        32usize,
        concat!("Size of: ", stringify!(ma_lpf1_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_lpf1_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_lpf1_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_lpf1_config),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_lpf1_config),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_lpf1_config),
        "::",
        stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cutoffFrequency) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_lpf1_config),
        "::",
        stringify!(cutoffFrequency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_lpf1_config),
        "::",
        stringify!(q)
        )
    );
}
#[doc = "Low-Pass Filtering"]
pub type ma_lpf2_config = ma_lpf1_config;
extern "C" {
    pub fn ma_lpf1_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        cutoffFrequency: f64,
    ) -> ma_lpf1_config;
}
extern "C" {
    pub fn ma_lpf2_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        cutoffFrequency: f64,
        q: f64,
    ) -> ma_lpf2_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_lpf1 {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub a: ma_biquad_coefficient,
    pub pR1: *mut ma_biquad_coefficient,
    pub _pHeap: *mut ::std::os::raw::c_void,
    pub _ownsHeap: ma_bool32,
}
#[test]
fn bindgen_test_layout_ma_lpf1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_lpf1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_lpf1>(),
        40usize,
        concat!("Size of: ", stringify!(ma_lpf1))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_lpf1>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_lpf1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_lpf1),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_lpf1),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_lpf1),
        "::",
        stringify!(a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pR1) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_lpf1),
        "::",
        stringify!(pR1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pHeap) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_lpf1),
        "::",
        stringify!(_pHeap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ownsHeap) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_lpf1),
        "::",
        stringify!(_ownsHeap)
        )
    );
}
extern "C" {
    pub fn ma_lpf1_get_heap_size(
        pConfig: *const ma_lpf1_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_lpf1_init_preallocated(
        pConfig: *const ma_lpf1_config,
        pHeap: *mut ::std::os::raw::c_void,
        pLPF: *mut ma_lpf1,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_lpf1_init(
        pConfig: *const ma_lpf1_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pLPF: *mut ma_lpf1,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_lpf1_uninit(pLPF: *mut ma_lpf1, pAllocationCallbacks: *const ma_allocation_callbacks);
}
extern "C" {
    pub fn ma_lpf1_reinit(pConfig: *const ma_lpf1_config, pLPF: *mut ma_lpf1) -> ma_result;
}
extern "C" {
    pub fn ma_lpf1_clear_cache(pLPF: *mut ma_lpf1) -> ma_result;
}
extern "C" {
    pub fn ma_lpf1_process_pcm_frames(
        pLPF: *mut ma_lpf1,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_lpf1_get_latency(pLPF: *const ma_lpf1) -> ma_uint32;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_lpf2 {
    pub bq: ma_biquad,
}
#[test]
fn bindgen_test_layout_ma_lpf2() {
    const UNINIT: ::std::mem::MaybeUninit<ma_lpf2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_lpf2>(),
        64usize,
        concat!("Size of: ", stringify!(ma_lpf2))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_lpf2>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_lpf2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bq) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_lpf2),
        "::",
        stringify!(bq)
        )
    );
}
extern "C" {
    pub fn ma_lpf2_get_heap_size(
        pConfig: *const ma_lpf2_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_lpf2_init_preallocated(
        pConfig: *const ma_lpf2_config,
        pHeap: *mut ::std::os::raw::c_void,
        pHPF: *mut ma_lpf2,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_lpf2_init(
        pConfig: *const ma_lpf2_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pLPF: *mut ma_lpf2,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_lpf2_uninit(pLPF: *mut ma_lpf2, pAllocationCallbacks: *const ma_allocation_callbacks);
}
extern "C" {
    pub fn ma_lpf2_reinit(pConfig: *const ma_lpf2_config, pLPF: *mut ma_lpf2) -> ma_result;
}
extern "C" {
    pub fn ma_lpf2_clear_cache(pLPF: *mut ma_lpf2) -> ma_result;
}
extern "C" {
    pub fn ma_lpf2_process_pcm_frames(
        pLPF: *mut ma_lpf2,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_lpf2_get_latency(pLPF: *const ma_lpf2) -> ma_uint32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_lpf_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub cutoffFrequency: f64,
    pub order: ma_uint32,
}
#[test]
fn bindgen_test_layout_ma_lpf_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_lpf_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_lpf_config>(),
        32usize,
        concat!("Size of: ", stringify!(ma_lpf_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_lpf_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_lpf_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_lpf_config),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_lpf_config),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_lpf_config),
        "::",
        stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cutoffFrequency) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_lpf_config),
        "::",
        stringify!(cutoffFrequency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).order) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_lpf_config),
        "::",
        stringify!(order)
        )
    );
}
extern "C" {
    pub fn ma_lpf_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        cutoffFrequency: f64,
        order: ma_uint32,
    ) -> ma_lpf_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_lpf {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub lpf1Count: ma_uint32,
    pub lpf2Count: ma_uint32,
    pub pLPF1: *mut ma_lpf1,
    pub pLPF2: *mut ma_lpf2,
    pub _pHeap: *mut ::std::os::raw::c_void,
    pub _ownsHeap: ma_bool32,
}
#[test]
fn bindgen_test_layout_ma_lpf() {
    const UNINIT: ::std::mem::MaybeUninit<ma_lpf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_lpf>(),
        56usize,
        concat!("Size of: ", stringify!(ma_lpf))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_lpf>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_lpf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_lpf),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_lpf),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_lpf),
        "::",
        stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lpf1Count) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_lpf),
        "::",
        stringify!(lpf1Count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lpf2Count) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_lpf),
        "::",
        stringify!(lpf2Count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pLPF1) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_lpf),
        "::",
        stringify!(pLPF1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pLPF2) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_lpf),
        "::",
        stringify!(pLPF2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pHeap) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_lpf),
        "::",
        stringify!(_pHeap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ownsHeap) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_lpf),
        "::",
        stringify!(_ownsHeap)
        )
    );
}
extern "C" {
    pub fn ma_lpf_get_heap_size(
        pConfig: *const ma_lpf_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_lpf_init_preallocated(
        pConfig: *const ma_lpf_config,
        pHeap: *mut ::std::os::raw::c_void,
        pLPF: *mut ma_lpf,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_lpf_init(
        pConfig: *const ma_lpf_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pLPF: *mut ma_lpf,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_lpf_uninit(pLPF: *mut ma_lpf, pAllocationCallbacks: *const ma_allocation_callbacks);
}
extern "C" {
    pub fn ma_lpf_reinit(pConfig: *const ma_lpf_config, pLPF: *mut ma_lpf) -> ma_result;
}
extern "C" {
    pub fn ma_lpf_clear_cache(pLPF: *mut ma_lpf) -> ma_result;
}
extern "C" {
    pub fn ma_lpf_process_pcm_frames(
        pLPF: *mut ma_lpf,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_lpf_get_latency(pLPF: *const ma_lpf) -> ma_uint32;
}
#[doc = "High-Pass Filtering"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_hpf1_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub cutoffFrequency: f64,
    pub q: f64,
}
#[test]
fn bindgen_test_layout_ma_hpf1_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_hpf1_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_hpf1_config>(),
        32usize,
        concat!("Size of: ", stringify!(ma_hpf1_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_hpf1_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_hpf1_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hpf1_config),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hpf1_config),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hpf1_config),
        "::",
        stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cutoffFrequency) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hpf1_config),
        "::",
        stringify!(cutoffFrequency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hpf1_config),
        "::",
        stringify!(q)
        )
    );
}
#[doc = "High-Pass Filtering"]
pub type ma_hpf2_config = ma_hpf1_config;
extern "C" {
    pub fn ma_hpf1_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        cutoffFrequency: f64,
    ) -> ma_hpf1_config;
}
extern "C" {
    pub fn ma_hpf2_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        cutoffFrequency: f64,
        q: f64,
    ) -> ma_hpf2_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_hpf1 {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub a: ma_biquad_coefficient,
    pub pR1: *mut ma_biquad_coefficient,
    pub _pHeap: *mut ::std::os::raw::c_void,
    pub _ownsHeap: ma_bool32,
}
#[test]
fn bindgen_test_layout_ma_hpf1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_hpf1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_hpf1>(),
        40usize,
        concat!("Size of: ", stringify!(ma_hpf1))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_hpf1>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_hpf1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hpf1),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hpf1),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hpf1),
        "::",
        stringify!(a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pR1) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hpf1),
        "::",
        stringify!(pR1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pHeap) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hpf1),
        "::",
        stringify!(_pHeap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ownsHeap) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hpf1),
        "::",
        stringify!(_ownsHeap)
        )
    );
}
extern "C" {
    pub fn ma_hpf1_get_heap_size(
        pConfig: *const ma_hpf1_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_hpf1_init_preallocated(
        pConfig: *const ma_hpf1_config,
        pHeap: *mut ::std::os::raw::c_void,
        pLPF: *mut ma_hpf1,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_hpf1_init(
        pConfig: *const ma_hpf1_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pHPF: *mut ma_hpf1,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_hpf1_uninit(pHPF: *mut ma_hpf1, pAllocationCallbacks: *const ma_allocation_callbacks);
}
extern "C" {
    pub fn ma_hpf1_reinit(pConfig: *const ma_hpf1_config, pHPF: *mut ma_hpf1) -> ma_result;
}
extern "C" {
    pub fn ma_hpf1_process_pcm_frames(
        pHPF: *mut ma_hpf1,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_hpf1_get_latency(pHPF: *const ma_hpf1) -> ma_uint32;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_hpf2 {
    pub bq: ma_biquad,
}
#[test]
fn bindgen_test_layout_ma_hpf2() {
    const UNINIT: ::std::mem::MaybeUninit<ma_hpf2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_hpf2>(),
        64usize,
        concat!("Size of: ", stringify!(ma_hpf2))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_hpf2>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_hpf2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bq) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hpf2),
        "::",
        stringify!(bq)
        )
    );
}
extern "C" {
    pub fn ma_hpf2_get_heap_size(
        pConfig: *const ma_hpf2_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_hpf2_init_preallocated(
        pConfig: *const ma_hpf2_config,
        pHeap: *mut ::std::os::raw::c_void,
        pHPF: *mut ma_hpf2,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_hpf2_init(
        pConfig: *const ma_hpf2_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pHPF: *mut ma_hpf2,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_hpf2_uninit(pHPF: *mut ma_hpf2, pAllocationCallbacks: *const ma_allocation_callbacks);
}
extern "C" {
    pub fn ma_hpf2_reinit(pConfig: *const ma_hpf2_config, pHPF: *mut ma_hpf2) -> ma_result;
}
extern "C" {
    pub fn ma_hpf2_process_pcm_frames(
        pHPF: *mut ma_hpf2,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_hpf2_get_latency(pHPF: *const ma_hpf2) -> ma_uint32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_hpf_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub cutoffFrequency: f64,
    pub order: ma_uint32,
}
#[test]
fn bindgen_test_layout_ma_hpf_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_hpf_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_hpf_config>(),
        32usize,
        concat!("Size of: ", stringify!(ma_hpf_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_hpf_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_hpf_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hpf_config),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hpf_config),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hpf_config),
        "::",
        stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cutoffFrequency) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hpf_config),
        "::",
        stringify!(cutoffFrequency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).order) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hpf_config),
        "::",
        stringify!(order)
        )
    );
}
extern "C" {
    pub fn ma_hpf_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        cutoffFrequency: f64,
        order: ma_uint32,
    ) -> ma_hpf_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_hpf {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub hpf1Count: ma_uint32,
    pub hpf2Count: ma_uint32,
    pub pHPF1: *mut ma_hpf1,
    pub pHPF2: *mut ma_hpf2,
    pub _pHeap: *mut ::std::os::raw::c_void,
    pub _ownsHeap: ma_bool32,
}
#[test]
fn bindgen_test_layout_ma_hpf() {
    const UNINIT: ::std::mem::MaybeUninit<ma_hpf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_hpf>(),
        56usize,
        concat!("Size of: ", stringify!(ma_hpf))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_hpf>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_hpf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hpf),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hpf),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hpf),
        "::",
        stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hpf1Count) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hpf),
        "::",
        stringify!(hpf1Count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hpf2Count) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hpf),
        "::",
        stringify!(hpf2Count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pHPF1) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hpf),
        "::",
        stringify!(pHPF1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pHPF2) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hpf),
        "::",
        stringify!(pHPF2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pHeap) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hpf),
        "::",
        stringify!(_pHeap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ownsHeap) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hpf),
        "::",
        stringify!(_ownsHeap)
        )
    );
}
extern "C" {
    pub fn ma_hpf_get_heap_size(
        pConfig: *const ma_hpf_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_hpf_init_preallocated(
        pConfig: *const ma_hpf_config,
        pHeap: *mut ::std::os::raw::c_void,
        pLPF: *mut ma_hpf,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_hpf_init(
        pConfig: *const ma_hpf_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pHPF: *mut ma_hpf,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_hpf_uninit(pHPF: *mut ma_hpf, pAllocationCallbacks: *const ma_allocation_callbacks);
}
extern "C" {
    pub fn ma_hpf_reinit(pConfig: *const ma_hpf_config, pHPF: *mut ma_hpf) -> ma_result;
}
extern "C" {
    pub fn ma_hpf_process_pcm_frames(
        pHPF: *mut ma_hpf,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_hpf_get_latency(pHPF: *const ma_hpf) -> ma_uint32;
}
#[doc = "Band-Pass Filtering"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_bpf2_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub cutoffFrequency: f64,
    pub q: f64,
}
#[test]
fn bindgen_test_layout_ma_bpf2_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_bpf2_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_bpf2_config>(),
        32usize,
        concat!("Size of: ", stringify!(ma_bpf2_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_bpf2_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_bpf2_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_bpf2_config),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_bpf2_config),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_bpf2_config),
        "::",
        stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cutoffFrequency) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_bpf2_config),
        "::",
        stringify!(cutoffFrequency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_bpf2_config),
        "::",
        stringify!(q)
        )
    );
}
extern "C" {
    pub fn ma_bpf2_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        cutoffFrequency: f64,
        q: f64,
    ) -> ma_bpf2_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_bpf2 {
    pub bq: ma_biquad,
}
#[test]
fn bindgen_test_layout_ma_bpf2() {
    const UNINIT: ::std::mem::MaybeUninit<ma_bpf2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_bpf2>(),
        64usize,
        concat!("Size of: ", stringify!(ma_bpf2))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_bpf2>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_bpf2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bq) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_bpf2),
        "::",
        stringify!(bq)
        )
    );
}
extern "C" {
    pub fn ma_bpf2_get_heap_size(
        pConfig: *const ma_bpf2_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_bpf2_init_preallocated(
        pConfig: *const ma_bpf2_config,
        pHeap: *mut ::std::os::raw::c_void,
        pBPF: *mut ma_bpf2,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_bpf2_init(
        pConfig: *const ma_bpf2_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pBPF: *mut ma_bpf2,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_bpf2_uninit(pBPF: *mut ma_bpf2, pAllocationCallbacks: *const ma_allocation_callbacks);
}
extern "C" {
    pub fn ma_bpf2_reinit(pConfig: *const ma_bpf2_config, pBPF: *mut ma_bpf2) -> ma_result;
}
extern "C" {
    pub fn ma_bpf2_process_pcm_frames(
        pBPF: *mut ma_bpf2,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_bpf2_get_latency(pBPF: *const ma_bpf2) -> ma_uint32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_bpf_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub cutoffFrequency: f64,
    pub order: ma_uint32,
}
#[test]
fn bindgen_test_layout_ma_bpf_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_bpf_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_bpf_config>(),
        32usize,
        concat!("Size of: ", stringify!(ma_bpf_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_bpf_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_bpf_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_bpf_config),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_bpf_config),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_bpf_config),
        "::",
        stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cutoffFrequency) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_bpf_config),
        "::",
        stringify!(cutoffFrequency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).order) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_bpf_config),
        "::",
        stringify!(order)
        )
    );
}
extern "C" {
    pub fn ma_bpf_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        cutoffFrequency: f64,
        order: ma_uint32,
    ) -> ma_bpf_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_bpf {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub bpf2Count: ma_uint32,
    pub pBPF2: *mut ma_bpf2,
    pub _pHeap: *mut ::std::os::raw::c_void,
    pub _ownsHeap: ma_bool32,
}
#[test]
fn bindgen_test_layout_ma_bpf() {
    const UNINIT: ::std::mem::MaybeUninit<ma_bpf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_bpf>(),
        40usize,
        concat!("Size of: ", stringify!(ma_bpf))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_bpf>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_bpf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_bpf),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_bpf),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bpf2Count) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_bpf),
        "::",
        stringify!(bpf2Count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pBPF2) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_bpf),
        "::",
        stringify!(pBPF2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pHeap) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_bpf),
        "::",
        stringify!(_pHeap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ownsHeap) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_bpf),
        "::",
        stringify!(_ownsHeap)
        )
    );
}
extern "C" {
    pub fn ma_bpf_get_heap_size(
        pConfig: *const ma_bpf_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_bpf_init_preallocated(
        pConfig: *const ma_bpf_config,
        pHeap: *mut ::std::os::raw::c_void,
        pBPF: *mut ma_bpf,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_bpf_init(
        pConfig: *const ma_bpf_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pBPF: *mut ma_bpf,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_bpf_uninit(pBPF: *mut ma_bpf, pAllocationCallbacks: *const ma_allocation_callbacks);
}
extern "C" {
    pub fn ma_bpf_reinit(pConfig: *const ma_bpf_config, pBPF: *mut ma_bpf) -> ma_result;
}
extern "C" {
    pub fn ma_bpf_process_pcm_frames(
        pBPF: *mut ma_bpf,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_bpf_get_latency(pBPF: *const ma_bpf) -> ma_uint32;
}
#[doc = "Notching Filter"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_notch2_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub q: f64,
    pub frequency: f64,
}
#[test]
fn bindgen_test_layout_ma_notch2_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_notch2_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_notch2_config>(),
        32usize,
        concat!("Size of: ", stringify!(ma_notch2_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_notch2_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_notch2_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_notch2_config),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_notch2_config),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_notch2_config),
        "::",
        stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_notch2_config),
        "::",
        stringify!(q)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frequency) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_notch2_config),
        "::",
        stringify!(frequency)
        )
    );
}
#[doc = "Notching Filter"]
pub type ma_notch_config = ma_notch2_config;
extern "C" {
    pub fn ma_notch2_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        q: f64,
        frequency: f64,
    ) -> ma_notch2_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_notch2 {
    pub bq: ma_biquad,
}
#[test]
fn bindgen_test_layout_ma_notch2() {
    const UNINIT: ::std::mem::MaybeUninit<ma_notch2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_notch2>(),
        64usize,
        concat!("Size of: ", stringify!(ma_notch2))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_notch2>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_notch2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bq) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_notch2),
        "::",
        stringify!(bq)
        )
    );
}
extern "C" {
    pub fn ma_notch2_get_heap_size(
        pConfig: *const ma_notch2_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_notch2_init_preallocated(
        pConfig: *const ma_notch2_config,
        pHeap: *mut ::std::os::raw::c_void,
        pFilter: *mut ma_notch2,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_notch2_init(
        pConfig: *const ma_notch2_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pFilter: *mut ma_notch2,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_notch2_uninit(
        pFilter: *mut ma_notch2,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
extern "C" {
    pub fn ma_notch2_reinit(pConfig: *const ma_notch2_config, pFilter: *mut ma_notch2)
                            -> ma_result;
}
extern "C" {
    pub fn ma_notch2_process_pcm_frames(
        pFilter: *mut ma_notch2,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_notch2_get_latency(pFilter: *const ma_notch2) -> ma_uint32;
}
#[doc = "Peaking EQ Filter"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_peak2_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub gainDB: f64,
    pub q: f64,
    pub frequency: f64,
}
#[test]
fn bindgen_test_layout_ma_peak2_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_peak2_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_peak2_config>(),
        40usize,
        concat!("Size of: ", stringify!(ma_peak2_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_peak2_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_peak2_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_peak2_config),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_peak2_config),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_peak2_config),
        "::",
        stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gainDB) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_peak2_config),
        "::",
        stringify!(gainDB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_peak2_config),
        "::",
        stringify!(q)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frequency) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_peak2_config),
        "::",
        stringify!(frequency)
        )
    );
}
#[doc = "Peaking EQ Filter"]
pub type ma_peak_config = ma_peak2_config;
extern "C" {
    pub fn ma_peak2_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        gainDB: f64,
        q: f64,
        frequency: f64,
    ) -> ma_peak2_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_peak2 {
    pub bq: ma_biquad,
}
#[test]
fn bindgen_test_layout_ma_peak2() {
    const UNINIT: ::std::mem::MaybeUninit<ma_peak2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_peak2>(),
        64usize,
        concat!("Size of: ", stringify!(ma_peak2))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_peak2>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_peak2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bq) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_peak2),
        "::",
        stringify!(bq)
        )
    );
}
extern "C" {
    pub fn ma_peak2_get_heap_size(
        pConfig: *const ma_peak2_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_peak2_init_preallocated(
        pConfig: *const ma_peak2_config,
        pHeap: *mut ::std::os::raw::c_void,
        pFilter: *mut ma_peak2,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_peak2_init(
        pConfig: *const ma_peak2_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pFilter: *mut ma_peak2,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_peak2_uninit(
        pFilter: *mut ma_peak2,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
extern "C" {
    pub fn ma_peak2_reinit(pConfig: *const ma_peak2_config, pFilter: *mut ma_peak2) -> ma_result;
}
extern "C" {
    pub fn ma_peak2_process_pcm_frames(
        pFilter: *mut ma_peak2,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_peak2_get_latency(pFilter: *const ma_peak2) -> ma_uint32;
}
#[doc = "Low Shelf Filter"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_loshelf2_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub gainDB: f64,
    pub shelfSlope: f64,
    pub frequency: f64,
}
#[test]
fn bindgen_test_layout_ma_loshelf2_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_loshelf2_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_loshelf2_config>(),
        40usize,
        concat!("Size of: ", stringify!(ma_loshelf2_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_loshelf2_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_loshelf2_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_loshelf2_config),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_loshelf2_config),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_loshelf2_config),
        "::",
        stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gainDB) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_loshelf2_config),
        "::",
        stringify!(gainDB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shelfSlope) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_loshelf2_config),
        "::",
        stringify!(shelfSlope)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frequency) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_loshelf2_config),
        "::",
        stringify!(frequency)
        )
    );
}
#[doc = "Low Shelf Filter"]
pub type ma_loshelf_config = ma_loshelf2_config;
extern "C" {
    pub fn ma_loshelf2_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        gainDB: f64,
        shelfSlope: f64,
        frequency: f64,
    ) -> ma_loshelf2_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_loshelf2 {
    pub bq: ma_biquad,
}
#[test]
fn bindgen_test_layout_ma_loshelf2() {
    const UNINIT: ::std::mem::MaybeUninit<ma_loshelf2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_loshelf2>(),
        64usize,
        concat!("Size of: ", stringify!(ma_loshelf2))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_loshelf2>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_loshelf2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bq) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_loshelf2),
        "::",
        stringify!(bq)
        )
    );
}
extern "C" {
    pub fn ma_loshelf2_get_heap_size(
        pConfig: *const ma_loshelf2_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_loshelf2_init_preallocated(
        pConfig: *const ma_loshelf2_config,
        pHeap: *mut ::std::os::raw::c_void,
        pFilter: *mut ma_loshelf2,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_loshelf2_init(
        pConfig: *const ma_loshelf2_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pFilter: *mut ma_loshelf2,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_loshelf2_uninit(
        pFilter: *mut ma_loshelf2,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
extern "C" {
    pub fn ma_loshelf2_reinit(
        pConfig: *const ma_loshelf2_config,
        pFilter: *mut ma_loshelf2,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_loshelf2_process_pcm_frames(
        pFilter: *mut ma_loshelf2,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_loshelf2_get_latency(pFilter: *const ma_loshelf2) -> ma_uint32;
}
#[doc = "High Shelf Filter"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_hishelf2_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub gainDB: f64,
    pub shelfSlope: f64,
    pub frequency: f64,
}
#[test]
fn bindgen_test_layout_ma_hishelf2_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_hishelf2_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_hishelf2_config>(),
        40usize,
        concat!("Size of: ", stringify!(ma_hishelf2_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_hishelf2_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_hishelf2_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hishelf2_config),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hishelf2_config),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hishelf2_config),
        "::",
        stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gainDB) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hishelf2_config),
        "::",
        stringify!(gainDB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shelfSlope) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hishelf2_config),
        "::",
        stringify!(shelfSlope)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frequency) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hishelf2_config),
        "::",
        stringify!(frequency)
        )
    );
}
#[doc = "High Shelf Filter"]
pub type ma_hishelf_config = ma_hishelf2_config;
extern "C" {
    pub fn ma_hishelf2_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        gainDB: f64,
        shelfSlope: f64,
        frequency: f64,
    ) -> ma_hishelf2_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_hishelf2 {
    pub bq: ma_biquad,
}
#[test]
fn bindgen_test_layout_ma_hishelf2() {
    const UNINIT: ::std::mem::MaybeUninit<ma_hishelf2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_hishelf2>(),
        64usize,
        concat!("Size of: ", stringify!(ma_hishelf2))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_hishelf2>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_hishelf2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bq) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hishelf2),
        "::",
        stringify!(bq)
        )
    );
}
extern "C" {
    pub fn ma_hishelf2_get_heap_size(
        pConfig: *const ma_hishelf2_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_hishelf2_init_preallocated(
        pConfig: *const ma_hishelf2_config,
        pHeap: *mut ::std::os::raw::c_void,
        pFilter: *mut ma_hishelf2,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_hishelf2_init(
        pConfig: *const ma_hishelf2_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pFilter: *mut ma_hishelf2,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_hishelf2_uninit(
        pFilter: *mut ma_hishelf2,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
extern "C" {
    pub fn ma_hishelf2_reinit(
        pConfig: *const ma_hishelf2_config,
        pFilter: *mut ma_hishelf2,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_hishelf2_process_pcm_frames(
        pFilter: *mut ma_hishelf2,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_hishelf2_get_latency(pFilter: *const ma_hishelf2) -> ma_uint32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_delay_config {
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub delayInFrames: ma_uint32,
    pub delayStart: ma_bool32,
    pub wet: f32,
    pub dry: f32,
    pub decay: f32,
}
#[test]
fn bindgen_test_layout_ma_delay_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_delay_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_delay_config>(),
        28usize,
        concat!("Size of: ", stringify!(ma_delay_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_delay_config>(),
        4usize,
        concat!("Alignment of ", stringify!(ma_delay_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_delay_config),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_delay_config),
        "::",
        stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delayInFrames) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_delay_config),
        "::",
        stringify!(delayInFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delayStart) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_delay_config),
        "::",
        stringify!(delayStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wet) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_delay_config),
        "::",
        stringify!(wet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dry) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_delay_config),
        "::",
        stringify!(dry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decay) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_delay_config),
        "::",
        stringify!(decay)
        )
    );
}
extern "C" {
    pub fn ma_delay_config_init(
        channels: ma_uint32,
        sampleRate: ma_uint32,
        delayInFrames: ma_uint32,
        decay: f32,
    ) -> ma_delay_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_delay {
    pub config: ma_delay_config,
    pub cursor: ma_uint32,
    pub bufferSizeInFrames: ma_uint32,
    pub pBuffer: *mut f32,
}
#[test]
fn bindgen_test_layout_ma_delay() {
    const UNINIT: ::std::mem::MaybeUninit<ma_delay> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_delay>(),
        48usize,
        concat!("Size of: ", stringify!(ma_delay))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_delay>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_delay))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_delay),
        "::",
        stringify!(config)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cursor) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_delay),
        "::",
        stringify!(cursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferSizeInFrames) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_delay),
        "::",
        stringify!(bufferSizeInFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pBuffer) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_delay),
        "::",
        stringify!(pBuffer)
        )
    );
}
extern "C" {
    pub fn ma_delay_init(
        pConfig: *const ma_delay_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pDelay: *mut ma_delay,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_delay_uninit(
        pDelay: *mut ma_delay,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
extern "C" {
    pub fn ma_delay_process_pcm_frames(
        pDelay: *mut ma_delay,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_delay_set_wet(pDelay: *mut ma_delay, value: f32);
}
extern "C" {
    pub fn ma_delay_get_wet(pDelay: *const ma_delay) -> f32;
}
extern "C" {
    pub fn ma_delay_set_dry(pDelay: *mut ma_delay, value: f32);
}
extern "C" {
    pub fn ma_delay_get_dry(pDelay: *const ma_delay) -> f32;
}
extern "C" {
    pub fn ma_delay_set_decay(pDelay: *mut ma_delay, value: f32);
}
extern "C" {
    pub fn ma_delay_get_decay(pDelay: *const ma_delay) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_gainer_config {
    pub channels: ma_uint32,
    pub smoothTimeInFrames: ma_uint32,
}
#[test]
fn bindgen_test_layout_ma_gainer_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_gainer_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_gainer_config>(),
        8usize,
        concat!("Size of: ", stringify!(ma_gainer_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_gainer_config>(),
        4usize,
        concat!("Alignment of ", stringify!(ma_gainer_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_gainer_config),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).smoothTimeInFrames) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_gainer_config),
        "::",
        stringify!(smoothTimeInFrames)
        )
    );
}
extern "C" {
    pub fn ma_gainer_config_init(
        channels: ma_uint32,
        smoothTimeInFrames: ma_uint32,
    ) -> ma_gainer_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_gainer {
    pub config: ma_gainer_config,
    pub t: ma_uint32,
    pub pOldGains: *mut f32,
    pub pNewGains: *mut f32,
    pub _pHeap: *mut ::std::os::raw::c_void,
    pub _ownsHeap: ma_bool32,
}
#[test]
fn bindgen_test_layout_ma_gainer() {
    const UNINIT: ::std::mem::MaybeUninit<ma_gainer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_gainer>(),
        48usize,
        concat!("Size of: ", stringify!(ma_gainer))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_gainer>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_gainer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_gainer),
        "::",
        stringify!(config)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_gainer),
        "::",
        stringify!(t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pOldGains) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_gainer),
        "::",
        stringify!(pOldGains)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNewGains) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_gainer),
        "::",
        stringify!(pNewGains)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pHeap) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_gainer),
        "::",
        stringify!(_pHeap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ownsHeap) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_gainer),
        "::",
        stringify!(_ownsHeap)
        )
    );
}
extern "C" {
    pub fn ma_gainer_get_heap_size(
        pConfig: *const ma_gainer_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_gainer_init_preallocated(
        pConfig: *const ma_gainer_config,
        pHeap: *mut ::std::os::raw::c_void,
        pGainer: *mut ma_gainer,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_gainer_init(
        pConfig: *const ma_gainer_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pGainer: *mut ma_gainer,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_gainer_uninit(
        pGainer: *mut ma_gainer,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
extern "C" {
    pub fn ma_gainer_process_pcm_frames(
        pGainer: *mut ma_gainer,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_gainer_set_gain(pGainer: *mut ma_gainer, newGain: f32) -> ma_result;
}
extern "C" {
    pub fn ma_gainer_set_gains(pGainer: *mut ma_gainer, pNewGains: *mut f32) -> ma_result;
}
pub const ma_pan_mode_ma_pan_mode_balance: ma_pan_mode = 0;
pub const ma_pan_mode_ma_pan_mode_pan: ma_pan_mode = 1;
pub type ma_pan_mode = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_panner_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub mode: ma_pan_mode,
    pub pan: f32,
}
#[test]
fn bindgen_test_layout_ma_panner_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_panner_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_panner_config>(),
        16usize,
        concat!("Size of: ", stringify!(ma_panner_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_panner_config>(),
        4usize,
        concat!("Alignment of ", stringify!(ma_panner_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_panner_config),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_panner_config),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_panner_config),
        "::",
        stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pan) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_panner_config),
        "::",
        stringify!(pan)
        )
    );
}
extern "C" {
    pub fn ma_panner_config_init(format: ma_format, channels: ma_uint32) -> ma_panner_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_panner {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub mode: ma_pan_mode,
    pub pan: f32,
}
#[test]
fn bindgen_test_layout_ma_panner() {
    const UNINIT: ::std::mem::MaybeUninit<ma_panner> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_panner>(),
        16usize,
        concat!("Size of: ", stringify!(ma_panner))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_panner>(),
        4usize,
        concat!("Alignment of ", stringify!(ma_panner))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_panner),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_panner),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_panner),
        "::",
        stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pan) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_panner),
        "::",
        stringify!(pan)
        )
    );
}
extern "C" {
    pub fn ma_panner_init(pConfig: *const ma_panner_config, pPanner: *mut ma_panner) -> ma_result;
}
extern "C" {
    pub fn ma_panner_process_pcm_frames(
        pPanner: *mut ma_panner,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_panner_set_mode(pPanner: *mut ma_panner, mode: ma_pan_mode);
}
extern "C" {
    pub fn ma_panner_get_mode(pPanner: *const ma_panner) -> ma_pan_mode;
}
extern "C" {
    pub fn ma_panner_set_pan(pPanner: *mut ma_panner, pan: f32);
}
extern "C" {
    pub fn ma_panner_get_pan(pPanner: *const ma_panner) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_fader_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
}
#[test]
fn bindgen_test_layout_ma_fader_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_fader_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_fader_config>(),
        12usize,
        concat!("Size of: ", stringify!(ma_fader_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_fader_config>(),
        4usize,
        concat!("Alignment of ", stringify!(ma_fader_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_fader_config),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_fader_config),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_fader_config),
        "::",
        stringify!(sampleRate)
        )
    );
}
extern "C" {
    pub fn ma_fader_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
    ) -> ma_fader_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_fader {
    pub config: ma_fader_config,
    pub volumeBeg: f32,
    pub volumeEnd: f32,
    pub lengthInFrames: ma_uint64,
    pub cursorInFrames: ma_uint64,
}
#[test]
fn bindgen_test_layout_ma_fader() {
    const UNINIT: ::std::mem::MaybeUninit<ma_fader> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_fader>(),
        40usize,
        concat!("Size of: ", stringify!(ma_fader))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_fader>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_fader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_fader),
        "::",
        stringify!(config)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).volumeBeg) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_fader),
        "::",
        stringify!(volumeBeg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).volumeEnd) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_fader),
        "::",
        stringify!(volumeEnd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lengthInFrames) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_fader),
        "::",
        stringify!(lengthInFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cursorInFrames) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_fader),
        "::",
        stringify!(cursorInFrames)
        )
    );
}
extern "C" {
    pub fn ma_fader_init(pConfig: *const ma_fader_config, pFader: *mut ma_fader) -> ma_result;
}
extern "C" {
    pub fn ma_fader_process_pcm_frames(
        pFader: *mut ma_fader,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_fader_get_data_format(
        pFader: *const ma_fader,
        pFormat: *mut ma_format,
        pChannels: *mut ma_uint32,
        pSampleRate: *mut ma_uint32,
    );
}
extern "C" {
    pub fn ma_fader_set_fade(
        pFader: *mut ma_fader,
        volumeBeg: f32,
        volumeEnd: f32,
        lengthInFrames: ma_uint64,
    );
}
extern "C" {
    pub fn ma_fader_get_current_volume(pFader: *mut ma_fader) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_vec3f {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[test]
fn bindgen_test_layout_ma_vec3f() {
    const UNINIT: ::std::mem::MaybeUninit<ma_vec3f> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_vec3f>(),
        12usize,
        concat!("Size of: ", stringify!(ma_vec3f))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_vec3f>(),
        4usize,
        concat!("Alignment of ", stringify!(ma_vec3f))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_vec3f),
        "::",
        stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_vec3f),
        "::",
        stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_vec3f),
        "::",
        stringify!(z)
        )
    );
}
pub const ma_attenuation_model_ma_attenuation_model_none: ma_attenuation_model = 0;
pub const ma_attenuation_model_ma_attenuation_model_inverse: ma_attenuation_model = 1;
pub const ma_attenuation_model_ma_attenuation_model_linear: ma_attenuation_model = 2;
pub const ma_attenuation_model_ma_attenuation_model_exponential: ma_attenuation_model = 3;
pub type ma_attenuation_model = ::std::os::raw::c_int;
pub const ma_positioning_ma_positioning_absolute: ma_positioning = 0;
pub const ma_positioning_ma_positioning_relative: ma_positioning = 1;
pub type ma_positioning = ::std::os::raw::c_int;
pub const ma_handedness_ma_handedness_right: ma_handedness = 0;
pub const ma_handedness_ma_handedness_left: ma_handedness = 1;
pub type ma_handedness = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_spatializer_listener_config {
    pub channelsOut: ma_uint32,
    pub pChannelMapOut: *mut ma_channel,
    pub handedness: ma_handedness,
    pub coneInnerAngleInRadians: f32,
    pub coneOuterAngleInRadians: f32,
    pub coneOuterGain: f32,
    pub speedOfSound: f32,
    pub worldUp: ma_vec3f,
}
#[test]
fn bindgen_test_layout_ma_spatializer_listener_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_spatializer_listener_config> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_spatializer_listener_config>(),
        48usize,
        concat!("Size of: ", stringify!(ma_spatializer_listener_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_spatializer_listener_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_spatializer_listener_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelsOut) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_listener_config),
        "::",
        stringify!(channelsOut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pChannelMapOut) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_listener_config),
        "::",
        stringify!(pChannelMapOut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handedness) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_listener_config),
        "::",
        stringify!(handedness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coneInnerAngleInRadians) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_listener_config),
        "::",
        stringify!(coneInnerAngleInRadians)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coneOuterAngleInRadians) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_listener_config),
        "::",
        stringify!(coneOuterAngleInRadians)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coneOuterGain) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_listener_config),
        "::",
        stringify!(coneOuterGain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speedOfSound) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_listener_config),
        "::",
        stringify!(speedOfSound)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).worldUp) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_listener_config),
        "::",
        stringify!(worldUp)
        )
    );
}
extern "C" {
    pub fn ma_spatializer_listener_config_init(
        channelsOut: ma_uint32,
    ) -> ma_spatializer_listener_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_spatializer_listener {
    pub config: ma_spatializer_listener_config,
    pub position: ma_vec3f,
    pub direction: ma_vec3f,
    pub velocity: ma_vec3f,
    pub isEnabled: ma_bool32,
    pub _ownsHeap: ma_bool32,
    pub _pHeap: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ma_spatializer_listener() {
    const UNINIT: ::std::mem::MaybeUninit<ma_spatializer_listener> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_spatializer_listener>(),
        104usize,
        concat!("Size of: ", stringify!(ma_spatializer_listener))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_spatializer_listener>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_spatializer_listener))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_listener),
        "::",
        stringify!(config)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_listener),
        "::",
        stringify!(position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).direction) as usize - ptr as usize },
        60usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_listener),
        "::",
        stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).velocity) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_listener),
        "::",
        stringify!(velocity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isEnabled) as usize - ptr as usize },
        84usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_listener),
        "::",
        stringify!(isEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ownsHeap) as usize - ptr as usize },
        88usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_listener),
        "::",
        stringify!(_ownsHeap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pHeap) as usize - ptr as usize },
        96usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_listener),
        "::",
        stringify!(_pHeap)
        )
    );
}
extern "C" {
    pub fn ma_spatializer_listener_get_heap_size(
        pConfig: *const ma_spatializer_listener_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_spatializer_listener_init_preallocated(
        pConfig: *const ma_spatializer_listener_config,
        pHeap: *mut ::std::os::raw::c_void,
        pListener: *mut ma_spatializer_listener,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_spatializer_listener_init(
        pConfig: *const ma_spatializer_listener_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pListener: *mut ma_spatializer_listener,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_spatializer_listener_uninit(
        pListener: *mut ma_spatializer_listener,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
extern "C" {
    pub fn ma_spatializer_listener_get_channel_map(
        pListener: *mut ma_spatializer_listener,
    ) -> *mut ma_channel;
}
extern "C" {
    pub fn ma_spatializer_listener_set_cone(
        pListener: *mut ma_spatializer_listener,
        innerAngleInRadians: f32,
        outerAngleInRadians: f32,
        outerGain: f32,
    );
}
extern "C" {
    pub fn ma_spatializer_listener_get_cone(
        pListener: *const ma_spatializer_listener,
        pInnerAngleInRadians: *mut f32,
        pOuterAngleInRadians: *mut f32,
        pOuterGain: *mut f32,
    );
}
extern "C" {
    pub fn ma_spatializer_listener_set_position(
        pListener: *mut ma_spatializer_listener,
        x: f32,
        y: f32,
        z: f32,
    );
}
extern "C" {
    pub fn ma_spatializer_listener_get_position(
        pListener: *const ma_spatializer_listener,
    ) -> ma_vec3f;
}
extern "C" {
    pub fn ma_spatializer_listener_set_direction(
        pListener: *mut ma_spatializer_listener,
        x: f32,
        y: f32,
        z: f32,
    );
}
extern "C" {
    pub fn ma_spatializer_listener_get_direction(
        pListener: *const ma_spatializer_listener,
    ) -> ma_vec3f;
}
extern "C" {
    pub fn ma_spatializer_listener_set_velocity(
        pListener: *mut ma_spatializer_listener,
        x: f32,
        y: f32,
        z: f32,
    );
}
extern "C" {
    pub fn ma_spatializer_listener_get_velocity(
        pListener: *const ma_spatializer_listener,
    ) -> ma_vec3f;
}
extern "C" {
    pub fn ma_spatializer_listener_set_speed_of_sound(
        pListener: *mut ma_spatializer_listener,
        speedOfSound: f32,
    );
}
extern "C" {
    pub fn ma_spatializer_listener_get_speed_of_sound(
        pListener: *const ma_spatializer_listener,
    ) -> f32;
}
extern "C" {
    pub fn ma_spatializer_listener_set_world_up(
        pListener: *mut ma_spatializer_listener,
        x: f32,
        y: f32,
        z: f32,
    );
}
extern "C" {
    pub fn ma_spatializer_listener_get_world_up(
        pListener: *const ma_spatializer_listener,
    ) -> ma_vec3f;
}
extern "C" {
    pub fn ma_spatializer_listener_set_enabled(
        pListener: *mut ma_spatializer_listener,
        isEnabled: ma_bool32,
    );
}
extern "C" {
    pub fn ma_spatializer_listener_is_enabled(
        pListener: *const ma_spatializer_listener,
    ) -> ma_bool32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_spatializer_config {
    pub channelsIn: ma_uint32,
    pub channelsOut: ma_uint32,
    pub pChannelMapIn: *mut ma_channel,
    pub attenuationModel: ma_attenuation_model,
    pub positioning: ma_positioning,
    pub handedness: ma_handedness,
    pub minGain: f32,
    pub maxGain: f32,
    pub minDistance: f32,
    pub maxDistance: f32,
    pub rolloff: f32,
    pub coneInnerAngleInRadians: f32,
    pub coneOuterAngleInRadians: f32,
    pub coneOuterGain: f32,
    pub dopplerFactor: f32,
    pub directionalAttenuationFactor: f32,
    pub gainSmoothTimeInFrames: ma_uint32,
}
#[test]
fn bindgen_test_layout_ma_spatializer_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_spatializer_config> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_spatializer_config>(),
        72usize,
        concat!("Size of: ", stringify!(ma_spatializer_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_spatializer_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_spatializer_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelsIn) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_config),
        "::",
        stringify!(channelsIn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelsOut) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_config),
        "::",
        stringify!(channelsOut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pChannelMapIn) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_config),
        "::",
        stringify!(pChannelMapIn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attenuationModel) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_config),
        "::",
        stringify!(attenuationModel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).positioning) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_config),
        "::",
        stringify!(positioning)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handedness) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_config),
        "::",
        stringify!(handedness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minGain) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_config),
        "::",
        stringify!(minGain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxGain) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_config),
        "::",
        stringify!(maxGain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minDistance) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_config),
        "::",
        stringify!(minDistance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxDistance) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_config),
        "::",
        stringify!(maxDistance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rolloff) as usize - ptr as usize },
        44usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_config),
        "::",
        stringify!(rolloff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coneInnerAngleInRadians) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_config),
        "::",
        stringify!(coneInnerAngleInRadians)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coneOuterAngleInRadians) as usize - ptr as usize },
        52usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_config),
        "::",
        stringify!(coneOuterAngleInRadians)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coneOuterGain) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_config),
        "::",
        stringify!(coneOuterGain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dopplerFactor) as usize - ptr as usize },
        60usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_config),
        "::",
        stringify!(dopplerFactor)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).directionalAttenuationFactor) as usize - ptr as usize
        },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_config),
        "::",
        stringify!(directionalAttenuationFactor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gainSmoothTimeInFrames) as usize - ptr as usize },
        68usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer_config),
        "::",
        stringify!(gainSmoothTimeInFrames)
        )
    );
}
extern "C" {
    pub fn ma_spatializer_config_init(
        channelsIn: ma_uint32,
        channelsOut: ma_uint32,
    ) -> ma_spatializer_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_spatializer {
    pub channelsIn: ma_uint32,
    pub channelsOut: ma_uint32,
    pub pChannelMapIn: *mut ma_channel,
    pub attenuationModel: ma_attenuation_model,
    pub positioning: ma_positioning,
    pub handedness: ma_handedness,
    pub minGain: f32,
    pub maxGain: f32,
    pub minDistance: f32,
    pub maxDistance: f32,
    pub rolloff: f32,
    pub coneInnerAngleInRadians: f32,
    pub coneOuterAngleInRadians: f32,
    pub coneOuterGain: f32,
    pub dopplerFactor: f32,
    pub directionalAttenuationFactor: f32,
    pub gainSmoothTimeInFrames: ma_uint32,
    pub position: ma_vec3f,
    pub direction: ma_vec3f,
    pub velocity: ma_vec3f,
    pub dopplerPitch: f32,
    pub gainer: ma_gainer,
    pub pNewChannelGainsOut: *mut f32,
    pub _pHeap: *mut ::std::os::raw::c_void,
    pub _ownsHeap: ma_bool32,
}
#[test]
fn bindgen_test_layout_ma_spatializer() {
    const UNINIT: ::std::mem::MaybeUninit<ma_spatializer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_spatializer>(),
        184usize,
        concat!("Size of: ", stringify!(ma_spatializer))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_spatializer>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_spatializer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelsIn) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer),
        "::",
        stringify!(channelsIn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelsOut) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer),
        "::",
        stringify!(channelsOut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pChannelMapIn) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer),
        "::",
        stringify!(pChannelMapIn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attenuationModel) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer),
        "::",
        stringify!(attenuationModel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).positioning) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer),
        "::",
        stringify!(positioning)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handedness) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer),
        "::",
        stringify!(handedness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minGain) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer),
        "::",
        stringify!(minGain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxGain) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer),
        "::",
        stringify!(maxGain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minDistance) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer),
        "::",
        stringify!(minDistance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxDistance) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer),
        "::",
        stringify!(maxDistance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rolloff) as usize - ptr as usize },
        44usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer),
        "::",
        stringify!(rolloff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coneInnerAngleInRadians) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer),
        "::",
        stringify!(coneInnerAngleInRadians)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coneOuterAngleInRadians) as usize - ptr as usize },
        52usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer),
        "::",
        stringify!(coneOuterAngleInRadians)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coneOuterGain) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer),
        "::",
        stringify!(coneOuterGain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dopplerFactor) as usize - ptr as usize },
        60usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer),
        "::",
        stringify!(dopplerFactor)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).directionalAttenuationFactor) as usize - ptr as usize
        },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer),
        "::",
        stringify!(directionalAttenuationFactor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gainSmoothTimeInFrames) as usize - ptr as usize },
        68usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer),
        "::",
        stringify!(gainSmoothTimeInFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer),
        "::",
        stringify!(position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).direction) as usize - ptr as usize },
        84usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer),
        "::",
        stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).velocity) as usize - ptr as usize },
        96usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer),
        "::",
        stringify!(velocity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dopplerPitch) as usize - ptr as usize },
        108usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer),
        "::",
        stringify!(dopplerPitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gainer) as usize - ptr as usize },
        112usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer),
        "::",
        stringify!(gainer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNewChannelGainsOut) as usize - ptr as usize },
        160usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer),
        "::",
        stringify!(pNewChannelGainsOut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pHeap) as usize - ptr as usize },
        168usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer),
        "::",
        stringify!(_pHeap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ownsHeap) as usize - ptr as usize },
        176usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_spatializer),
        "::",
        stringify!(_ownsHeap)
        )
    );
}
extern "C" {
    pub fn ma_spatializer_get_heap_size(
        pConfig: *const ma_spatializer_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_spatializer_init_preallocated(
        pConfig: *const ma_spatializer_config,
        pHeap: *mut ::std::os::raw::c_void,
        pSpatializer: *mut ma_spatializer,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_spatializer_init(
        pConfig: *const ma_spatializer_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pSpatializer: *mut ma_spatializer,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_spatializer_uninit(
        pSpatializer: *mut ma_spatializer,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
extern "C" {
    pub fn ma_spatializer_process_pcm_frames(
        pSpatializer: *mut ma_spatializer,
        pListener: *mut ma_spatializer_listener,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_spatializer_get_input_channels(pSpatializer: *const ma_spatializer) -> ma_uint32;
}
extern "C" {
    pub fn ma_spatializer_get_output_channels(pSpatializer: *const ma_spatializer) -> ma_uint32;
}
extern "C" {
    pub fn ma_spatializer_set_attenuation_model(
        pSpatializer: *mut ma_spatializer,
        attenuationModel: ma_attenuation_model,
    );
}
extern "C" {
    pub fn ma_spatializer_get_attenuation_model(
        pSpatializer: *const ma_spatializer,
    ) -> ma_attenuation_model;
}
extern "C" {
    pub fn ma_spatializer_set_positioning(
        pSpatializer: *mut ma_spatializer,
        positioning: ma_positioning,
    );
}
extern "C" {
    pub fn ma_spatializer_get_positioning(pSpatializer: *const ma_spatializer) -> ma_positioning;
}
extern "C" {
    pub fn ma_spatializer_set_rolloff(pSpatializer: *mut ma_spatializer, rolloff: f32);
}
extern "C" {
    pub fn ma_spatializer_get_rolloff(pSpatializer: *const ma_spatializer) -> f32;
}
extern "C" {
    pub fn ma_spatializer_set_min_gain(pSpatializer: *mut ma_spatializer, minGain: f32);
}
extern "C" {
    pub fn ma_spatializer_get_min_gain(pSpatializer: *const ma_spatializer) -> f32;
}
extern "C" {
    pub fn ma_spatializer_set_max_gain(pSpatializer: *mut ma_spatializer, maxGain: f32);
}
extern "C" {
    pub fn ma_spatializer_get_max_gain(pSpatializer: *const ma_spatializer) -> f32;
}
extern "C" {
    pub fn ma_spatializer_set_min_distance(pSpatializer: *mut ma_spatializer, minDistance: f32);
}
extern "C" {
    pub fn ma_spatializer_get_min_distance(pSpatializer: *const ma_spatializer) -> f32;
}
extern "C" {
    pub fn ma_spatializer_set_max_distance(pSpatializer: *mut ma_spatializer, maxDistance: f32);
}
extern "C" {
    pub fn ma_spatializer_get_max_distance(pSpatializer: *const ma_spatializer) -> f32;
}
extern "C" {
    pub fn ma_spatializer_set_cone(
        pSpatializer: *mut ma_spatializer,
        innerAngleInRadians: f32,
        outerAngleInRadians: f32,
        outerGain: f32,
    );
}
extern "C" {
    pub fn ma_spatializer_get_cone(
        pSpatializer: *const ma_spatializer,
        pInnerAngleInRadians: *mut f32,
        pOuterAngleInRadians: *mut f32,
        pOuterGain: *mut f32,
    );
}
extern "C" {
    pub fn ma_spatializer_set_doppler_factor(pSpatializer: *mut ma_spatializer, dopplerFactor: f32);
}
extern "C" {
    pub fn ma_spatializer_get_doppler_factor(pSpatializer: *const ma_spatializer) -> f32;
}
extern "C" {
    pub fn ma_spatializer_set_directional_attenuation_factor(
        pSpatializer: *mut ma_spatializer,
        directionalAttenuationFactor: f32,
    );
}
extern "C" {
    pub fn ma_spatializer_get_directional_attenuation_factor(
        pSpatializer: *const ma_spatializer,
    ) -> f32;
}
extern "C" {
    pub fn ma_spatializer_set_position(pSpatializer: *mut ma_spatializer, x: f32, y: f32, z: f32);
}
extern "C" {
    pub fn ma_spatializer_get_position(pSpatializer: *const ma_spatializer) -> ma_vec3f;
}
extern "C" {
    pub fn ma_spatializer_set_direction(pSpatializer: *mut ma_spatializer, x: f32, y: f32, z: f32);
}
extern "C" {
    pub fn ma_spatializer_get_direction(pSpatializer: *const ma_spatializer) -> ma_vec3f;
}
extern "C" {
    pub fn ma_spatializer_set_velocity(pSpatializer: *mut ma_spatializer, x: f32, y: f32, z: f32);
}
extern "C" {
    pub fn ma_spatializer_get_velocity(pSpatializer: *const ma_spatializer) -> ma_vec3f;
}
extern "C" {
    pub fn ma_spatializer_get_relative_position_and_direction(
        pSpatializer: *const ma_spatializer,
        pListener: *const ma_spatializer_listener,
        pRelativePos: *mut ma_vec3f,
        pRelativeDir: *mut ma_vec3f,
    );
}
#[doc = "Resampling"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_linear_resampler_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRateIn: ma_uint32,
    pub sampleRateOut: ma_uint32,
    pub lpfOrder: ma_uint32,
    pub lpfNyquistFactor: f64,
}
#[test]
fn bindgen_test_layout_ma_linear_resampler_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_linear_resampler_config> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_linear_resampler_config>(),
        32usize,
        concat!("Size of: ", stringify!(ma_linear_resampler_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_linear_resampler_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_linear_resampler_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_linear_resampler_config),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_linear_resampler_config),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRateIn) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_linear_resampler_config),
        "::",
        stringify!(sampleRateIn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRateOut) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_linear_resampler_config),
        "::",
        stringify!(sampleRateOut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lpfOrder) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_linear_resampler_config),
        "::",
        stringify!(lpfOrder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lpfNyquistFactor) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_linear_resampler_config),
        "::",
        stringify!(lpfNyquistFactor)
        )
    );
}
extern "C" {
    pub fn ma_linear_resampler_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRateIn: ma_uint32,
        sampleRateOut: ma_uint32,
    ) -> ma_linear_resampler_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_linear_resampler {
    pub config: ma_linear_resampler_config,
    pub inAdvanceInt: ma_uint32,
    pub inAdvanceFrac: ma_uint32,
    pub inTimeInt: ma_uint32,
    pub inTimeFrac: ma_uint32,
    pub x0: ma_linear_resampler__bindgen_ty_1,
    pub x1: ma_linear_resampler__bindgen_ty_2,
    pub lpf: ma_lpf,
    pub _pHeap: *mut ::std::os::raw::c_void,
    pub _ownsHeap: ma_bool32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_linear_resampler__bindgen_ty_1 {
    pub f32_: *mut f32,
    pub s16: *mut ma_int16,
}
#[test]
fn bindgen_test_layout_ma_linear_resampler__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_linear_resampler__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_linear_resampler__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(ma_linear_resampler__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_linear_resampler__bindgen_ty_1>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_linear_resampler__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f32_) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_linear_resampler__bindgen_ty_1),
        "::",
        stringify!(f32_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s16) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_linear_resampler__bindgen_ty_1),
        "::",
        stringify!(s16)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_linear_resampler__bindgen_ty_2 {
    pub f32_: *mut f32,
    pub s16: *mut ma_int16,
}
#[test]
fn bindgen_test_layout_ma_linear_resampler__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<ma_linear_resampler__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_linear_resampler__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(ma_linear_resampler__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_linear_resampler__bindgen_ty_2>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_linear_resampler__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f32_) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_linear_resampler__bindgen_ty_2),
        "::",
        stringify!(f32_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s16) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_linear_resampler__bindgen_ty_2),
        "::",
        stringify!(s16)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_linear_resampler() {
    const UNINIT: ::std::mem::MaybeUninit<ma_linear_resampler> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_linear_resampler>(),
        136usize,
        concat!("Size of: ", stringify!(ma_linear_resampler))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_linear_resampler>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_linear_resampler))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_linear_resampler),
        "::",
        stringify!(config)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inAdvanceInt) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_linear_resampler),
        "::",
        stringify!(inAdvanceInt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inAdvanceFrac) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_linear_resampler),
        "::",
        stringify!(inAdvanceFrac)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inTimeInt) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_linear_resampler),
        "::",
        stringify!(inTimeInt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inTimeFrac) as usize - ptr as usize },
        44usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_linear_resampler),
        "::",
        stringify!(inTimeFrac)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x0) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_linear_resampler),
        "::",
        stringify!(x0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x1) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_linear_resampler),
        "::",
        stringify!(x1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lpf) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_linear_resampler),
        "::",
        stringify!(lpf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pHeap) as usize - ptr as usize },
        120usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_linear_resampler),
        "::",
        stringify!(_pHeap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ownsHeap) as usize - ptr as usize },
        128usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_linear_resampler),
        "::",
        stringify!(_ownsHeap)
        )
    );
}
extern "C" {
    pub fn ma_linear_resampler_get_heap_size(
        pConfig: *const ma_linear_resampler_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_linear_resampler_init_preallocated(
        pConfig: *const ma_linear_resampler_config,
        pHeap: *mut ::std::os::raw::c_void,
        pResampler: *mut ma_linear_resampler,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_linear_resampler_init(
        pConfig: *const ma_linear_resampler_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pResampler: *mut ma_linear_resampler,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_linear_resampler_uninit(
        pResampler: *mut ma_linear_resampler,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
extern "C" {
    pub fn ma_linear_resampler_process_pcm_frames(
        pResampler: *mut ma_linear_resampler,
        pFramesIn: *const ::std::os::raw::c_void,
        pFrameCountIn: *mut ma_uint64,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFrameCountOut: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_linear_resampler_set_rate(
        pResampler: *mut ma_linear_resampler,
        sampleRateIn: ma_uint32,
        sampleRateOut: ma_uint32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_linear_resampler_set_rate_ratio(
        pResampler: *mut ma_linear_resampler,
        ratioInOut: f32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_linear_resampler_get_input_latency(
        pResampler: *const ma_linear_resampler,
    ) -> ma_uint64;
}
extern "C" {
    pub fn ma_linear_resampler_get_output_latency(
        pResampler: *const ma_linear_resampler,
    ) -> ma_uint64;
}
extern "C" {
    pub fn ma_linear_resampler_get_required_input_frame_count(
        pResampler: *const ma_linear_resampler,
        outputFrameCount: ma_uint64,
        pInputFrameCount: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_linear_resampler_get_expected_output_frame_count(
        pResampler: *const ma_linear_resampler,
        inputFrameCount: ma_uint64,
        pOutputFrameCount: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_linear_resampler_reset(pResampler: *mut ma_linear_resampler) -> ma_result;
}
pub type ma_resampling_backend = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_resampling_backend_vtable {
    pub onGetHeapSize: ::std::option::Option<
        unsafe extern "C" fn(
            pUserData: *mut ::std::os::raw::c_void,
            pConfig: *const ma_resampler_config,
            pHeapSizeInBytes: *mut usize,
        ) -> ma_result,
    >,
    pub onInit: ::std::option::Option<
        unsafe extern "C" fn(
            pUserData: *mut ::std::os::raw::c_void,
            pConfig: *const ma_resampler_config,
            pHeap: *mut ::std::os::raw::c_void,
            ppBackend: *mut *mut ma_resampling_backend,
        ) -> ma_result,
    >,
    pub onUninit: ::std::option::Option<
        unsafe extern "C" fn(
            pUserData: *mut ::std::os::raw::c_void,
            pBackend: *mut ma_resampling_backend,
            pAllocationCallbacks: *const ma_allocation_callbacks,
        ),
    >,
    pub onProcess: ::std::option::Option<
        unsafe extern "C" fn(
            pUserData: *mut ::std::os::raw::c_void,
            pBackend: *mut ma_resampling_backend,
            pFramesIn: *const ::std::os::raw::c_void,
            pFrameCountIn: *mut ma_uint64,
            pFramesOut: *mut ::std::os::raw::c_void,
            pFrameCountOut: *mut ma_uint64,
        ) -> ma_result,
    >,
    pub onSetRate: ::std::option::Option<
        unsafe extern "C" fn(
            pUserData: *mut ::std::os::raw::c_void,
            pBackend: *mut ma_resampling_backend,
            sampleRateIn: ma_uint32,
            sampleRateOut: ma_uint32,
        ) -> ma_result,
    >,
    pub onGetInputLatency: ::std::option::Option<
        unsafe extern "C" fn(
            pUserData: *mut ::std::os::raw::c_void,
            pBackend: *const ma_resampling_backend,
        ) -> ma_uint64,
    >,
    pub onGetOutputLatency: ::std::option::Option<
        unsafe extern "C" fn(
            pUserData: *mut ::std::os::raw::c_void,
            pBackend: *const ma_resampling_backend,
        ) -> ma_uint64,
    >,
    pub onGetRequiredInputFrameCount: ::std::option::Option<
        unsafe extern "C" fn(
            pUserData: *mut ::std::os::raw::c_void,
            pBackend: *const ma_resampling_backend,
            outputFrameCount: ma_uint64,
            pInputFrameCount: *mut ma_uint64,
        ) -> ma_result,
    >,
    pub onGetExpectedOutputFrameCount: ::std::option::Option<
        unsafe extern "C" fn(
            pUserData: *mut ::std::os::raw::c_void,
            pBackend: *const ma_resampling_backend,
            inputFrameCount: ma_uint64,
            pOutputFrameCount: *mut ma_uint64,
        ) -> ma_result,
    >,
    pub onReset: ::std::option::Option<
        unsafe extern "C" fn(
            pUserData: *mut ::std::os::raw::c_void,
            pBackend: *mut ma_resampling_backend,
        ) -> ma_result,
    >,
}
#[test]
fn bindgen_test_layout_ma_resampling_backend_vtable() {
    const UNINIT: ::std::mem::MaybeUninit<ma_resampling_backend_vtable> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_resampling_backend_vtable>(),
        80usize,
        concat!("Size of: ", stringify!(ma_resampling_backend_vtable))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_resampling_backend_vtable>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_resampling_backend_vtable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onGetHeapSize) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resampling_backend_vtable),
        "::",
        stringify!(onGetHeapSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onInit) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resampling_backend_vtable),
        "::",
        stringify!(onInit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onUninit) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resampling_backend_vtable),
        "::",
        stringify!(onUninit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onProcess) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resampling_backend_vtable),
        "::",
        stringify!(onProcess)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onSetRate) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resampling_backend_vtable),
        "::",
        stringify!(onSetRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onGetInputLatency) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resampling_backend_vtable),
        "::",
        stringify!(onGetInputLatency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onGetOutputLatency) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resampling_backend_vtable),
        "::",
        stringify!(onGetOutputLatency)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).onGetRequiredInputFrameCount) as usize - ptr as usize
        },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resampling_backend_vtable),
        "::",
        stringify!(onGetRequiredInputFrameCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).onGetExpectedOutputFrameCount) as usize - ptr as usize
        },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resampling_backend_vtable),
        "::",
        stringify!(onGetExpectedOutputFrameCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onReset) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resampling_backend_vtable),
        "::",
        stringify!(onReset)
        )
    );
}
pub const ma_resample_algorithm_ma_resample_algorithm_linear: ma_resample_algorithm = 0;
pub const ma_resample_algorithm_ma_resample_algorithm_custom: ma_resample_algorithm = 1;
pub type ma_resample_algorithm = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_resampler_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRateIn: ma_uint32,
    pub sampleRateOut: ma_uint32,
    pub algorithm: ma_resample_algorithm,
    pub pBackendVTable: *mut ma_resampling_backend_vtable,
    pub pBackendUserData: *mut ::std::os::raw::c_void,
    pub linear: ma_resampler_config__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_resampler_config__bindgen_ty_1 {
    pub lpfOrder: ma_uint32,
}
#[test]
fn bindgen_test_layout_ma_resampler_config__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_resampler_config__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_resampler_config__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(ma_resampler_config__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_resampler_config__bindgen_ty_1>(),
        4usize,
        concat!(
        "Alignment of ",
        stringify!(ma_resampler_config__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lpfOrder) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resampler_config__bindgen_ty_1),
        "::",
        stringify!(lpfOrder)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_resampler_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_resampler_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_resampler_config>(),
        48usize,
        concat!("Size of: ", stringify!(ma_resampler_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_resampler_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_resampler_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resampler_config),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resampler_config),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRateIn) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resampler_config),
        "::",
        stringify!(sampleRateIn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRateOut) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resampler_config),
        "::",
        stringify!(sampleRateOut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).algorithm) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resampler_config),
        "::",
        stringify!(algorithm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pBackendVTable) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resampler_config),
        "::",
        stringify!(pBackendVTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pBackendUserData) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resampler_config),
        "::",
        stringify!(pBackendUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linear) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resampler_config),
        "::",
        stringify!(linear)
        )
    );
}
extern "C" {
    pub fn ma_resampler_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRateIn: ma_uint32,
        sampleRateOut: ma_uint32,
        algorithm: ma_resample_algorithm,
    ) -> ma_resampler_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_resampler {
    pub pBackend: *mut ma_resampling_backend,
    pub pBackendVTable: *mut ma_resampling_backend_vtable,
    pub pBackendUserData: *mut ::std::os::raw::c_void,
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRateIn: ma_uint32,
    pub sampleRateOut: ma_uint32,
    pub state: ma_resampler__bindgen_ty_1,
    pub _pHeap: *mut ::std::os::raw::c_void,
    pub _ownsHeap: ma_bool32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_resampler__bindgen_ty_1 {
    pub linear: ma_linear_resampler,
}
#[test]
fn bindgen_test_layout_ma_resampler__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_resampler__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_resampler__bindgen_ty_1>(),
        136usize,
        concat!("Size of: ", stringify!(ma_resampler__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_resampler__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_resampler__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linear) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resampler__bindgen_ty_1),
        "::",
        stringify!(linear)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_resampler() {
    const UNINIT: ::std::mem::MaybeUninit<ma_resampler> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_resampler>(),
        192usize,
        concat!("Size of: ", stringify!(ma_resampler))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_resampler>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_resampler))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pBackend) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resampler),
        "::",
        stringify!(pBackend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pBackendVTable) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resampler),
        "::",
        stringify!(pBackendVTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pBackendUserData) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resampler),
        "::",
        stringify!(pBackendUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resampler),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resampler),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRateIn) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resampler),
        "::",
        stringify!(sampleRateIn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRateOut) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resampler),
        "::",
        stringify!(sampleRateOut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resampler),
        "::",
        stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pHeap) as usize - ptr as usize },
        176usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resampler),
        "::",
        stringify!(_pHeap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ownsHeap) as usize - ptr as usize },
        184usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resampler),
        "::",
        stringify!(_ownsHeap)
        )
    );
}
extern "C" {
    pub fn ma_resampler_get_heap_size(
        pConfig: *const ma_resampler_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resampler_init_preallocated(
        pConfig: *const ma_resampler_config,
        pHeap: *mut ::std::os::raw::c_void,
        pResampler: *mut ma_resampler,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resampler_init(
        pConfig: *const ma_resampler_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pResampler: *mut ma_resampler,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resampler_uninit(
        pResampler: *mut ma_resampler,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
extern "C" {
    pub fn ma_resampler_process_pcm_frames(
        pResampler: *mut ma_resampler,
        pFramesIn: *const ::std::os::raw::c_void,
        pFrameCountIn: *mut ma_uint64,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFrameCountOut: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resampler_set_rate(
        pResampler: *mut ma_resampler,
        sampleRateIn: ma_uint32,
        sampleRateOut: ma_uint32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resampler_set_rate_ratio(pResampler: *mut ma_resampler, ratio: f32) -> ma_result;
}
extern "C" {
    pub fn ma_resampler_get_input_latency(pResampler: *const ma_resampler) -> ma_uint64;
}
extern "C" {
    pub fn ma_resampler_get_output_latency(pResampler: *const ma_resampler) -> ma_uint64;
}
extern "C" {
    pub fn ma_resampler_get_required_input_frame_count(
        pResampler: *const ma_resampler,
        outputFrameCount: ma_uint64,
        pInputFrameCount: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resampler_get_expected_output_frame_count(
        pResampler: *const ma_resampler,
        inputFrameCount: ma_uint64,
        pOutputFrameCount: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resampler_reset(pResampler: *mut ma_resampler) -> ma_result;
}
pub const ma_channel_conversion_path_ma_channel_conversion_path_unknown:
ma_channel_conversion_path = 0;
pub const ma_channel_conversion_path_ma_channel_conversion_path_passthrough:
ma_channel_conversion_path = 1;
pub const ma_channel_conversion_path_ma_channel_conversion_path_mono_out:
ma_channel_conversion_path = 2;
pub const ma_channel_conversion_path_ma_channel_conversion_path_mono_in:
ma_channel_conversion_path = 3;
pub const ma_channel_conversion_path_ma_channel_conversion_path_shuffle:
ma_channel_conversion_path = 4;
pub const ma_channel_conversion_path_ma_channel_conversion_path_weights:
ma_channel_conversion_path = 5;
#[doc = "Channel Conversion"]
pub type ma_channel_conversion_path = ::std::os::raw::c_int;
pub const ma_mono_expansion_mode_ma_mono_expansion_mode_duplicate: ma_mono_expansion_mode = 0;
pub const ma_mono_expansion_mode_ma_mono_expansion_mode_average: ma_mono_expansion_mode = 1;
pub const ma_mono_expansion_mode_ma_mono_expansion_mode_stereo_only: ma_mono_expansion_mode = 2;
pub const ma_mono_expansion_mode_ma_mono_expansion_mode_default: ma_mono_expansion_mode = 0;
pub type ma_mono_expansion_mode = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_channel_converter_config {
    pub format: ma_format,
    pub channelsIn: ma_uint32,
    pub channelsOut: ma_uint32,
    pub pChannelMapIn: *const ma_channel,
    pub pChannelMapOut: *const ma_channel,
    pub mixingMode: ma_channel_mix_mode,
    pub calculateLFEFromSpatialChannels: ma_bool32,
    pub ppWeights: *mut *mut f32,
}
#[test]
fn bindgen_test_layout_ma_channel_converter_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_channel_converter_config> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_channel_converter_config>(),
        48usize,
        concat!("Size of: ", stringify!(ma_channel_converter_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_channel_converter_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_channel_converter_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_channel_converter_config),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelsIn) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_channel_converter_config),
        "::",
        stringify!(channelsIn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelsOut) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_channel_converter_config),
        "::",
        stringify!(channelsOut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pChannelMapIn) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_channel_converter_config),
        "::",
        stringify!(pChannelMapIn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pChannelMapOut) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_channel_converter_config),
        "::",
        stringify!(pChannelMapOut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mixingMode) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_channel_converter_config),
        "::",
        stringify!(mixingMode)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).calculateLFEFromSpatialChannels) as usize - ptr as usize
        },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_channel_converter_config),
        "::",
        stringify!(calculateLFEFromSpatialChannels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppWeights) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_channel_converter_config),
        "::",
        stringify!(ppWeights)
        )
    );
}
extern "C" {
    pub fn ma_channel_converter_config_init(
        format: ma_format,
        channelsIn: ma_uint32,
        pChannelMapIn: *const ma_channel,
        channelsOut: ma_uint32,
        pChannelMapOut: *const ma_channel,
        mixingMode: ma_channel_mix_mode,
    ) -> ma_channel_converter_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_channel_converter {
    pub format: ma_format,
    pub channelsIn: ma_uint32,
    pub channelsOut: ma_uint32,
    pub mixingMode: ma_channel_mix_mode,
    pub conversionPath: ma_channel_conversion_path,
    pub pChannelMapIn: *mut ma_channel,
    pub pChannelMapOut: *mut ma_channel,
    pub pShuffleTable: *mut ma_uint8,
    pub weights: ma_channel_converter__bindgen_ty_1,
    pub _pHeap: *mut ::std::os::raw::c_void,
    pub _ownsHeap: ma_bool32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_channel_converter__bindgen_ty_1 {
    pub f32_: *mut *mut f32,
    pub s16: *mut *mut ma_int32,
}
#[test]
fn bindgen_test_layout_ma_channel_converter__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_channel_converter__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_channel_converter__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(ma_channel_converter__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_channel_converter__bindgen_ty_1>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_channel_converter__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f32_) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_channel_converter__bindgen_ty_1),
        "::",
        stringify!(f32_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s16) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_channel_converter__bindgen_ty_1),
        "::",
        stringify!(s16)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_channel_converter() {
    const UNINIT: ::std::mem::MaybeUninit<ma_channel_converter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_channel_converter>(),
        72usize,
        concat!("Size of: ", stringify!(ma_channel_converter))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_channel_converter>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_channel_converter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_channel_converter),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelsIn) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_channel_converter),
        "::",
        stringify!(channelsIn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelsOut) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_channel_converter),
        "::",
        stringify!(channelsOut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mixingMode) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_channel_converter),
        "::",
        stringify!(mixingMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conversionPath) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_channel_converter),
        "::",
        stringify!(conversionPath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pChannelMapIn) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_channel_converter),
        "::",
        stringify!(pChannelMapIn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pChannelMapOut) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_channel_converter),
        "::",
        stringify!(pChannelMapOut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pShuffleTable) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_channel_converter),
        "::",
        stringify!(pShuffleTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weights) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_channel_converter),
        "::",
        stringify!(weights)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pHeap) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_channel_converter),
        "::",
        stringify!(_pHeap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ownsHeap) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_channel_converter),
        "::",
        stringify!(_ownsHeap)
        )
    );
}
extern "C" {
    pub fn ma_channel_converter_get_heap_size(
        pConfig: *const ma_channel_converter_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_channel_converter_init_preallocated(
        pConfig: *const ma_channel_converter_config,
        pHeap: *mut ::std::os::raw::c_void,
        pConverter: *mut ma_channel_converter,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_channel_converter_init(
        pConfig: *const ma_channel_converter_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pConverter: *mut ma_channel_converter,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_channel_converter_uninit(
        pConverter: *mut ma_channel_converter,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
extern "C" {
    pub fn ma_channel_converter_process_pcm_frames(
        pConverter: *mut ma_channel_converter,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_channel_converter_get_input_channel_map(
        pConverter: *const ma_channel_converter,
        pChannelMap: *mut ma_channel,
        channelMapCap: usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_channel_converter_get_output_channel_map(
        pConverter: *const ma_channel_converter,
        pChannelMap: *mut ma_channel,
        channelMapCap: usize,
    ) -> ma_result;
}
#[doc = "Data Conversion"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_data_converter_config {
    pub formatIn: ma_format,
    pub formatOut: ma_format,
    pub channelsIn: ma_uint32,
    pub channelsOut: ma_uint32,
    pub sampleRateIn: ma_uint32,
    pub sampleRateOut: ma_uint32,
    pub pChannelMapIn: *mut ma_channel,
    pub pChannelMapOut: *mut ma_channel,
    pub ditherMode: ma_dither_mode,
    pub channelMixMode: ma_channel_mix_mode,
    pub calculateLFEFromSpatialChannels: ma_bool32,
    pub ppChannelWeights: *mut *mut f32,
    pub allowDynamicSampleRate: ma_bool32,
    pub resampling: ma_resampler_config,
}
#[test]
fn bindgen_test_layout_ma_data_converter_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_data_converter_config> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_data_converter_config>(),
        120usize,
        concat!("Size of: ", stringify!(ma_data_converter_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_data_converter_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_data_converter_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).formatIn) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_converter_config),
        "::",
        stringify!(formatIn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).formatOut) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_converter_config),
        "::",
        stringify!(formatOut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelsIn) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_converter_config),
        "::",
        stringify!(channelsIn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelsOut) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_converter_config),
        "::",
        stringify!(channelsOut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRateIn) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_converter_config),
        "::",
        stringify!(sampleRateIn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRateOut) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_converter_config),
        "::",
        stringify!(sampleRateOut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pChannelMapIn) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_converter_config),
        "::",
        stringify!(pChannelMapIn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pChannelMapOut) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_converter_config),
        "::",
        stringify!(pChannelMapOut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ditherMode) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_converter_config),
        "::",
        stringify!(ditherMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelMixMode) as usize - ptr as usize },
        44usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_converter_config),
        "::",
        stringify!(channelMixMode)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).calculateLFEFromSpatialChannels) as usize - ptr as usize
        },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_converter_config),
        "::",
        stringify!(calculateLFEFromSpatialChannels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppChannelWeights) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_converter_config),
        "::",
        stringify!(ppChannelWeights)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allowDynamicSampleRate) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_converter_config),
        "::",
        stringify!(allowDynamicSampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resampling) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_converter_config),
        "::",
        stringify!(resampling)
        )
    );
}
extern "C" {
    pub fn ma_data_converter_config_init_default() -> ma_data_converter_config;
}
extern "C" {
    pub fn ma_data_converter_config_init(
        formatIn: ma_format,
        formatOut: ma_format,
        channelsIn: ma_uint32,
        channelsOut: ma_uint32,
        sampleRateIn: ma_uint32,
        sampleRateOut: ma_uint32,
    ) -> ma_data_converter_config;
}
pub const ma_data_converter_execution_path_ma_data_converter_execution_path_passthrough:
ma_data_converter_execution_path = 0;
pub const ma_data_converter_execution_path_ma_data_converter_execution_path_format_only:
ma_data_converter_execution_path = 1;
pub const ma_data_converter_execution_path_ma_data_converter_execution_path_channels_only:
ma_data_converter_execution_path = 2;
pub const ma_data_converter_execution_path_ma_data_converter_execution_path_resample_only:
ma_data_converter_execution_path = 3;
pub const ma_data_converter_execution_path_ma_data_converter_execution_path_resample_first:
ma_data_converter_execution_path = 4;
pub const ma_data_converter_execution_path_ma_data_converter_execution_path_channels_first:
ma_data_converter_execution_path = 5;
pub type ma_data_converter_execution_path = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_data_converter {
    pub formatIn: ma_format,
    pub formatOut: ma_format,
    pub channelsIn: ma_uint32,
    pub channelsOut: ma_uint32,
    pub sampleRateIn: ma_uint32,
    pub sampleRateOut: ma_uint32,
    pub ditherMode: ma_dither_mode,
    pub executionPath: ma_data_converter_execution_path,
    pub channelConverter: ma_channel_converter,
    pub resampler: ma_resampler,
    pub hasPreFormatConversion: ma_bool8,
    pub hasPostFormatConversion: ma_bool8,
    pub hasChannelConverter: ma_bool8,
    pub hasResampler: ma_bool8,
    pub isPassthrough: ma_bool8,
    pub _ownsHeap: ma_bool8,
    pub _pHeap: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ma_data_converter() {
    const UNINIT: ::std::mem::MaybeUninit<ma_data_converter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_data_converter>(),
        312usize,
        concat!("Size of: ", stringify!(ma_data_converter))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_data_converter>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_data_converter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).formatIn) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_converter),
        "::",
        stringify!(formatIn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).formatOut) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_converter),
        "::",
        stringify!(formatOut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelsIn) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_converter),
        "::",
        stringify!(channelsIn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelsOut) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_converter),
        "::",
        stringify!(channelsOut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRateIn) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_converter),
        "::",
        stringify!(sampleRateIn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRateOut) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_converter),
        "::",
        stringify!(sampleRateOut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ditherMode) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_converter),
        "::",
        stringify!(ditherMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).executionPath) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_converter),
        "::",
        stringify!(executionPath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelConverter) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_converter),
        "::",
        stringify!(channelConverter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resampler) as usize - ptr as usize },
        104usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_converter),
        "::",
        stringify!(resampler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hasPreFormatConversion) as usize - ptr as usize },
        296usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_converter),
        "::",
        stringify!(hasPreFormatConversion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hasPostFormatConversion) as usize - ptr as usize },
        297usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_converter),
        "::",
        stringify!(hasPostFormatConversion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hasChannelConverter) as usize - ptr as usize },
        298usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_converter),
        "::",
        stringify!(hasChannelConverter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hasResampler) as usize - ptr as usize },
        299usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_converter),
        "::",
        stringify!(hasResampler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isPassthrough) as usize - ptr as usize },
        300usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_converter),
        "::",
        stringify!(isPassthrough)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ownsHeap) as usize - ptr as usize },
        301usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_converter),
        "::",
        stringify!(_ownsHeap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pHeap) as usize - ptr as usize },
        304usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_converter),
        "::",
        stringify!(_pHeap)
        )
    );
}
extern "C" {
    pub fn ma_data_converter_get_heap_size(
        pConfig: *const ma_data_converter_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_converter_init_preallocated(
        pConfig: *const ma_data_converter_config,
        pHeap: *mut ::std::os::raw::c_void,
        pConverter: *mut ma_data_converter,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_converter_init(
        pConfig: *const ma_data_converter_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pConverter: *mut ma_data_converter,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_converter_uninit(
        pConverter: *mut ma_data_converter,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
extern "C" {
    pub fn ma_data_converter_process_pcm_frames(
        pConverter: *mut ma_data_converter,
        pFramesIn: *const ::std::os::raw::c_void,
        pFrameCountIn: *mut ma_uint64,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFrameCountOut: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_converter_set_rate(
        pConverter: *mut ma_data_converter,
        sampleRateIn: ma_uint32,
        sampleRateOut: ma_uint32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_converter_set_rate_ratio(
        pConverter: *mut ma_data_converter,
        ratioInOut: f32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_converter_get_input_latency(pConverter: *const ma_data_converter) -> ma_uint64;
}
extern "C" {
    pub fn ma_data_converter_get_output_latency(pConverter: *const ma_data_converter) -> ma_uint64;
}
extern "C" {
    pub fn ma_data_converter_get_required_input_frame_count(
        pConverter: *const ma_data_converter,
        outputFrameCount: ma_uint64,
        pInputFrameCount: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_converter_get_expected_output_frame_count(
        pConverter: *const ma_data_converter,
        inputFrameCount: ma_uint64,
        pOutputFrameCount: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_converter_get_input_channel_map(
        pConverter: *const ma_data_converter,
        pChannelMap: *mut ma_channel,
        channelMapCap: usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_converter_get_output_channel_map(
        pConverter: *const ma_data_converter,
        pChannelMap: *mut ma_channel,
        channelMapCap: usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_converter_reset(pConverter: *mut ma_data_converter) -> ma_result;
}
extern "C" {
    #[doc = "Format Conversion"]
    pub fn ma_pcm_u8_to_s16(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_u8_to_s24(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_u8_to_s32(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_u8_to_f32(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_s16_to_u8(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_s16_to_s24(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_s16_to_s32(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_s16_to_f32(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_s24_to_u8(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_s24_to_s16(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_s24_to_s32(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_s24_to_f32(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_s32_to_u8(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_s32_to_s16(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_s32_to_s24(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_s32_to_f32(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_f32_to_u8(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_f32_to_s16(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_f32_to_s24(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_f32_to_s32(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_pcm_convert(
        pOut: *mut ::std::os::raw::c_void,
        formatOut: ma_format,
        pIn: *const ::std::os::raw::c_void,
        formatIn: ma_format,
        sampleCount: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_convert_pcm_frames_format(
        pOut: *mut ::std::os::raw::c_void,
        formatOut: ma_format,
        pIn: *const ::std::os::raw::c_void,
        formatIn: ma_format,
        frameCount: ma_uint64,
        channels: ma_uint32,
        ditherMode: ma_dither_mode,
    );
}
extern "C" {
    pub fn ma_deinterleave_pcm_frames(
        format: ma_format,
        channels: ma_uint32,
        frameCount: ma_uint64,
        pInterleavedPCMFrames: *const ::std::os::raw::c_void,
        ppDeinterleavedPCMFrames: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ma_interleave_pcm_frames(
        format: ma_format,
        channels: ma_uint32,
        frameCount: ma_uint64,
        ppDeinterleavedPCMFrames: *mut *const ::std::os::raw::c_void,
        pInterleavedPCMFrames: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ma_channel_map_get_channel(
        pChannelMap: *const ma_channel,
        channelCount: ma_uint32,
        channelIndex: ma_uint32,
    ) -> ma_channel;
}
extern "C" {
    pub fn ma_channel_map_init_blank(pChannelMap: *mut ma_channel, channels: ma_uint32);
}
extern "C" {
    pub fn ma_channel_map_init_standard(
        standardChannelMap: ma_standard_channel_map,
        pChannelMap: *mut ma_channel,
        channelMapCap: usize,
        channels: ma_uint32,
    );
}
extern "C" {
    pub fn ma_channel_map_copy(pOut: *mut ma_channel, pIn: *const ma_channel, channels: ma_uint32);
}
extern "C" {
    pub fn ma_channel_map_copy_or_default(
        pOut: *mut ma_channel,
        channelMapCapOut: usize,
        pIn: *const ma_channel,
        channels: ma_uint32,
    );
}
extern "C" {
    pub fn ma_channel_map_is_valid(
        pChannelMap: *const ma_channel,
        channels: ma_uint32,
    ) -> ma_bool32;
}
extern "C" {
    pub fn ma_channel_map_is_equal(
        pChannelMapA: *const ma_channel,
        pChannelMapB: *const ma_channel,
        channels: ma_uint32,
    ) -> ma_bool32;
}
extern "C" {
    pub fn ma_channel_map_is_blank(
        pChannelMap: *const ma_channel,
        channels: ma_uint32,
    ) -> ma_bool32;
}
extern "C" {
    pub fn ma_channel_map_contains_channel_position(
        channels: ma_uint32,
        pChannelMap: *const ma_channel,
        channelPosition: ma_channel,
    ) -> ma_bool32;
}
extern "C" {
    pub fn ma_channel_map_find_channel_position(
        channels: ma_uint32,
        pChannelMap: *const ma_channel,
        channelPosition: ma_channel,
        pChannelIndex: *mut ma_uint32,
    ) -> ma_bool32;
}
extern "C" {
    pub fn ma_channel_map_to_string(
        pChannelMap: *const ma_channel,
        channels: ma_uint32,
        pBufferOut: *mut ::std::os::raw::c_char,
        bufferCap: usize,
    ) -> usize;
}
extern "C" {
    pub fn ma_channel_position_to_string(channel: ma_channel) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "Conversion Helpers"]
    pub fn ma_convert_frames(
        pOut: *mut ::std::os::raw::c_void,
        frameCountOut: ma_uint64,
        formatOut: ma_format,
        channelsOut: ma_uint32,
        sampleRateOut: ma_uint32,
        pIn: *const ::std::os::raw::c_void,
        frameCountIn: ma_uint64,
        formatIn: ma_format,
        channelsIn: ma_uint32,
        sampleRateIn: ma_uint32,
    ) -> ma_uint64;
}
extern "C" {
    pub fn ma_convert_frames_ex(
        pOut: *mut ::std::os::raw::c_void,
        frameCountOut: ma_uint64,
        pIn: *const ::std::os::raw::c_void,
        frameCountIn: ma_uint64,
        pConfig: *const ma_data_converter_config,
    ) -> ma_uint64;
}
#[doc = "Ring Buffer"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_rb {
    pub pBuffer: *mut ::std::os::raw::c_void,
    pub subbufferSizeInBytes: ma_uint32,
    pub subbufferCount: ma_uint32,
    pub subbufferStrideInBytes: ma_uint32,
    pub encodedReadOffset: ma_uint32,
    pub encodedWriteOffset: ma_uint32,
    pub ownsBuffer: ma_bool8,
    pub clearOnWriteAcquire: ma_bool8,
    pub allocationCallbacks: ma_allocation_callbacks,
}
#[test]
fn bindgen_test_layout_ma_rb() {
    const UNINIT: ::std::mem::MaybeUninit<ma_rb> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_rb>(),
        64usize,
        concat!("Size of: ", stringify!(ma_rb))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_rb>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_rb))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pBuffer) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_rb),
        "::",
        stringify!(pBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subbufferSizeInBytes) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_rb),
        "::",
        stringify!(subbufferSizeInBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subbufferCount) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_rb),
        "::",
        stringify!(subbufferCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subbufferStrideInBytes) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_rb),
        "::",
        stringify!(subbufferStrideInBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encodedReadOffset) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_rb),
        "::",
        stringify!(encodedReadOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encodedWriteOffset) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_rb),
        "::",
        stringify!(encodedWriteOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ownsBuffer) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_rb),
        "::",
        stringify!(ownsBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clearOnWriteAcquire) as usize - ptr as usize },
        29usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_rb),
        "::",
        stringify!(clearOnWriteAcquire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocationCallbacks) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_rb),
        "::",
        stringify!(allocationCallbacks)
        )
    );
}
extern "C" {
    pub fn ma_rb_init_ex(
        subbufferSizeInBytes: usize,
        subbufferCount: usize,
        subbufferStrideInBytes: usize,
        pOptionalPreallocatedBuffer: *mut ::std::os::raw::c_void,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pRB: *mut ma_rb,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_rb_init(
        bufferSizeInBytes: usize,
        pOptionalPreallocatedBuffer: *mut ::std::os::raw::c_void,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pRB: *mut ma_rb,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_rb_uninit(pRB: *mut ma_rb);
}
extern "C" {
    pub fn ma_rb_reset(pRB: *mut ma_rb);
}
extern "C" {
    pub fn ma_rb_acquire_read(
        pRB: *mut ma_rb,
        pSizeInBytes: *mut usize,
        ppBufferOut: *mut *mut ::std::os::raw::c_void,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_rb_commit_read(pRB: *mut ma_rb, sizeInBytes: usize) -> ma_result;
}
extern "C" {
    pub fn ma_rb_acquire_write(
        pRB: *mut ma_rb,
        pSizeInBytes: *mut usize,
        ppBufferOut: *mut *mut ::std::os::raw::c_void,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_rb_commit_write(pRB: *mut ma_rb, sizeInBytes: usize) -> ma_result;
}
extern "C" {
    pub fn ma_rb_seek_read(pRB: *mut ma_rb, offsetInBytes: usize) -> ma_result;
}
extern "C" {
    pub fn ma_rb_seek_write(pRB: *mut ma_rb, offsetInBytes: usize) -> ma_result;
}
extern "C" {
    pub fn ma_rb_pointer_distance(pRB: *mut ma_rb) -> ma_int32;
}
extern "C" {
    pub fn ma_rb_available_read(pRB: *mut ma_rb) -> ma_uint32;
}
extern "C" {
    pub fn ma_rb_available_write(pRB: *mut ma_rb) -> ma_uint32;
}
extern "C" {
    pub fn ma_rb_get_subbuffer_size(pRB: *mut ma_rb) -> usize;
}
extern "C" {
    pub fn ma_rb_get_subbuffer_stride(pRB: *mut ma_rb) -> usize;
}
extern "C" {
    pub fn ma_rb_get_subbuffer_offset(pRB: *mut ma_rb, subbufferIndex: usize) -> usize;
}
extern "C" {
    pub fn ma_rb_get_subbuffer_ptr(
        pRB: *mut ma_rb,
        subbufferIndex: usize,
        pBuffer: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_pcm_rb {
    pub rb: ma_rb,
    pub format: ma_format,
    pub channels: ma_uint32,
}
#[test]
fn bindgen_test_layout_ma_pcm_rb() {
    const UNINIT: ::std::mem::MaybeUninit<ma_pcm_rb> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_pcm_rb>(),
        72usize,
        concat!("Size of: ", stringify!(ma_pcm_rb))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_pcm_rb>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_pcm_rb))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rb) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_pcm_rb),
        "::",
        stringify!(rb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_pcm_rb),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        68usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_pcm_rb),
        "::",
        stringify!(channels)
        )
    );
}
extern "C" {
    pub fn ma_pcm_rb_init_ex(
        format: ma_format,
        channels: ma_uint32,
        subbufferSizeInFrames: ma_uint32,
        subbufferCount: ma_uint32,
        subbufferStrideInFrames: ma_uint32,
        pOptionalPreallocatedBuffer: *mut ::std::os::raw::c_void,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pRB: *mut ma_pcm_rb,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_pcm_rb_init(
        format: ma_format,
        channels: ma_uint32,
        bufferSizeInFrames: ma_uint32,
        pOptionalPreallocatedBuffer: *mut ::std::os::raw::c_void,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pRB: *mut ma_pcm_rb,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_pcm_rb_uninit(pRB: *mut ma_pcm_rb);
}
extern "C" {
    pub fn ma_pcm_rb_reset(pRB: *mut ma_pcm_rb);
}
extern "C" {
    pub fn ma_pcm_rb_acquire_read(
        pRB: *mut ma_pcm_rb,
        pSizeInFrames: *mut ma_uint32,
        ppBufferOut: *mut *mut ::std::os::raw::c_void,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_pcm_rb_commit_read(pRB: *mut ma_pcm_rb, sizeInFrames: ma_uint32) -> ma_result;
}
extern "C" {
    pub fn ma_pcm_rb_acquire_write(
        pRB: *mut ma_pcm_rb,
        pSizeInFrames: *mut ma_uint32,
        ppBufferOut: *mut *mut ::std::os::raw::c_void,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_pcm_rb_commit_write(pRB: *mut ma_pcm_rb, sizeInFrames: ma_uint32) -> ma_result;
}
extern "C" {
    pub fn ma_pcm_rb_seek_read(pRB: *mut ma_pcm_rb, offsetInFrames: ma_uint32) -> ma_result;
}
extern "C" {
    pub fn ma_pcm_rb_seek_write(pRB: *mut ma_pcm_rb, offsetInFrames: ma_uint32) -> ma_result;
}
extern "C" {
    pub fn ma_pcm_rb_pointer_distance(pRB: *mut ma_pcm_rb) -> ma_int32;
}
extern "C" {
    pub fn ma_pcm_rb_available_read(pRB: *mut ma_pcm_rb) -> ma_uint32;
}
extern "C" {
    pub fn ma_pcm_rb_available_write(pRB: *mut ma_pcm_rb) -> ma_uint32;
}
extern "C" {
    pub fn ma_pcm_rb_get_subbuffer_size(pRB: *mut ma_pcm_rb) -> ma_uint32;
}
extern "C" {
    pub fn ma_pcm_rb_get_subbuffer_stride(pRB: *mut ma_pcm_rb) -> ma_uint32;
}
extern "C" {
    pub fn ma_pcm_rb_get_subbuffer_offset(
        pRB: *mut ma_pcm_rb,
        subbufferIndex: ma_uint32,
    ) -> ma_uint32;
}
extern "C" {
    pub fn ma_pcm_rb_get_subbuffer_ptr(
        pRB: *mut ma_pcm_rb,
        subbufferIndex: ma_uint32,
        pBuffer: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_duplex_rb {
    pub rb: ma_pcm_rb,
}
#[test]
fn bindgen_test_layout_ma_duplex_rb() {
    const UNINIT: ::std::mem::MaybeUninit<ma_duplex_rb> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_duplex_rb>(),
        72usize,
        concat!("Size of: ", stringify!(ma_duplex_rb))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_duplex_rb>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_duplex_rb))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rb) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_duplex_rb),
        "::",
        stringify!(rb)
        )
    );
}
extern "C" {
    pub fn ma_duplex_rb_init(
        captureFormat: ma_format,
        captureChannels: ma_uint32,
        sampleRate: ma_uint32,
        captureInternalSampleRate: ma_uint32,
        captureInternalPeriodSizeInFrames: ma_uint32,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pRB: *mut ma_duplex_rb,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_duplex_rb_uninit(pRB: *mut ma_duplex_rb) -> ma_result;
}
extern "C" {
    #[doc = "Miscellaneous Helpers"]
    pub fn ma_result_description(result: ma_result) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ma_malloc(
        sz: usize,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ma_calloc(
        sz: usize,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ma_realloc(
        p: *mut ::std::os::raw::c_void,
        sz: usize,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ma_free(
        p: *mut ::std::os::raw::c_void,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
extern "C" {
    pub fn ma_aligned_malloc(
        sz: usize,
        alignment: usize,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ma_aligned_free(
        p: *mut ::std::os::raw::c_void,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
extern "C" {
    pub fn ma_get_format_name(format: ma_format) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ma_blend_f32(
        pOut: *mut f32,
        pInA: *mut f32,
        pInB: *mut f32,
        factor: f32,
        channels: ma_uint32,
    );
}
extern "C" {
    pub fn ma_get_bytes_per_sample(format: ma_format) -> ma_uint32;
}
extern "C" {
    pub fn ma_log_level_to_string(logLevel: ma_uint32) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "Synchronization"]
    pub fn ma_spinlock_lock(pSpinlock: *mut ma_spinlock) -> ma_result;
}
extern "C" {
    pub fn ma_spinlock_lock_noyield(pSpinlock: *mut ma_spinlock) -> ma_result;
}
extern "C" {
    pub fn ma_spinlock_unlock(pSpinlock: *mut ma_spinlock) -> ma_result;
}
extern "C" {
    pub fn ma_mutex_init(pMutex: *mut ma_mutex) -> ma_result;
}
extern "C" {
    pub fn ma_mutex_uninit(pMutex: *mut ma_mutex);
}
extern "C" {
    pub fn ma_mutex_lock(pMutex: *mut ma_mutex);
}
extern "C" {
    pub fn ma_mutex_unlock(pMutex: *mut ma_mutex);
}
extern "C" {
    pub fn ma_event_init(pEvent: *mut ma_event) -> ma_result;
}
extern "C" {
    pub fn ma_event_uninit(pEvent: *mut ma_event);
}
extern "C" {
    pub fn ma_event_wait(pEvent: *mut ma_event) -> ma_result;
}
extern "C" {
    pub fn ma_event_signal(pEvent: *mut ma_event) -> ma_result;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_fence {
    pub e: ma_event,
    pub counter: ma_uint32,
}
#[test]
fn bindgen_test_layout_ma_fence() {
    const UNINIT: ::std::mem::MaybeUninit<ma_fence> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_fence>(),
        16usize,
        concat!("Size of: ", stringify!(ma_fence))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_fence>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_fence))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_fence),
        "::",
        stringify!(e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counter) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_fence),
        "::",
        stringify!(counter)
        )
    );
}
extern "C" {
    pub fn ma_fence_init(pFence: *mut ma_fence) -> ma_result;
}
extern "C" {
    pub fn ma_fence_uninit(pFence: *mut ma_fence);
}
extern "C" {
    pub fn ma_fence_acquire(pFence: *mut ma_fence) -> ma_result;
}
extern "C" {
    pub fn ma_fence_release(pFence: *mut ma_fence) -> ma_result;
}
extern "C" {
    pub fn ma_fence_wait(pFence: *mut ma_fence) -> ma_result;
}
pub type ma_async_notification = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_async_notification_callbacks {
    pub onSignal:
    ::std::option::Option<unsafe extern "C" fn(pNotification: *mut ma_async_notification)>,
}
#[test]
fn bindgen_test_layout_ma_async_notification_callbacks() {
    const UNINIT: ::std::mem::MaybeUninit<ma_async_notification_callbacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_async_notification_callbacks>(),
        8usize,
        concat!("Size of: ", stringify!(ma_async_notification_callbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_async_notification_callbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_async_notification_callbacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onSignal) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_async_notification_callbacks),
        "::",
        stringify!(onSignal)
        )
    );
}
extern "C" {
    pub fn ma_async_notification_signal(pNotification: *mut ma_async_notification) -> ma_result;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_async_notification_poll {
    pub cb: ma_async_notification_callbacks,
    pub signalled: ma_bool32,
}
#[test]
fn bindgen_test_layout_ma_async_notification_poll() {
    const UNINIT: ::std::mem::MaybeUninit<ma_async_notification_poll> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_async_notification_poll>(),
        16usize,
        concat!("Size of: ", stringify!(ma_async_notification_poll))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_async_notification_poll>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_async_notification_poll))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_async_notification_poll),
        "::",
        stringify!(cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signalled) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_async_notification_poll),
        "::",
        stringify!(signalled)
        )
    );
}
extern "C" {
    pub fn ma_async_notification_poll_init(
        pNotificationPoll: *mut ma_async_notification_poll,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_async_notification_poll_is_signalled(
        pNotificationPoll: *const ma_async_notification_poll,
    ) -> ma_bool32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_async_notification_event {
    pub cb: ma_async_notification_callbacks,
    pub e: ma_event,
}
#[test]
fn bindgen_test_layout_ma_async_notification_event() {
    const UNINIT: ::std::mem::MaybeUninit<ma_async_notification_event> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_async_notification_event>(),
        16usize,
        concat!("Size of: ", stringify!(ma_async_notification_event))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_async_notification_event>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_async_notification_event))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_async_notification_event),
        "::",
        stringify!(cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_async_notification_event),
        "::",
        stringify!(e)
        )
    );
}
extern "C" {
    pub fn ma_async_notification_event_init(
        pNotificationEvent: *mut ma_async_notification_event,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_async_notification_event_uninit(
        pNotificationEvent: *mut ma_async_notification_event,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_async_notification_event_wait(
        pNotificationEvent: *mut ma_async_notification_event,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_async_notification_event_signal(
        pNotificationEvent: *mut ma_async_notification_event,
    ) -> ma_result;
}
#[doc = "Job Queue"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_slot_allocator_config {
    pub capacity: ma_uint32,
}
#[test]
fn bindgen_test_layout_ma_slot_allocator_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_slot_allocator_config> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_slot_allocator_config>(),
        4usize,
        concat!("Size of: ", stringify!(ma_slot_allocator_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_slot_allocator_config>(),
        4usize,
        concat!("Alignment of ", stringify!(ma_slot_allocator_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_slot_allocator_config),
        "::",
        stringify!(capacity)
        )
    );
}
extern "C" {
    pub fn ma_slot_allocator_config_init(capacity: ma_uint32) -> ma_slot_allocator_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_slot_allocator_group {
    pub bitfield: ma_uint32,
}
#[test]
fn bindgen_test_layout_ma_slot_allocator_group() {
    const UNINIT: ::std::mem::MaybeUninit<ma_slot_allocator_group> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_slot_allocator_group>(),
        4usize,
        concat!("Size of: ", stringify!(ma_slot_allocator_group))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_slot_allocator_group>(),
        4usize,
        concat!("Alignment of ", stringify!(ma_slot_allocator_group))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitfield) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_slot_allocator_group),
        "::",
        stringify!(bitfield)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_slot_allocator {
    pub pGroups: *mut ma_slot_allocator_group,
    pub pSlots: *mut ma_uint32,
    pub count: ma_uint32,
    pub capacity: ma_uint32,
    pub _ownsHeap: ma_bool32,
    pub _pHeap: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ma_slot_allocator() {
    const UNINIT: ::std::mem::MaybeUninit<ma_slot_allocator> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_slot_allocator>(),
        40usize,
        concat!("Size of: ", stringify!(ma_slot_allocator))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_slot_allocator>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_slot_allocator))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pGroups) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_slot_allocator),
        "::",
        stringify!(pGroups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSlots) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_slot_allocator),
        "::",
        stringify!(pSlots)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_slot_allocator),
        "::",
        stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_slot_allocator),
        "::",
        stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ownsHeap) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_slot_allocator),
        "::",
        stringify!(_ownsHeap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pHeap) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_slot_allocator),
        "::",
        stringify!(_pHeap)
        )
    );
}
extern "C" {
    pub fn ma_slot_allocator_get_heap_size(
        pConfig: *const ma_slot_allocator_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_slot_allocator_init_preallocated(
        pConfig: *const ma_slot_allocator_config,
        pHeap: *mut ::std::os::raw::c_void,
        pAllocator: *mut ma_slot_allocator,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_slot_allocator_init(
        pConfig: *const ma_slot_allocator_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pAllocator: *mut ma_slot_allocator,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_slot_allocator_uninit(
        pAllocator: *mut ma_slot_allocator,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
extern "C" {
    pub fn ma_slot_allocator_alloc(
        pAllocator: *mut ma_slot_allocator,
        pSlot: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_slot_allocator_free(pAllocator: *mut ma_slot_allocator, slot: ma_uint64)
                                  -> ma_result;
}
pub type ma_job_proc = ::std::option::Option<unsafe extern "C" fn(pJob: *mut ma_job) -> ma_result>;
pub const ma_job_type_MA_JOB_TYPE_QUIT: ma_job_type = 0;
pub const ma_job_type_MA_JOB_TYPE_CUSTOM: ma_job_type = 1;
pub const ma_job_type_MA_JOB_TYPE_RESOURCE_MANAGER_LOAD_DATA_BUFFER_NODE: ma_job_type = 2;
pub const ma_job_type_MA_JOB_TYPE_RESOURCE_MANAGER_FREE_DATA_BUFFER_NODE: ma_job_type = 3;
pub const ma_job_type_MA_JOB_TYPE_RESOURCE_MANAGER_PAGE_DATA_BUFFER_NODE: ma_job_type = 4;
pub const ma_job_type_MA_JOB_TYPE_RESOURCE_MANAGER_LOAD_DATA_BUFFER: ma_job_type = 5;
pub const ma_job_type_MA_JOB_TYPE_RESOURCE_MANAGER_FREE_DATA_BUFFER: ma_job_type = 6;
pub const ma_job_type_MA_JOB_TYPE_RESOURCE_MANAGER_LOAD_DATA_STREAM: ma_job_type = 7;
pub const ma_job_type_MA_JOB_TYPE_RESOURCE_MANAGER_FREE_DATA_STREAM: ma_job_type = 8;
pub const ma_job_type_MA_JOB_TYPE_RESOURCE_MANAGER_PAGE_DATA_STREAM: ma_job_type = 9;
pub const ma_job_type_MA_JOB_TYPE_RESOURCE_MANAGER_SEEK_DATA_STREAM: ma_job_type = 10;
pub const ma_job_type_MA_JOB_TYPE_DEVICE_AAUDIO_REROUTE: ma_job_type = 11;
pub const ma_job_type_MA_JOB_TYPE_COUNT: ma_job_type = 12;
pub type ma_job_type = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_job {
    pub toc: ma_job__bindgen_ty_1,
    pub next: ma_uint64,
    pub order: ma_uint32,
    pub data: ma_job__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_job__bindgen_ty_1 {
    pub breakup: ma_job__bindgen_ty_1__bindgen_ty_1,
    pub allocation: ma_uint64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_job__bindgen_ty_1__bindgen_ty_1 {
    pub code: ma_uint16,
    pub slot: ma_uint16,
    pub refcount: ma_uint32,
}
#[test]
fn bindgen_test_layout_ma_job__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_job__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_job__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(ma_job__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_job__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
        "Alignment of ",
        stringify!(ma_job__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_1__bindgen_ty_1),
        "::",
        stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slot) as usize - ptr as usize },
        2usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_1__bindgen_ty_1),
        "::",
        stringify!(slot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refcount) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_1__bindgen_ty_1),
        "::",
        stringify!(refcount)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_job__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_job__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_job__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(ma_job__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_job__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_job__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).breakup) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_1),
        "::",
        stringify!(breakup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocation) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_1),
        "::",
        stringify!(allocation)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_job__bindgen_ty_2 {
    pub custom: ma_job__bindgen_ty_2__bindgen_ty_1,
    pub resourceManager: ma_job__bindgen_ty_2__bindgen_ty_2,
    pub device: ma_job__bindgen_ty_2__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_job__bindgen_ty_2__bindgen_ty_1 {
    pub proc_: ma_job_proc,
    pub data0: ma_uintptr,
    pub data1: ma_uintptr,
}
#[test]
fn bindgen_test_layout_ma_job__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_job__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_job__bindgen_ty_2__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(ma_job__bindgen_ty_2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_job__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).proc_) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_1),
        "::",
        stringify!(proc_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data0) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_1),
        "::",
        stringify!(data0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data1) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_1),
        "::",
        stringify!(data1)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_job__bindgen_ty_2__bindgen_ty_2 {
    pub loadDataBufferNode: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1,
    pub freeDataBufferNode: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_2,
    pub pageDataBufferNode: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_3,
    pub loadDataBuffer: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4,
    pub freeDataBuffer: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_5,
    pub loadDataStream: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6,
    pub freeDataStream: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_7,
    pub pageDataStream: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_8,
    pub seekDataStream: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_9,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1 {
    pub pResourceManager: *mut ::std::os::raw::c_void,
    pub pDataBufferNode: *mut ::std::os::raw::c_void,
    pub pFilePath: *mut ::std::os::raw::c_char,
    pub pFilePathW: *mut wchar_t,
    pub flags: ma_uint32,
    pub pInitNotification: *mut ma_async_notification,
    pub pDoneNotification: *mut ma_async_notification,
    pub pInitFence: *mut ma_fence,
    pub pDoneFence: *mut ma_fence,
}
#[test]
fn bindgen_test_layout_ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1>(),
        72usize,
        concat!(
        "Size of: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pResourceManager) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1),
        "::",
        stringify!(pResourceManager)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDataBufferNode) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1),
        "::",
        stringify!(pDataBufferNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pFilePath) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1),
        "::",
        stringify!(pFilePath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pFilePathW) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1),
        "::",
        stringify!(pFilePathW)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1),
        "::",
        stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInitNotification) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1),
        "::",
        stringify!(pInitNotification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDoneNotification) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1),
        "::",
        stringify!(pDoneNotification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInitFence) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1),
        "::",
        stringify!(pInitFence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDoneFence) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1),
        "::",
        stringify!(pDoneFence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_2 {
    pub pResourceManager: *mut ::std::os::raw::c_void,
    pub pDataBufferNode: *mut ::std::os::raw::c_void,
    pub pDoneNotification: *mut ma_async_notification,
    pub pDoneFence: *mut ma_fence,
}
#[test]
fn bindgen_test_layout_ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_2>(),
        32usize,
        concat!(
        "Size of: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_2>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pResourceManager) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_2),
        "::",
        stringify!(pResourceManager)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDataBufferNode) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_2),
        "::",
        stringify!(pDataBufferNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDoneNotification) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_2),
        "::",
        stringify!(pDoneNotification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDoneFence) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_2),
        "::",
        stringify!(pDoneFence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_3 {
    pub pResourceManager: *mut ::std::os::raw::c_void,
    pub pDataBufferNode: *mut ::std::os::raw::c_void,
    pub pDecoder: *mut ::std::os::raw::c_void,
    pub pDoneNotification: *mut ma_async_notification,
    pub pDoneFence: *mut ma_fence,
}
#[test]
fn bindgen_test_layout_ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_3>(),
        40usize,
        concat!(
        "Size of: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_3>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pResourceManager) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_3),
        "::",
        stringify!(pResourceManager)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDataBufferNode) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_3),
        "::",
        stringify!(pDataBufferNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDecoder) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_3),
        "::",
        stringify!(pDecoder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDoneNotification) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_3),
        "::",
        stringify!(pDoneNotification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDoneFence) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_3),
        "::",
        stringify!(pDoneFence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4 {
    pub pDataBuffer: *mut ::std::os::raw::c_void,
    pub pInitNotification: *mut ma_async_notification,
    pub pDoneNotification: *mut ma_async_notification,
    pub pInitFence: *mut ma_fence,
    pub pDoneFence: *mut ma_fence,
    pub rangeBegInPCMFrames: ma_uint64,
    pub rangeEndInPCMFrames: ma_uint64,
    pub loopPointBegInPCMFrames: ma_uint64,
    pub loopPointEndInPCMFrames: ma_uint64,
    pub isLooping: ma_uint32,
}
#[test]
fn bindgen_test_layout_ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4>(),
        80usize,
        concat!(
        "Size of: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDataBuffer) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4),
        "::",
        stringify!(pDataBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInitNotification) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4),
        "::",
        stringify!(pInitNotification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDoneNotification) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4),
        "::",
        stringify!(pDoneNotification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInitFence) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4),
        "::",
        stringify!(pInitFence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDoneFence) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4),
        "::",
        stringify!(pDoneFence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rangeBegInPCMFrames) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4),
        "::",
        stringify!(rangeBegInPCMFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rangeEndInPCMFrames) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4),
        "::",
        stringify!(rangeEndInPCMFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loopPointBegInPCMFrames) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4),
        "::",
        stringify!(loopPointBegInPCMFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loopPointEndInPCMFrames) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4),
        "::",
        stringify!(loopPointEndInPCMFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isLooping) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4),
        "::",
        stringify!(isLooping)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_5 {
    pub pDataBuffer: *mut ::std::os::raw::c_void,
    pub pDoneNotification: *mut ma_async_notification,
    pub pDoneFence: *mut ma_fence,
}
#[test]
fn bindgen_test_layout_ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_5>(),
        24usize,
        concat!(
        "Size of: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_5>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDataBuffer) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_5),
        "::",
        stringify!(pDataBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDoneNotification) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_5),
        "::",
        stringify!(pDoneNotification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDoneFence) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_5),
        "::",
        stringify!(pDoneFence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6 {
    pub pDataStream: *mut ::std::os::raw::c_void,
    pub pFilePath: *mut ::std::os::raw::c_char,
    pub pFilePathW: *mut wchar_t,
    pub initialSeekPoint: ma_uint64,
    pub pInitNotification: *mut ma_async_notification,
    pub pInitFence: *mut ma_fence,
}
#[test]
fn bindgen_test_layout_ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6() {
    const UNINIT: ::std::mem::MaybeUninit<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6>(),
        48usize,
        concat!(
        "Size of: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDataStream) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6),
        "::",
        stringify!(pDataStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pFilePath) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6),
        "::",
        stringify!(pFilePath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pFilePathW) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6),
        "::",
        stringify!(pFilePathW)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialSeekPoint) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6),
        "::",
        stringify!(initialSeekPoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInitNotification) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6),
        "::",
        stringify!(pInitNotification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInitFence) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6),
        "::",
        stringify!(pInitFence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_7 {
    pub pDataStream: *mut ::std::os::raw::c_void,
    pub pDoneNotification: *mut ma_async_notification,
    pub pDoneFence: *mut ma_fence,
}
#[test]
fn bindgen_test_layout_ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_7() {
    const UNINIT: ::std::mem::MaybeUninit<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_7> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_7>(),
        24usize,
        concat!(
        "Size of: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_7)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_7>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDataStream) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_7),
        "::",
        stringify!(pDataStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDoneNotification) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_7),
        "::",
        stringify!(pDoneNotification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDoneFence) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_7),
        "::",
        stringify!(pDoneFence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_8 {
    pub pDataStream: *mut ::std::os::raw::c_void,
    pub pageIndex: ma_uint32,
}
#[test]
fn bindgen_test_layout_ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_8() {
    const UNINIT: ::std::mem::MaybeUninit<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_8> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_8>(),
        16usize,
        concat!(
        "Size of: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_8)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_8>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDataStream) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_8),
        "::",
        stringify!(pDataStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pageIndex) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_8),
        "::",
        stringify!(pageIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_9 {
    pub pDataStream: *mut ::std::os::raw::c_void,
    pub frameIndex: ma_uint64,
}
#[test]
fn bindgen_test_layout_ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_9() {
    const UNINIT: ::std::mem::MaybeUninit<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_9> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_9>(),
        16usize,
        concat!(
        "Size of: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_9)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_9>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDataStream) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_9),
        "::",
        stringify!(pDataStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frameIndex) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_9),
        "::",
        stringify!(frameIndex)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_job__bindgen_ty_2__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<ma_job__bindgen_ty_2__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_job__bindgen_ty_2__bindgen_ty_2>(),
        80usize,
        concat!("Size of: ", stringify!(ma_job__bindgen_ty_2__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_job__bindgen_ty_2__bindgen_ty_2>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loadDataBufferNode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2),
        "::",
        stringify!(loadDataBufferNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freeDataBufferNode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2),
        "::",
        stringify!(freeDataBufferNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pageDataBufferNode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2),
        "::",
        stringify!(pageDataBufferNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loadDataBuffer) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2),
        "::",
        stringify!(loadDataBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freeDataBuffer) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2),
        "::",
        stringify!(freeDataBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loadDataStream) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2),
        "::",
        stringify!(loadDataStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freeDataStream) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2),
        "::",
        stringify!(freeDataStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pageDataStream) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2),
        "::",
        stringify!(pageDataStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seekDataStream) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_2),
        "::",
        stringify!(seekDataStream)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_job__bindgen_ty_2__bindgen_ty_3 {
    pub aaudio: ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1 {
    pub reroute: ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1 {
    pub pDevice: *mut ::std::os::raw::c_void,
    pub deviceType: ma_uint32,
}
#[test]
fn bindgen_test_layout_ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
        "Size of: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDevice) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1),
        "::",
        stringify!(pDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceType) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1),
        "::",
        stringify!(deviceType)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1>(),
        16usize,
        concat!(
        "Size of: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reroute) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1),
        "::",
        stringify!(reroute)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_job__bindgen_ty_2__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<ma_job__bindgen_ty_2__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_job__bindgen_ty_2__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(ma_job__bindgen_ty_2__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_job__bindgen_ty_2__bindgen_ty_3>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aaudio) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2__bindgen_ty_3),
        "::",
        stringify!(aaudio)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_job__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<ma_job__bindgen_ty_2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_job__bindgen_ty_2>(),
        80usize,
        concat!("Size of: ", stringify!(ma_job__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_job__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_job__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2),
        "::",
        stringify!(custom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resourceManager) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2),
        "::",
        stringify!(resourceManager)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job__bindgen_ty_2),
        "::",
        stringify!(device)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_job() {
    const UNINIT: ::std::mem::MaybeUninit<ma_job> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_job>(),
        104usize,
        concat!("Size of: ", stringify!(ma_job))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_job>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_job))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).toc) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job),
        "::",
        stringify!(toc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job),
        "::",
        stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).order) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job),
        "::",
        stringify!(order)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job),
        "::",
        stringify!(data)
        )
    );
}
extern "C" {
    pub fn ma_job_init(code: ma_uint16) -> ma_job;
}
extern "C" {
    pub fn ma_job_process(pJob: *mut ma_job) -> ma_result;
}
pub const ma_job_queue_flags_MA_JOB_QUEUE_FLAG_NON_BLOCKING: ma_job_queue_flags = 1;
pub type ma_job_queue_flags = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_job_queue_config {
    pub flags: ma_uint32,
    pub capacity: ma_uint32,
}
#[test]
fn bindgen_test_layout_ma_job_queue_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_job_queue_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_job_queue_config>(),
        8usize,
        concat!("Size of: ", stringify!(ma_job_queue_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_job_queue_config>(),
        4usize,
        concat!("Alignment of ", stringify!(ma_job_queue_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job_queue_config),
        "::",
        stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job_queue_config),
        "::",
        stringify!(capacity)
        )
    );
}
extern "C" {
    pub fn ma_job_queue_config_init(flags: ma_uint32, capacity: ma_uint32) -> ma_job_queue_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_job_queue {
    pub flags: ma_uint32,
    pub capacity: ma_uint32,
    pub head: ma_uint64,
    pub tail: ma_uint64,
    pub sem: ma_semaphore,
    pub allocator: ma_slot_allocator,
    pub pJobs: *mut ma_job,
    pub lock: ma_spinlock,
    pub _pHeap: *mut ::std::os::raw::c_void,
    pub _ownsHeap: ma_bool32,
}
#[test]
fn bindgen_test_layout_ma_job_queue() {
    const UNINIT: ::std::mem::MaybeUninit<ma_job_queue> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_job_queue>(),
        104usize,
        concat!("Size of: ", stringify!(ma_job_queue))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_job_queue>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_job_queue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job_queue),
        "::",
        stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job_queue),
        "::",
        stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job_queue),
        "::",
        stringify!(head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tail) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job_queue),
        "::",
        stringify!(tail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sem) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job_queue),
        "::",
        stringify!(sem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocator) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job_queue),
        "::",
        stringify!(allocator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pJobs) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job_queue),
        "::",
        stringify!(pJobs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job_queue),
        "::",
        stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pHeap) as usize - ptr as usize },
        88usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job_queue),
        "::",
        stringify!(_pHeap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ownsHeap) as usize - ptr as usize },
        96usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_job_queue),
        "::",
        stringify!(_ownsHeap)
        )
    );
}
extern "C" {
    pub fn ma_job_queue_get_heap_size(
        pConfig: *const ma_job_queue_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_job_queue_init_preallocated(
        pConfig: *const ma_job_queue_config,
        pHeap: *mut ::std::os::raw::c_void,
        pQueue: *mut ma_job_queue,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_job_queue_init(
        pConfig: *const ma_job_queue_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pQueue: *mut ma_job_queue,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_job_queue_uninit(
        pQueue: *mut ma_job_queue,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
extern "C" {
    pub fn ma_job_queue_post(pQueue: *mut ma_job_queue, pJob: *const ma_job) -> ma_result;
}
extern "C" {
    pub fn ma_job_queue_next(pQueue: *mut ma_job_queue, pJob: *mut ma_job) -> ma_result;
}
pub const ma_device_state_ma_device_state_uninitialized: ma_device_state = 0;
pub const ma_device_state_ma_device_state_stopped: ma_device_state = 1;
pub const ma_device_state_ma_device_state_started: ma_device_state = 2;
pub const ma_device_state_ma_device_state_starting: ma_device_state = 3;
pub const ma_device_state_ma_device_state_stopping: ma_device_state = 4;
pub type ma_device_state = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_IMMNotificationClient {
    pub lpVtbl: *mut ::std::os::raw::c_void,
    pub counter: ma_uint32,
    pub pDevice: *mut ma_device,
}
#[test]
fn bindgen_test_layout_ma_IMMNotificationClient() {
    const UNINIT: ::std::mem::MaybeUninit<ma_IMMNotificationClient> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_IMMNotificationClient>(),
        24usize,
        concat!("Size of: ", stringify!(ma_IMMNotificationClient))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_IMMNotificationClient>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_IMMNotificationClient))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lpVtbl) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_IMMNotificationClient),
        "::",
        stringify!(lpVtbl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counter) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_IMMNotificationClient),
        "::",
        stringify!(counter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDevice) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_IMMNotificationClient),
        "::",
        stringify!(pDevice)
        )
    );
}
pub const ma_backend_ma_backend_wasapi: ma_backend = 0;
pub const ma_backend_ma_backend_dsound: ma_backend = 1;
pub const ma_backend_ma_backend_winmm: ma_backend = 2;
pub const ma_backend_ma_backend_coreaudio: ma_backend = 3;
pub const ma_backend_ma_backend_sndio: ma_backend = 4;
pub const ma_backend_ma_backend_audio4: ma_backend = 5;
pub const ma_backend_ma_backend_oss: ma_backend = 6;
pub const ma_backend_ma_backend_pulseaudio: ma_backend = 7;
pub const ma_backend_ma_backend_alsa: ma_backend = 8;
pub const ma_backend_ma_backend_jack: ma_backend = 9;
pub const ma_backend_ma_backend_aaudio: ma_backend = 10;
pub const ma_backend_ma_backend_opensl: ma_backend = 11;
pub const ma_backend_ma_backend_webaudio: ma_backend = 12;
pub const ma_backend_ma_backend_custom: ma_backend = 13;
pub const ma_backend_ma_backend_null: ma_backend = 14;
pub type ma_backend = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_job_thread_config {
    pub noThread: ma_bool32,
    pub jobQueueCapacity: ma_uint32,
    pub jobQueueFlags: ma_uint32,
}
#[test]
fn bindgen_test_layout_ma_device_job_thread_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device_job_thread_config> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device_job_thread_config>(),
        12usize,
        concat!("Size of: ", stringify!(ma_device_job_thread_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device_job_thread_config>(),
        4usize,
        concat!("Alignment of ", stringify!(ma_device_job_thread_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noThread) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_job_thread_config),
        "::",
        stringify!(noThread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jobQueueCapacity) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_job_thread_config),
        "::",
        stringify!(jobQueueCapacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jobQueueFlags) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_job_thread_config),
        "::",
        stringify!(jobQueueFlags)
        )
    );
}
extern "C" {
    pub fn ma_device_job_thread_config_init() -> ma_device_job_thread_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_job_thread {
    pub thread: ma_thread,
    pub jobQueue: ma_job_queue,
    pub _hasThread: ma_bool32,
}
#[test]
fn bindgen_test_layout_ma_device_job_thread() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device_job_thread> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device_job_thread>(),
        120usize,
        concat!("Size of: ", stringify!(ma_device_job_thread))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device_job_thread>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_device_job_thread))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_job_thread),
        "::",
        stringify!(thread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jobQueue) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_job_thread),
        "::",
        stringify!(jobQueue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._hasThread) as usize - ptr as usize },
        112usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_job_thread),
        "::",
        stringify!(_hasThread)
        )
    );
}
extern "C" {
    pub fn ma_device_job_thread_init(
        pConfig: *const ma_device_job_thread_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pJobThread: *mut ma_device_job_thread,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_device_job_thread_uninit(
        pJobThread: *mut ma_device_job_thread,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
extern "C" {
    pub fn ma_device_job_thread_post(
        pJobThread: *mut ma_device_job_thread,
        pJob: *const ma_job,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_device_job_thread_next(
        pJobThread: *mut ma_device_job_thread,
        pJob: *mut ma_job,
    ) -> ma_result;
}
pub const ma_device_notification_type_ma_device_notification_type_started:
ma_device_notification_type = 0;
pub const ma_device_notification_type_ma_device_notification_type_stopped:
ma_device_notification_type = 1;
pub const ma_device_notification_type_ma_device_notification_type_rerouted:
ma_device_notification_type = 2;
pub const ma_device_notification_type_ma_device_notification_type_interruption_began:
ma_device_notification_type = 3;
pub const ma_device_notification_type_ma_device_notification_type_interruption_ended:
ma_device_notification_type = 4;
pub type ma_device_notification_type = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_device_notification {
    pub pDevice: *mut ma_device,
    pub type_: ma_device_notification_type,
    pub data: ma_device_notification__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_device_notification__bindgen_ty_1 {
    pub started: ma_device_notification__bindgen_ty_1__bindgen_ty_1,
    pub stopped: ma_device_notification__bindgen_ty_1__bindgen_ty_2,
    pub rerouted: ma_device_notification__bindgen_ty_1__bindgen_ty_3,
    pub interruption: ma_device_notification__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_notification__bindgen_ty_1__bindgen_ty_1 {
    pub _unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ma_device_notification__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device_notification__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device_notification__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
        "Size of: ",
        stringify!(ma_device_notification__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device_notification__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
        "Alignment of ",
        stringify!(ma_device_notification__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_notification__bindgen_ty_1__bindgen_ty_1),
        "::",
        stringify!(_unused)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_notification__bindgen_ty_1__bindgen_ty_2 {
    pub _unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ma_device_notification__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device_notification__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device_notification__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
        "Size of: ",
        stringify!(ma_device_notification__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device_notification__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
        "Alignment of ",
        stringify!(ma_device_notification__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_notification__bindgen_ty_1__bindgen_ty_2),
        "::",
        stringify!(_unused)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_notification__bindgen_ty_1__bindgen_ty_3 {
    pub _unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ma_device_notification__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device_notification__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device_notification__bindgen_ty_1__bindgen_ty_3>(),
        4usize,
        concat!(
        "Size of: ",
        stringify!(ma_device_notification__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device_notification__bindgen_ty_1__bindgen_ty_3>(),
        4usize,
        concat!(
        "Alignment of ",
        stringify!(ma_device_notification__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_notification__bindgen_ty_1__bindgen_ty_3),
        "::",
        stringify!(_unused)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_notification__bindgen_ty_1__bindgen_ty_4 {
    pub _unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ma_device_notification__bindgen_ty_1__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device_notification__bindgen_ty_1__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device_notification__bindgen_ty_1__bindgen_ty_4>(),
        4usize,
        concat!(
        "Size of: ",
        stringify!(ma_device_notification__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device_notification__bindgen_ty_1__bindgen_ty_4>(),
        4usize,
        concat!(
        "Alignment of ",
        stringify!(ma_device_notification__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_notification__bindgen_ty_1__bindgen_ty_4),
        "::",
        stringify!(_unused)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_device_notification__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device_notification__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device_notification__bindgen_ty_1>(),
        4usize,
        concat!(
        "Size of: ",
        stringify!(ma_device_notification__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device_notification__bindgen_ty_1>(),
        4usize,
        concat!(
        "Alignment of ",
        stringify!(ma_device_notification__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).started) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_notification__bindgen_ty_1),
        "::",
        stringify!(started)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stopped) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_notification__bindgen_ty_1),
        "::",
        stringify!(stopped)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rerouted) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_notification__bindgen_ty_1),
        "::",
        stringify!(rerouted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interruption) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_notification__bindgen_ty_1),
        "::",
        stringify!(interruption)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_device_notification() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device_notification> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device_notification>(),
        16usize,
        concat!("Size of: ", stringify!(ma_device_notification))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device_notification>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_device_notification))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDevice) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_notification),
        "::",
        stringify!(pDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_notification),
        "::",
        stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_notification),
        "::",
        stringify!(data)
        )
    );
}
pub type ma_device_notification_proc =
::std::option::Option<unsafe extern "C" fn(pNotification: *const ma_device_notification)>;
pub type ma_device_data_proc = ::std::option::Option<
    unsafe extern "C" fn(
        pDevice: *mut ma_device,
        pOutput: *mut ::std::os::raw::c_void,
        pInput: *const ::std::os::raw::c_void,
        frameCount: ma_uint32,
    ),
>;
pub type ma_stop_proc = ::std::option::Option<unsafe extern "C" fn(pDevice: *mut ma_device)>;
pub const ma_device_type_ma_device_type_playback: ma_device_type = 1;
pub const ma_device_type_ma_device_type_capture: ma_device_type = 2;
pub const ma_device_type_ma_device_type_duplex: ma_device_type = 3;
pub const ma_device_type_ma_device_type_loopback: ma_device_type = 4;
pub type ma_device_type = ::std::os::raw::c_int;
pub const ma_share_mode_ma_share_mode_shared: ma_share_mode = 0;
pub const ma_share_mode_ma_share_mode_exclusive: ma_share_mode = 1;
pub type ma_share_mode = ::std::os::raw::c_int;
pub const ma_ios_session_category_ma_ios_session_category_default: ma_ios_session_category = 0;
pub const ma_ios_session_category_ma_ios_session_category_none: ma_ios_session_category = 1;
pub const ma_ios_session_category_ma_ios_session_category_ambient: ma_ios_session_category = 2;
pub const ma_ios_session_category_ma_ios_session_category_solo_ambient: ma_ios_session_category = 3;
pub const ma_ios_session_category_ma_ios_session_category_playback: ma_ios_session_category = 4;
pub const ma_ios_session_category_ma_ios_session_category_record: ma_ios_session_category = 5;
pub const ma_ios_session_category_ma_ios_session_category_play_and_record: ma_ios_session_category =
    6;
pub const ma_ios_session_category_ma_ios_session_category_multi_route: ma_ios_session_category = 7;
pub type ma_ios_session_category = ::std::os::raw::c_int;
pub const ma_ios_session_category_option_ma_ios_session_category_option_mix_with_others:
ma_ios_session_category_option = 1;
pub const ma_ios_session_category_option_ma_ios_session_category_option_duck_others:
ma_ios_session_category_option = 2;
pub const ma_ios_session_category_option_ma_ios_session_category_option_allow_bluetooth:
ma_ios_session_category_option = 4;
pub const ma_ios_session_category_option_ma_ios_session_category_option_default_to_speaker:
ma_ios_session_category_option = 8;
pub const ma_ios_session_category_option_ma_ios_session_category_option_interrupt_spoken_audio_and_mix_with_others : ma_ios_session_category_option = 17 ;
pub const ma_ios_session_category_option_ma_ios_session_category_option_allow_bluetooth_a2dp:
ma_ios_session_category_option = 32;
pub const ma_ios_session_category_option_ma_ios_session_category_option_allow_air_play:
ma_ios_session_category_option = 64;
pub type ma_ios_session_category_option = ::std::os::raw::c_int;
pub const ma_opensl_stream_type_ma_opensl_stream_type_default: ma_opensl_stream_type = 0;
pub const ma_opensl_stream_type_ma_opensl_stream_type_voice: ma_opensl_stream_type = 1;
pub const ma_opensl_stream_type_ma_opensl_stream_type_system: ma_opensl_stream_type = 2;
pub const ma_opensl_stream_type_ma_opensl_stream_type_ring: ma_opensl_stream_type = 3;
pub const ma_opensl_stream_type_ma_opensl_stream_type_media: ma_opensl_stream_type = 4;
pub const ma_opensl_stream_type_ma_opensl_stream_type_alarm: ma_opensl_stream_type = 5;
pub const ma_opensl_stream_type_ma_opensl_stream_type_notification: ma_opensl_stream_type = 6;
pub type ma_opensl_stream_type = ::std::os::raw::c_int;
pub const ma_opensl_recording_preset_ma_opensl_recording_preset_default:
ma_opensl_recording_preset = 0;
pub const ma_opensl_recording_preset_ma_opensl_recording_preset_generic:
ma_opensl_recording_preset = 1;
pub const ma_opensl_recording_preset_ma_opensl_recording_preset_camcorder:
ma_opensl_recording_preset = 2;
pub const ma_opensl_recording_preset_ma_opensl_recording_preset_voice_recognition:
ma_opensl_recording_preset = 3;
pub const ma_opensl_recording_preset_ma_opensl_recording_preset_voice_communication:
ma_opensl_recording_preset = 4;
pub const ma_opensl_recording_preset_ma_opensl_recording_preset_voice_unprocessed:
ma_opensl_recording_preset = 5;
pub type ma_opensl_recording_preset = ::std::os::raw::c_int;
pub const ma_wasapi_usage_ma_wasapi_usage_default: ma_wasapi_usage = 0;
pub const ma_wasapi_usage_ma_wasapi_usage_games: ma_wasapi_usage = 1;
pub const ma_wasapi_usage_ma_wasapi_usage_pro_audio: ma_wasapi_usage = 2;
pub type ma_wasapi_usage = ::std::os::raw::c_int;
pub const ma_aaudio_usage_ma_aaudio_usage_default: ma_aaudio_usage = 0;
pub const ma_aaudio_usage_ma_aaudio_usage_media: ma_aaudio_usage = 1;
pub const ma_aaudio_usage_ma_aaudio_usage_voice_communication: ma_aaudio_usage = 2;
pub const ma_aaudio_usage_ma_aaudio_usage_voice_communication_signalling: ma_aaudio_usage = 3;
pub const ma_aaudio_usage_ma_aaudio_usage_alarm: ma_aaudio_usage = 4;
pub const ma_aaudio_usage_ma_aaudio_usage_notification: ma_aaudio_usage = 5;
pub const ma_aaudio_usage_ma_aaudio_usage_notification_ringtone: ma_aaudio_usage = 6;
pub const ma_aaudio_usage_ma_aaudio_usage_notification_event: ma_aaudio_usage = 7;
pub const ma_aaudio_usage_ma_aaudio_usage_assistance_accessibility: ma_aaudio_usage = 8;
pub const ma_aaudio_usage_ma_aaudio_usage_assistance_navigation_guidance: ma_aaudio_usage = 9;
pub const ma_aaudio_usage_ma_aaudio_usage_assistance_sonification: ma_aaudio_usage = 10;
pub const ma_aaudio_usage_ma_aaudio_usage_game: ma_aaudio_usage = 11;
pub const ma_aaudio_usage_ma_aaudio_usage_assitant: ma_aaudio_usage = 12;
pub const ma_aaudio_usage_ma_aaudio_usage_emergency: ma_aaudio_usage = 13;
pub const ma_aaudio_usage_ma_aaudio_usage_safety: ma_aaudio_usage = 14;
pub const ma_aaudio_usage_ma_aaudio_usage_vehicle_status: ma_aaudio_usage = 15;
pub const ma_aaudio_usage_ma_aaudio_usage_announcement: ma_aaudio_usage = 16;
pub type ma_aaudio_usage = ::std::os::raw::c_int;
pub const ma_aaudio_content_type_ma_aaudio_content_type_default: ma_aaudio_content_type = 0;
pub const ma_aaudio_content_type_ma_aaudio_content_type_speech: ma_aaudio_content_type = 1;
pub const ma_aaudio_content_type_ma_aaudio_content_type_music: ma_aaudio_content_type = 2;
pub const ma_aaudio_content_type_ma_aaudio_content_type_movie: ma_aaudio_content_type = 3;
pub const ma_aaudio_content_type_ma_aaudio_content_type_sonification: ma_aaudio_content_type = 4;
pub type ma_aaudio_content_type = ::std::os::raw::c_int;
pub const ma_aaudio_input_preset_ma_aaudio_input_preset_default: ma_aaudio_input_preset = 0;
pub const ma_aaudio_input_preset_ma_aaudio_input_preset_generic: ma_aaudio_input_preset = 1;
pub const ma_aaudio_input_preset_ma_aaudio_input_preset_camcorder: ma_aaudio_input_preset = 2;
pub const ma_aaudio_input_preset_ma_aaudio_input_preset_voice_recognition: ma_aaudio_input_preset =
    3;
pub const ma_aaudio_input_preset_ma_aaudio_input_preset_voice_communication:
ma_aaudio_input_preset = 4;
pub const ma_aaudio_input_preset_ma_aaudio_input_preset_unprocessed: ma_aaudio_input_preset = 5;
pub const ma_aaudio_input_preset_ma_aaudio_input_preset_voice_performance: ma_aaudio_input_preset =
    6;
pub type ma_aaudio_input_preset = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_timer {
    pub counter: ma_int64,
    pub counterD: f64,
}
#[test]
fn bindgen_test_layout_ma_timer() {
    const UNINIT: ::std::mem::MaybeUninit<ma_timer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_timer>(),
        8usize,
        concat!("Size of: ", stringify!(ma_timer))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_timer>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_timer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counter) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_timer),
        "::",
        stringify!(counter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counterD) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_timer),
        "::",
        stringify!(counterD)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_device_id {
    pub wasapi: [wchar_t; 64usize],
    pub dsound: [ma_uint8; 16usize],
    pub winmm: ma_uint32,
    pub alsa: [::std::os::raw::c_char; 256usize],
    pub pulse: [::std::os::raw::c_char; 256usize],
    pub jack: ::std::os::raw::c_int,
    pub coreaudio: [::std::os::raw::c_char; 256usize],
    pub sndio: [::std::os::raw::c_char; 256usize],
    pub audio4: [::std::os::raw::c_char; 256usize],
    pub oss: [::std::os::raw::c_char; 64usize],
    pub aaudio: ma_int32,
    pub opensl: ma_uint32,
    pub webaudio: [::std::os::raw::c_char; 32usize],
    pub custom: ma_device_id__bindgen_ty_1,
    pub nullbackend: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_device_id__bindgen_ty_1 {
    pub i: ::std::os::raw::c_int,
    pub s: [::std::os::raw::c_char; 256usize],
    pub p: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ma_device_id__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device_id__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device_id__bindgen_ty_1>(),
        256usize,
        concat!("Size of: ", stringify!(ma_device_id__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device_id__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_device_id__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_id__bindgen_ty_1),
        "::",
        stringify!(i)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_id__bindgen_ty_1),
        "::",
        stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_id__bindgen_ty_1),
        "::",
        stringify!(p)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_device_id() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device_id> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device_id>(),
        256usize,
        concat!("Size of: ", stringify!(ma_device_id))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device_id>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_device_id))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wasapi) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_id),
        "::",
        stringify!(wasapi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dsound) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_id),
        "::",
        stringify!(dsound)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).winmm) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_id),
        "::",
        stringify!(winmm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alsa) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_id),
        "::",
        stringify!(alsa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pulse) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_id),
        "::",
        stringify!(pulse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jack) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_id),
        "::",
        stringify!(jack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coreaudio) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_id),
        "::",
        stringify!(coreaudio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sndio) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_id),
        "::",
        stringify!(sndio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).audio4) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_id),
        "::",
        stringify!(audio4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oss) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_id),
        "::",
        stringify!(oss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aaudio) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_id),
        "::",
        stringify!(aaudio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opensl) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_id),
        "::",
        stringify!(opensl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).webaudio) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_id),
        "::",
        stringify!(webaudio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_id),
        "::",
        stringify!(custom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nullbackend) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_id),
        "::",
        stringify!(nullbackend)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_device_info {
    pub id: ma_device_id,
    pub name: [::std::os::raw::c_char; 256usize],
    pub isDefault: ma_bool32,
    pub nativeDataFormatCount: ma_uint32,
    pub nativeDataFormats: [ma_device_info__bindgen_ty_1; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_info__bindgen_ty_1 {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub flags: ma_uint32,
}
#[test]
fn bindgen_test_layout_ma_device_info__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device_info__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device_info__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(ma_device_info__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device_info__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ma_device_info__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_info__bindgen_ty_1),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_info__bindgen_ty_1),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_info__bindgen_ty_1),
        "::",
        stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_info__bindgen_ty_1),
        "::",
        stringify!(flags)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_device_info() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device_info>(),
        1544usize,
        concat!("Size of: ", stringify!(ma_device_info))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device_info>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_device_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_info),
        "::",
        stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        256usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_info),
        "::",
        stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isDefault) as usize - ptr as usize },
        512usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_info),
        "::",
        stringify!(isDefault)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nativeDataFormatCount) as usize - ptr as usize },
        516usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_info),
        "::",
        stringify!(nativeDataFormatCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nativeDataFormats) as usize - ptr as usize },
        520usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_info),
        "::",
        stringify!(nativeDataFormats)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_config {
    pub deviceType: ma_device_type,
    pub sampleRate: ma_uint32,
    pub periodSizeInFrames: ma_uint32,
    pub periodSizeInMilliseconds: ma_uint32,
    pub periods: ma_uint32,
    pub performanceProfile: ma_performance_profile,
    pub noPreSilencedOutputBuffer: ma_bool8,
    pub noClip: ma_bool8,
    pub noDisableDenormals: ma_bool8,
    pub noFixedSizedCallback: ma_bool8,
    pub dataCallback: ma_device_data_proc,
    pub notificationCallback: ma_device_notification_proc,
    pub stopCallback: ma_stop_proc,
    pub pUserData: *mut ::std::os::raw::c_void,
    pub resampling: ma_resampler_config,
    pub playback: ma_device_config__bindgen_ty_1,
    pub capture: ma_device_config__bindgen_ty_2,
    pub wasapi: ma_device_config__bindgen_ty_3,
    pub alsa: ma_device_config__bindgen_ty_4,
    pub pulse: ma_device_config__bindgen_ty_5,
    pub coreaudio: ma_device_config__bindgen_ty_6,
    pub opensl: ma_device_config__bindgen_ty_7,
    pub aaudio: ma_device_config__bindgen_ty_8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_config__bindgen_ty_1 {
    pub pDeviceID: *const ma_device_id,
    pub format: ma_format,
    pub channels: ma_uint32,
    pub pChannelMap: *mut ma_channel,
    pub channelMixMode: ma_channel_mix_mode,
    pub calculateLFEFromSpatialChannels: ma_bool32,
    pub shareMode: ma_share_mode,
}
#[test]
fn bindgen_test_layout_ma_device_config__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device_config__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device_config__bindgen_ty_1>(),
        40usize,
        concat!("Size of: ", stringify!(ma_device_config__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device_config__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_device_config__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDeviceID) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_1),
        "::",
        stringify!(pDeviceID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_1),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_1),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pChannelMap) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_1),
        "::",
        stringify!(pChannelMap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelMixMode) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_1),
        "::",
        stringify!(channelMixMode)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).calculateLFEFromSpatialChannels) as usize - ptr as usize
        },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_1),
        "::",
        stringify!(calculateLFEFromSpatialChannels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shareMode) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_1),
        "::",
        stringify!(shareMode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_config__bindgen_ty_2 {
    pub pDeviceID: *const ma_device_id,
    pub format: ma_format,
    pub channels: ma_uint32,
    pub pChannelMap: *mut ma_channel,
    pub channelMixMode: ma_channel_mix_mode,
    pub calculateLFEFromSpatialChannels: ma_bool32,
    pub shareMode: ma_share_mode,
}
#[test]
fn bindgen_test_layout_ma_device_config__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device_config__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device_config__bindgen_ty_2>(),
        40usize,
        concat!("Size of: ", stringify!(ma_device_config__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device_config__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_device_config__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDeviceID) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_2),
        "::",
        stringify!(pDeviceID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_2),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_2),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pChannelMap) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_2),
        "::",
        stringify!(pChannelMap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelMixMode) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_2),
        "::",
        stringify!(channelMixMode)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).calculateLFEFromSpatialChannels) as usize - ptr as usize
        },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_2),
        "::",
        stringify!(calculateLFEFromSpatialChannels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shareMode) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_2),
        "::",
        stringify!(shareMode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_config__bindgen_ty_3 {
    pub usage: ma_wasapi_usage,
    pub noAutoConvertSRC: ma_bool8,
    pub noDefaultQualitySRC: ma_bool8,
    pub noAutoStreamRouting: ma_bool8,
    pub noHardwareOffloading: ma_bool8,
    pub loopbackProcessID: ma_uint32,
    pub loopbackProcessExclude: ma_bool8,
}
#[test]
fn bindgen_test_layout_ma_device_config__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device_config__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device_config__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(ma_device_config__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device_config__bindgen_ty_3>(),
        4usize,
        concat!("Alignment of ", stringify!(ma_device_config__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usage) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_3),
        "::",
        stringify!(usage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noAutoConvertSRC) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_3),
        "::",
        stringify!(noAutoConvertSRC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noDefaultQualitySRC) as usize - ptr as usize },
        5usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_3),
        "::",
        stringify!(noDefaultQualitySRC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noAutoStreamRouting) as usize - ptr as usize },
        6usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_3),
        "::",
        stringify!(noAutoStreamRouting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noHardwareOffloading) as usize - ptr as usize },
        7usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_3),
        "::",
        stringify!(noHardwareOffloading)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loopbackProcessID) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_3),
        "::",
        stringify!(loopbackProcessID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loopbackProcessExclude) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_3),
        "::",
        stringify!(loopbackProcessExclude)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_config__bindgen_ty_4 {
    pub noMMap: ma_bool32,
    pub noAutoFormat: ma_bool32,
    pub noAutoChannels: ma_bool32,
    pub noAutoResample: ma_bool32,
}
#[test]
fn bindgen_test_layout_ma_device_config__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device_config__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device_config__bindgen_ty_4>(),
        16usize,
        concat!("Size of: ", stringify!(ma_device_config__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device_config__bindgen_ty_4>(),
        4usize,
        concat!("Alignment of ", stringify!(ma_device_config__bindgen_ty_4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noMMap) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_4),
        "::",
        stringify!(noMMap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noAutoFormat) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_4),
        "::",
        stringify!(noAutoFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noAutoChannels) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_4),
        "::",
        stringify!(noAutoChannels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noAutoResample) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_4),
        "::",
        stringify!(noAutoResample)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_config__bindgen_ty_5 {
    pub pStreamNamePlayback: *const ::std::os::raw::c_char,
    pub pStreamNameCapture: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ma_device_config__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device_config__bindgen_ty_5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device_config__bindgen_ty_5>(),
        16usize,
        concat!("Size of: ", stringify!(ma_device_config__bindgen_ty_5))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device_config__bindgen_ty_5>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_device_config__bindgen_ty_5))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pStreamNamePlayback) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_5),
        "::",
        stringify!(pStreamNamePlayback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pStreamNameCapture) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_5),
        "::",
        stringify!(pStreamNameCapture)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_config__bindgen_ty_6 {
    pub allowNominalSampleRateChange: ma_bool32,
}
#[test]
fn bindgen_test_layout_ma_device_config__bindgen_ty_6() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device_config__bindgen_ty_6> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device_config__bindgen_ty_6>(),
        4usize,
        concat!("Size of: ", stringify!(ma_device_config__bindgen_ty_6))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device_config__bindgen_ty_6>(),
        4usize,
        concat!("Alignment of ", stringify!(ma_device_config__bindgen_ty_6))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).allowNominalSampleRateChange) as usize - ptr as usize
        },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_6),
        "::",
        stringify!(allowNominalSampleRateChange)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_config__bindgen_ty_7 {
    pub streamType: ma_opensl_stream_type,
    pub recordingPreset: ma_opensl_recording_preset,
}
#[test]
fn bindgen_test_layout_ma_device_config__bindgen_ty_7() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device_config__bindgen_ty_7> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device_config__bindgen_ty_7>(),
        8usize,
        concat!("Size of: ", stringify!(ma_device_config__bindgen_ty_7))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device_config__bindgen_ty_7>(),
        4usize,
        concat!("Alignment of ", stringify!(ma_device_config__bindgen_ty_7))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).streamType) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_7),
        "::",
        stringify!(streamType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recordingPreset) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_7),
        "::",
        stringify!(recordingPreset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_config__bindgen_ty_8 {
    pub usage: ma_aaudio_usage,
    pub contentType: ma_aaudio_content_type,
    pub inputPreset: ma_aaudio_input_preset,
    pub noAutoStartAfterReroute: ma_bool32,
}
#[test]
fn bindgen_test_layout_ma_device_config__bindgen_ty_8() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device_config__bindgen_ty_8> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device_config__bindgen_ty_8>(),
        16usize,
        concat!("Size of: ", stringify!(ma_device_config__bindgen_ty_8))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device_config__bindgen_ty_8>(),
        4usize,
        concat!("Alignment of ", stringify!(ma_device_config__bindgen_ty_8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usage) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_8),
        "::",
        stringify!(usage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contentType) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_8),
        "::",
        stringify!(contentType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputPreset) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_8),
        "::",
        stringify!(inputPreset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noAutoStartAfterReroute) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config__bindgen_ty_8),
        "::",
        stringify!(noAutoStartAfterReroute)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_device_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device_config>(),
        272usize,
        concat!("Size of: ", stringify!(ma_device_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_device_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceType) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config),
        "::",
        stringify!(deviceType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config),
        "::",
        stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).periodSizeInFrames) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config),
        "::",
        stringify!(periodSizeInFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).periodSizeInMilliseconds) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config),
        "::",
        stringify!(periodSizeInMilliseconds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).periods) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config),
        "::",
        stringify!(periods)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).performanceProfile) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config),
        "::",
        stringify!(performanceProfile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noPreSilencedOutputBuffer) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config),
        "::",
        stringify!(noPreSilencedOutputBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noClip) as usize - ptr as usize },
        25usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config),
        "::",
        stringify!(noClip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noDisableDenormals) as usize - ptr as usize },
        26usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config),
        "::",
        stringify!(noDisableDenormals)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noFixedSizedCallback) as usize - ptr as usize },
        27usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config),
        "::",
        stringify!(noFixedSizedCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataCallback) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config),
        "::",
        stringify!(dataCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationCallback) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config),
        "::",
        stringify!(notificationCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stopCallback) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config),
        "::",
        stringify!(stopCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pUserData) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config),
        "::",
        stringify!(pUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resampling) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config),
        "::",
        stringify!(resampling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).playback) as usize - ptr as usize },
        112usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config),
        "::",
        stringify!(playback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capture) as usize - ptr as usize },
        152usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config),
        "::",
        stringify!(capture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wasapi) as usize - ptr as usize },
        192usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config),
        "::",
        stringify!(wasapi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alsa) as usize - ptr as usize },
        208usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config),
        "::",
        stringify!(alsa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pulse) as usize - ptr as usize },
        224usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config),
        "::",
        stringify!(pulse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coreaudio) as usize - ptr as usize },
        240usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config),
        "::",
        stringify!(coreaudio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opensl) as usize - ptr as usize },
        244usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config),
        "::",
        stringify!(opensl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aaudio) as usize - ptr as usize },
        252usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_config),
        "::",
        stringify!(aaudio)
        )
    );
}
pub type ma_enum_devices_callback_proc = ::std::option::Option<
    unsafe extern "C" fn(
        pContext: *mut ma_context,
        deviceType: ma_device_type,
        pInfo: *const ma_device_info,
        pUserData: *mut ::std::os::raw::c_void,
    ) -> ma_bool32,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_descriptor {
    pub pDeviceID: *const ma_device_id,
    pub shareMode: ma_share_mode,
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub channelMap: [ma_channel; 254usize],
    pub periodSizeInFrames: ma_uint32,
    pub periodSizeInMilliseconds: ma_uint32,
    pub periodCount: ma_uint32,
}
#[test]
fn bindgen_test_layout_ma_device_descriptor() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device_descriptor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device_descriptor>(),
        296usize,
        concat!("Size of: ", stringify!(ma_device_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device_descriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_device_descriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDeviceID) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_descriptor),
        "::",
        stringify!(pDeviceID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shareMode) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_descriptor),
        "::",
        stringify!(shareMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_descriptor),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_descriptor),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_descriptor),
        "::",
        stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelMap) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_descriptor),
        "::",
        stringify!(channelMap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).periodSizeInFrames) as usize - ptr as usize },
        280usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_descriptor),
        "::",
        stringify!(periodSizeInFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).periodSizeInMilliseconds) as usize - ptr as usize },
        284usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_descriptor),
        "::",
        stringify!(periodSizeInMilliseconds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).periodCount) as usize - ptr as usize },
        288usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device_descriptor),
        "::",
        stringify!(periodCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_backend_callbacks {
    pub onContextInit: ::std::option::Option<
        unsafe extern "C" fn(
            pContext: *mut ma_context,
            pConfig: *const ma_context_config,
            pCallbacks: *mut ma_backend_callbacks,
        ) -> ma_result,
    >,
    pub onContextUninit:
    ::std::option::Option<unsafe extern "C" fn(pContext: *mut ma_context) -> ma_result>,
    pub onContextEnumerateDevices: ::std::option::Option<
        unsafe extern "C" fn(
            pContext: *mut ma_context,
            callback: ma_enum_devices_callback_proc,
            pUserData: *mut ::std::os::raw::c_void,
        ) -> ma_result,
    >,
    pub onContextGetDeviceInfo: ::std::option::Option<
        unsafe extern "C" fn(
            pContext: *mut ma_context,
            deviceType: ma_device_type,
            pDeviceID: *const ma_device_id,
            pDeviceInfo: *mut ma_device_info,
        ) -> ma_result,
    >,
    pub onDeviceInit: ::std::option::Option<
        unsafe extern "C" fn(
            pDevice: *mut ma_device,
            pConfig: *const ma_device_config,
            pDescriptorPlayback: *mut ma_device_descriptor,
            pDescriptorCapture: *mut ma_device_descriptor,
        ) -> ma_result,
    >,
    pub onDeviceUninit:
    ::std::option::Option<unsafe extern "C" fn(pDevice: *mut ma_device) -> ma_result>,
    pub onDeviceStart:
    ::std::option::Option<unsafe extern "C" fn(pDevice: *mut ma_device) -> ma_result>,
    pub onDeviceStop:
    ::std::option::Option<unsafe extern "C" fn(pDevice: *mut ma_device) -> ma_result>,
    pub onDeviceRead: ::std::option::Option<
        unsafe extern "C" fn(
            pDevice: *mut ma_device,
            pFrames: *mut ::std::os::raw::c_void,
            frameCount: ma_uint32,
            pFramesRead: *mut ma_uint32,
        ) -> ma_result,
    >,
    pub onDeviceWrite: ::std::option::Option<
        unsafe extern "C" fn(
            pDevice: *mut ma_device,
            pFrames: *const ::std::os::raw::c_void,
            frameCount: ma_uint32,
            pFramesWritten: *mut ma_uint32,
        ) -> ma_result,
    >,
    pub onDeviceDataLoop:
    ::std::option::Option<unsafe extern "C" fn(pDevice: *mut ma_device) -> ma_result>,
    pub onDeviceDataLoopWakeup:
    ::std::option::Option<unsafe extern "C" fn(pDevice: *mut ma_device) -> ma_result>,
    pub onDeviceGetInfo: ::std::option::Option<
        unsafe extern "C" fn(
            pDevice: *mut ma_device,
            type_: ma_device_type,
            pDeviceInfo: *mut ma_device_info,
        ) -> ma_result,
    >,
}
#[test]
fn bindgen_test_layout_ma_backend_callbacks() {
    const UNINIT: ::std::mem::MaybeUninit<ma_backend_callbacks> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_backend_callbacks>(),
        104usize,
        concat!("Size of: ", stringify!(ma_backend_callbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_backend_callbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_backend_callbacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onContextInit) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_backend_callbacks),
        "::",
        stringify!(onContextInit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onContextUninit) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_backend_callbacks),
        "::",
        stringify!(onContextUninit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onContextEnumerateDevices) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_backend_callbacks),
        "::",
        stringify!(onContextEnumerateDevices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onContextGetDeviceInfo) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_backend_callbacks),
        "::",
        stringify!(onContextGetDeviceInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onDeviceInit) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_backend_callbacks),
        "::",
        stringify!(onDeviceInit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onDeviceUninit) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_backend_callbacks),
        "::",
        stringify!(onDeviceUninit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onDeviceStart) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_backend_callbacks),
        "::",
        stringify!(onDeviceStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onDeviceStop) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_backend_callbacks),
        "::",
        stringify!(onDeviceStop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onDeviceRead) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_backend_callbacks),
        "::",
        stringify!(onDeviceRead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onDeviceWrite) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_backend_callbacks),
        "::",
        stringify!(onDeviceWrite)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onDeviceDataLoop) as usize - ptr as usize },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_backend_callbacks),
        "::",
        stringify!(onDeviceDataLoop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onDeviceDataLoopWakeup) as usize - ptr as usize },
        88usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_backend_callbacks),
        "::",
        stringify!(onDeviceDataLoopWakeup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onDeviceGetInfo) as usize - ptr as usize },
        96usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_backend_callbacks),
        "::",
        stringify!(onDeviceGetInfo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context_config {
    pub pLog: *mut ma_log,
    pub threadPriority: ma_thread_priority,
    pub threadStackSize: usize,
    pub pUserData: *mut ::std::os::raw::c_void,
    pub allocationCallbacks: ma_allocation_callbacks,
    pub alsa: ma_context_config__bindgen_ty_1,
    pub pulse: ma_context_config__bindgen_ty_2,
    pub coreaudio: ma_context_config__bindgen_ty_3,
    pub jack: ma_context_config__bindgen_ty_4,
    pub custom: ma_backend_callbacks,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context_config__bindgen_ty_1 {
    pub useVerboseDeviceEnumeration: ma_bool32,
}
#[test]
fn bindgen_test_layout_ma_context_config__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_context_config__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_context_config__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(ma_context_config__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_context_config__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ma_context_config__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).useVerboseDeviceEnumeration) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_config__bindgen_ty_1),
        "::",
        stringify!(useVerboseDeviceEnumeration)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context_config__bindgen_ty_2 {
    pub pApplicationName: *const ::std::os::raw::c_char,
    pub pServerName: *const ::std::os::raw::c_char,
    pub tryAutoSpawn: ma_bool32,
}
#[test]
fn bindgen_test_layout_ma_context_config__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<ma_context_config__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_context_config__bindgen_ty_2>(),
        24usize,
        concat!("Size of: ", stringify!(ma_context_config__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_context_config__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_context_config__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pApplicationName) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_config__bindgen_ty_2),
        "::",
        stringify!(pApplicationName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pServerName) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_config__bindgen_ty_2),
        "::",
        stringify!(pServerName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tryAutoSpawn) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_config__bindgen_ty_2),
        "::",
        stringify!(tryAutoSpawn)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context_config__bindgen_ty_3 {
    pub sessionCategory: ma_ios_session_category,
    pub sessionCategoryOptions: ma_uint32,
    pub noAudioSessionActivate: ma_bool32,
    pub noAudioSessionDeactivate: ma_bool32,
}
#[test]
fn bindgen_test_layout_ma_context_config__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<ma_context_config__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_context_config__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(ma_context_config__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_context_config__bindgen_ty_3>(),
        4usize,
        concat!("Alignment of ", stringify!(ma_context_config__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sessionCategory) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_config__bindgen_ty_3),
        "::",
        stringify!(sessionCategory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sessionCategoryOptions) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_config__bindgen_ty_3),
        "::",
        stringify!(sessionCategoryOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noAudioSessionActivate) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_config__bindgen_ty_3),
        "::",
        stringify!(noAudioSessionActivate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noAudioSessionDeactivate) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_config__bindgen_ty_3),
        "::",
        stringify!(noAudioSessionDeactivate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context_config__bindgen_ty_4 {
    pub pClientName: *const ::std::os::raw::c_char,
    pub tryStartServer: ma_bool32,
}
#[test]
fn bindgen_test_layout_ma_context_config__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<ma_context_config__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_context_config__bindgen_ty_4>(),
        16usize,
        concat!("Size of: ", stringify!(ma_context_config__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_context_config__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_context_config__bindgen_ty_4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pClientName) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_config__bindgen_ty_4),
        "::",
        stringify!(pClientName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tryStartServer) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_config__bindgen_ty_4),
        "::",
        stringify!(tryStartServer)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_context_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_context_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_context_config>(),
        232usize,
        concat!("Size of: ", stringify!(ma_context_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_context_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_context_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pLog) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_config),
        "::",
        stringify!(pLog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).threadPriority) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_config),
        "::",
        stringify!(threadPriority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).threadStackSize) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_config),
        "::",
        stringify!(threadStackSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pUserData) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_config),
        "::",
        stringify!(pUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocationCallbacks) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_config),
        "::",
        stringify!(allocationCallbacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alsa) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_config),
        "::",
        stringify!(alsa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pulse) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_config),
        "::",
        stringify!(pulse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coreaudio) as usize - ptr as usize },
        96usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_config),
        "::",
        stringify!(coreaudio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jack) as usize - ptr as usize },
        112usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_config),
        "::",
        stringify!(jack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom) as usize - ptr as usize },
        128usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_config),
        "::",
        stringify!(custom)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_context_command__wasapi {
    pub code: ::std::os::raw::c_int,
    pub pEvent: *mut ma_event,
    pub data: ma_context_command__wasapi__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_context_command__wasapi__bindgen_ty_1 {
    pub quit: ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_1,
    pub createAudioClient: ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_2,
    pub releaseAudioClient: ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_1 {
    pub _unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
        "Size of: ",
        stringify!(ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
        "Alignment of ",
        stringify!(ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_1),
        "::",
        stringify!(_unused)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_2 {
    pub deviceType: ma_device_type,
    pub pAudioClient: *mut ::std::os::raw::c_void,
    pub ppAudioClientService: *mut *mut ::std::os::raw::c_void,
    pub pResult: *mut ma_result,
}
#[test]
fn bindgen_test_layout_ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_2>(),
        32usize,
        concat!(
        "Size of: ",
        stringify!(ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceType) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_2),
        "::",
        stringify!(deviceType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pAudioClient) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_2),
        "::",
        stringify!(pAudioClient)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppAudioClientService) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_2),
        "::",
        stringify!(ppAudioClientService)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pResult) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_2),
        "::",
        stringify!(pResult)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_3 {
    pub pDevice: *mut ma_device,
    pub deviceType: ma_device_type,
}
#[test]
fn bindgen_test_layout_ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
        "Size of: ",
        stringify!(ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDevice) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_3),
        "::",
        stringify!(pDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceType) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_3),
        "::",
        stringify!(deviceType)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_context_command__wasapi__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_context_command__wasapi__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_context_command__wasapi__bindgen_ty_1>(),
        32usize,
        concat!(
        "Size of: ",
        stringify!(ma_context_command__wasapi__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_context_command__wasapi__bindgen_ty_1>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_context_command__wasapi__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quit) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_command__wasapi__bindgen_ty_1),
        "::",
        stringify!(quit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).createAudioClient) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_command__wasapi__bindgen_ty_1),
        "::",
        stringify!(createAudioClient)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).releaseAudioClient) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_command__wasapi__bindgen_ty_1),
        "::",
        stringify!(releaseAudioClient)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_context_command__wasapi() {
    const UNINIT: ::std::mem::MaybeUninit<ma_context_command__wasapi> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_context_command__wasapi>(),
        48usize,
        concat!("Size of: ", stringify!(ma_context_command__wasapi))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_context_command__wasapi>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_context_command__wasapi))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_command__wasapi),
        "::",
        stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pEvent) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_command__wasapi),
        "::",
        stringify!(pEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context_command__wasapi),
        "::",
        stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_context {
    pub callbacks: ma_backend_callbacks,
    pub backend: ma_backend,
    pub pLog: *mut ma_log,
    pub log: ma_log,
    pub threadPriority: ma_thread_priority,
    pub threadStackSize: usize,
    pub pUserData: *mut ::std::os::raw::c_void,
    pub allocationCallbacks: ma_allocation_callbacks,
    pub deviceEnumLock: ma_mutex,
    pub deviceInfoLock: ma_mutex,
    pub deviceInfoCapacity: ma_uint32,
    pub playbackDeviceInfoCount: ma_uint32,
    pub captureDeviceInfoCount: ma_uint32,
    pub pDeviceInfos: *mut ma_device_info,
    pub __bindgen_anon_1: ma_context__bindgen_ty_1,
    pub __bindgen_anon_2: ma_context__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_context__bindgen_ty_1 {
    pub wasapi: ma_context__bindgen_ty_1__bindgen_ty_1,
    pub dsound: ma_context__bindgen_ty_1__bindgen_ty_2,
    pub winmm: ma_context__bindgen_ty_1__bindgen_ty_3,
    pub jack: ma_context__bindgen_ty_1__bindgen_ty_4,
    pub null_backend: ma_context__bindgen_ty_1__bindgen_ty_5,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_context__bindgen_ty_1__bindgen_ty_1 {
    pub commandThread: ma_thread,
    pub commandLock: ma_mutex,
    pub commandSem: ma_semaphore,
    pub commandIndex: ma_uint32,
    pub commandCount: ma_uint32,
    pub commands: [ma_context_command__wasapi; 4usize],
    pub hAvrt: ma_handle,
    pub AvSetMmThreadCharacteristicsW: ma_proc,
    pub AvRevertMmThreadcharacteristics: ma_proc,
    pub hMMDevapi: ma_handle,
    pub ActivateAudioInterfaceAsync: ma_proc,
}
#[test]
fn bindgen_test_layout_ma_context__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_context__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_context__bindgen_ty_1__bindgen_ty_1>(),
        264usize,
        concat!(
        "Size of: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_context__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commandThread) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_1),
        "::",
        stringify!(commandThread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commandLock) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_1),
        "::",
        stringify!(commandLock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commandSem) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_1),
        "::",
        stringify!(commandSem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commandIndex) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_1),
        "::",
        stringify!(commandIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commandCount) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_1),
        "::",
        stringify!(commandCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commands) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_1),
        "::",
        stringify!(commands)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hAvrt) as usize - ptr as usize },
        224usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_1),
        "::",
        stringify!(hAvrt)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).AvSetMmThreadCharacteristicsW) as usize - ptr as usize
        },
        232usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_1),
        "::",
        stringify!(AvSetMmThreadCharacteristicsW)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).AvRevertMmThreadcharacteristics) as usize - ptr as usize
        },
        240usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_1),
        "::",
        stringify!(AvRevertMmThreadcharacteristics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hMMDevapi) as usize - ptr as usize },
        248usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_1),
        "::",
        stringify!(hMMDevapi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ActivateAudioInterfaceAsync) as usize - ptr as usize },
        256usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_1),
        "::",
        stringify!(ActivateAudioInterfaceAsync)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context__bindgen_ty_1__bindgen_ty_2 {
    pub hDSoundDLL: ma_handle,
    pub DirectSoundCreate: ma_proc,
    pub DirectSoundEnumerateA: ma_proc,
    pub DirectSoundCaptureCreate: ma_proc,
    pub DirectSoundCaptureEnumerateA: ma_proc,
}
#[test]
fn bindgen_test_layout_ma_context__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<ma_context__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_context__bindgen_ty_1__bindgen_ty_2>(),
        40usize,
        concat!(
        "Size of: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_context__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hDSoundDLL) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_2),
        "::",
        stringify!(hDSoundDLL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DirectSoundCreate) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_2),
        "::",
        stringify!(DirectSoundCreate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DirectSoundEnumerateA) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_2),
        "::",
        stringify!(DirectSoundEnumerateA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DirectSoundCaptureCreate) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_2),
        "::",
        stringify!(DirectSoundCaptureCreate)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).DirectSoundCaptureEnumerateA) as usize - ptr as usize
        },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_2),
        "::",
        stringify!(DirectSoundCaptureEnumerateA)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context__bindgen_ty_1__bindgen_ty_3 {
    pub hWinMM: ma_handle,
    pub waveOutGetNumDevs: ma_proc,
    pub waveOutGetDevCapsA: ma_proc,
    pub waveOutOpen: ma_proc,
    pub waveOutClose: ma_proc,
    pub waveOutPrepareHeader: ma_proc,
    pub waveOutUnprepareHeader: ma_proc,
    pub waveOutWrite: ma_proc,
    pub waveOutReset: ma_proc,
    pub waveInGetNumDevs: ma_proc,
    pub waveInGetDevCapsA: ma_proc,
    pub waveInOpen: ma_proc,
    pub waveInClose: ma_proc,
    pub waveInPrepareHeader: ma_proc,
    pub waveInUnprepareHeader: ma_proc,
    pub waveInAddBuffer: ma_proc,
    pub waveInStart: ma_proc,
    pub waveInReset: ma_proc,
}
#[test]
fn bindgen_test_layout_ma_context__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<ma_context__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_context__bindgen_ty_1__bindgen_ty_3>(),
        144usize,
        concat!(
        "Size of: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_context__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hWinMM) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_3),
        "::",
        stringify!(hWinMM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waveOutGetNumDevs) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_3),
        "::",
        stringify!(waveOutGetNumDevs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waveOutGetDevCapsA) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_3),
        "::",
        stringify!(waveOutGetDevCapsA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waveOutOpen) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_3),
        "::",
        stringify!(waveOutOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waveOutClose) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_3),
        "::",
        stringify!(waveOutClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waveOutPrepareHeader) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_3),
        "::",
        stringify!(waveOutPrepareHeader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waveOutUnprepareHeader) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_3),
        "::",
        stringify!(waveOutUnprepareHeader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waveOutWrite) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_3),
        "::",
        stringify!(waveOutWrite)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waveOutReset) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_3),
        "::",
        stringify!(waveOutReset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waveInGetNumDevs) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_3),
        "::",
        stringify!(waveInGetNumDevs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waveInGetDevCapsA) as usize - ptr as usize },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_3),
        "::",
        stringify!(waveInGetDevCapsA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waveInOpen) as usize - ptr as usize },
        88usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_3),
        "::",
        stringify!(waveInOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waveInClose) as usize - ptr as usize },
        96usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_3),
        "::",
        stringify!(waveInClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waveInPrepareHeader) as usize - ptr as usize },
        104usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_3),
        "::",
        stringify!(waveInPrepareHeader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waveInUnprepareHeader) as usize - ptr as usize },
        112usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_3),
        "::",
        stringify!(waveInUnprepareHeader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waveInAddBuffer) as usize - ptr as usize },
        120usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_3),
        "::",
        stringify!(waveInAddBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waveInStart) as usize - ptr as usize },
        128usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_3),
        "::",
        stringify!(waveInStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waveInReset) as usize - ptr as usize },
        136usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_3),
        "::",
        stringify!(waveInReset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context__bindgen_ty_1__bindgen_ty_4 {
    pub jackSO: ma_handle,
    pub jack_client_open: ma_proc,
    pub jack_client_close: ma_proc,
    pub jack_client_name_size: ma_proc,
    pub jack_set_process_callback: ma_proc,
    pub jack_set_buffer_size_callback: ma_proc,
    pub jack_on_shutdown: ma_proc,
    pub jack_get_sample_rate: ma_proc,
    pub jack_get_buffer_size: ma_proc,
    pub jack_get_ports: ma_proc,
    pub jack_activate: ma_proc,
    pub jack_deactivate: ma_proc,
    pub jack_connect: ma_proc,
    pub jack_port_register: ma_proc,
    pub jack_port_name: ma_proc,
    pub jack_port_get_buffer: ma_proc,
    pub jack_free: ma_proc,
    pub pClientName: *mut ::std::os::raw::c_char,
    pub tryStartServer: ma_bool32,
}
#[test]
fn bindgen_test_layout_ma_context__bindgen_ty_1__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<ma_context__bindgen_ty_1__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_context__bindgen_ty_1__bindgen_ty_4>(),
        152usize,
        concat!(
        "Size of: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_context__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jackSO) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_4),
        "::",
        stringify!(jackSO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jack_client_open) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_4),
        "::",
        stringify!(jack_client_open)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jack_client_close) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_4),
        "::",
        stringify!(jack_client_close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jack_client_name_size) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_4),
        "::",
        stringify!(jack_client_name_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jack_set_process_callback) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_4),
        "::",
        stringify!(jack_set_process_callback)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).jack_set_buffer_size_callback) as usize - ptr as usize
        },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_4),
        "::",
        stringify!(jack_set_buffer_size_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jack_on_shutdown) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_4),
        "::",
        stringify!(jack_on_shutdown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jack_get_sample_rate) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_4),
        "::",
        stringify!(jack_get_sample_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jack_get_buffer_size) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_4),
        "::",
        stringify!(jack_get_buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jack_get_ports) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_4),
        "::",
        stringify!(jack_get_ports)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jack_activate) as usize - ptr as usize },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_4),
        "::",
        stringify!(jack_activate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jack_deactivate) as usize - ptr as usize },
        88usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_4),
        "::",
        stringify!(jack_deactivate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jack_connect) as usize - ptr as usize },
        96usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_4),
        "::",
        stringify!(jack_connect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jack_port_register) as usize - ptr as usize },
        104usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_4),
        "::",
        stringify!(jack_port_register)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jack_port_name) as usize - ptr as usize },
        112usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_4),
        "::",
        stringify!(jack_port_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jack_port_get_buffer) as usize - ptr as usize },
        120usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_4),
        "::",
        stringify!(jack_port_get_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jack_free) as usize - ptr as usize },
        128usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_4),
        "::",
        stringify!(jack_free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pClientName) as usize - ptr as usize },
        136usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_4),
        "::",
        stringify!(pClientName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tryStartServer) as usize - ptr as usize },
        144usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_4),
        "::",
        stringify!(tryStartServer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context__bindgen_ty_1__bindgen_ty_5 {
    pub _unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ma_context__bindgen_ty_1__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<ma_context__bindgen_ty_1__bindgen_ty_5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_context__bindgen_ty_1__bindgen_ty_5>(),
        4usize,
        concat!(
        "Size of: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_context__bindgen_ty_1__bindgen_ty_5>(),
        4usize,
        concat!(
        "Alignment of ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1__bindgen_ty_5),
        "::",
        stringify!(_unused)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_context__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_context__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_context__bindgen_ty_1>(),
        264usize,
        concat!("Size of: ", stringify!(ma_context__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_context__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_context__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wasapi) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1),
        "::",
        stringify!(wasapi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dsound) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1),
        "::",
        stringify!(dsound)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).winmm) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1),
        "::",
        stringify!(winmm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jack) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1),
        "::",
        stringify!(jack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).null_backend) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_1),
        "::",
        stringify!(null_backend)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_context__bindgen_ty_2 {
    pub win32: ma_context__bindgen_ty_2__bindgen_ty_1,
    pub _unused: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context__bindgen_ty_2__bindgen_ty_1 {
    pub hOle32DLL: ma_handle,
    pub CoInitializeEx: ma_proc,
    pub CoUninitialize: ma_proc,
    pub CoCreateInstance: ma_proc,
    pub CoTaskMemFree: ma_proc,
    pub PropVariantClear: ma_proc,
    pub StringFromGUID2: ma_proc,
    pub hUser32DLL: ma_handle,
    pub GetForegroundWindow: ma_proc,
    pub GetDesktopWindow: ma_proc,
    pub hAdvapi32DLL: ma_handle,
    pub RegOpenKeyExA: ma_proc,
    pub RegCloseKey: ma_proc,
    pub RegQueryValueExA: ma_proc,
}
#[test]
fn bindgen_test_layout_ma_context__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_context__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_context__bindgen_ty_2__bindgen_ty_1>(),
        112usize,
        concat!(
        "Size of: ",
        stringify!(ma_context__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_context__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_context__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hOle32DLL) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_2__bindgen_ty_1),
        "::",
        stringify!(hOle32DLL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CoInitializeEx) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_2__bindgen_ty_1),
        "::",
        stringify!(CoInitializeEx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CoUninitialize) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_2__bindgen_ty_1),
        "::",
        stringify!(CoUninitialize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CoCreateInstance) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_2__bindgen_ty_1),
        "::",
        stringify!(CoCreateInstance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CoTaskMemFree) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_2__bindgen_ty_1),
        "::",
        stringify!(CoTaskMemFree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PropVariantClear) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_2__bindgen_ty_1),
        "::",
        stringify!(PropVariantClear)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StringFromGUID2) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_2__bindgen_ty_1),
        "::",
        stringify!(StringFromGUID2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hUser32DLL) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_2__bindgen_ty_1),
        "::",
        stringify!(hUser32DLL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetForegroundWindow) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_2__bindgen_ty_1),
        "::",
        stringify!(GetForegroundWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDesktopWindow) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_2__bindgen_ty_1),
        "::",
        stringify!(GetDesktopWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hAdvapi32DLL) as usize - ptr as usize },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_2__bindgen_ty_1),
        "::",
        stringify!(hAdvapi32DLL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RegOpenKeyExA) as usize - ptr as usize },
        88usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_2__bindgen_ty_1),
        "::",
        stringify!(RegOpenKeyExA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RegCloseKey) as usize - ptr as usize },
        96usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_2__bindgen_ty_1),
        "::",
        stringify!(RegCloseKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RegQueryValueExA) as usize - ptr as usize },
        104usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_2__bindgen_ty_1),
        "::",
        stringify!(RegQueryValueExA)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_context__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<ma_context__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_context__bindgen_ty_2>(),
        112usize,
        concat!("Size of: ", stringify!(ma_context__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_context__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_context__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).win32) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_2),
        "::",
        stringify!(win32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context__bindgen_ty_2),
        "::",
        stringify!(_unused)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_context() {
    const UNINIT: ::std::mem::MaybeUninit<ma_context> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_context>(),
        704usize,
        concat!("Size of: ", stringify!(ma_context))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_context>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_context))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callbacks) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context),
        "::",
        stringify!(callbacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backend) as usize - ptr as usize },
        104usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context),
        "::",
        stringify!(backend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pLog) as usize - ptr as usize },
        112usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context),
        "::",
        stringify!(pLog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize },
        120usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context),
        "::",
        stringify!(log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).threadPriority) as usize - ptr as usize },
        232usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context),
        "::",
        stringify!(threadPriority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).threadStackSize) as usize - ptr as usize },
        240usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context),
        "::",
        stringify!(threadStackSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pUserData) as usize - ptr as usize },
        248usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context),
        "::",
        stringify!(pUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocationCallbacks) as usize - ptr as usize },
        256usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context),
        "::",
        stringify!(allocationCallbacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceEnumLock) as usize - ptr as usize },
        288usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context),
        "::",
        stringify!(deviceEnumLock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceInfoLock) as usize - ptr as usize },
        296usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context),
        "::",
        stringify!(deviceInfoLock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceInfoCapacity) as usize - ptr as usize },
        304usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context),
        "::",
        stringify!(deviceInfoCapacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).playbackDeviceInfoCount) as usize - ptr as usize },
        308usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context),
        "::",
        stringify!(playbackDeviceInfoCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).captureDeviceInfoCount) as usize - ptr as usize },
        312usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context),
        "::",
        stringify!(captureDeviceInfoCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDeviceInfos) as usize - ptr as usize },
        320usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_context),
        "::",
        stringify!(pDeviceInfos)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_device {
    pub pContext: *mut ma_context,
    pub type_: ma_device_type,
    pub sampleRate: ma_uint32,
    pub state: ma_device_state,
    pub onData: ma_device_data_proc,
    pub onNotification: ma_device_notification_proc,
    pub onStop: ma_stop_proc,
    pub pUserData: *mut ::std::os::raw::c_void,
    pub startStopLock: ma_mutex,
    pub wakeupEvent: ma_event,
    pub startEvent: ma_event,
    pub stopEvent: ma_event,
    pub thread: ma_thread,
    pub workResult: ma_result,
    pub isOwnerOfContext: ma_bool8,
    pub noPreSilencedOutputBuffer: ma_bool8,
    pub noClip: ma_bool8,
    pub noDisableDenormals: ma_bool8,
    pub noFixedSizedCallback: ma_bool8,
    pub masterVolumeFactor: f32,
    pub duplexRB: ma_duplex_rb,
    pub resampling: ma_device__bindgen_ty_1,
    pub playback: ma_device__bindgen_ty_2,
    pub capture: ma_device__bindgen_ty_3,
    pub __bindgen_anon_1: ma_device__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device__bindgen_ty_1 {
    pub algorithm: ma_resample_algorithm,
    pub pBackendVTable: *mut ma_resampling_backend_vtable,
    pub pBackendUserData: *mut ::std::os::raw::c_void,
    pub linear: ma_device__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device__bindgen_ty_1__bindgen_ty_1 {
    pub lpfOrder: ma_uint32,
}
#[test]
fn bindgen_test_layout_ma_device__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
        "Size of: ",
        stringify!(ma_device__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
        "Alignment of ",
        stringify!(ma_device__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lpfOrder) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_1__bindgen_ty_1),
        "::",
        stringify!(lpfOrder)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_device__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(ma_device__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_device__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).algorithm) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_1),
        "::",
        stringify!(algorithm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pBackendVTable) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_1),
        "::",
        stringify!(pBackendVTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pBackendUserData) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_1),
        "::",
        stringify!(pBackendUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linear) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_1),
        "::",
        stringify!(linear)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_device__bindgen_ty_2 {
    pub pID: *mut ma_device_id,
    pub id: ma_device_id,
    pub name: [::std::os::raw::c_char; 256usize],
    pub shareMode: ma_share_mode,
    pub format: ma_format,
    pub channels: ma_uint32,
    pub channelMap: [ma_channel; 254usize],
    pub internalFormat: ma_format,
    pub internalChannels: ma_uint32,
    pub internalSampleRate: ma_uint32,
    pub internalChannelMap: [ma_channel; 254usize],
    pub internalPeriodSizeInFrames: ma_uint32,
    pub internalPeriods: ma_uint32,
    pub channelMixMode: ma_channel_mix_mode,
    pub calculateLFEFromSpatialChannels: ma_bool32,
    pub converter: ma_data_converter,
    pub pIntermediaryBuffer: *mut ::std::os::raw::c_void,
    pub intermediaryBufferCap: ma_uint32,
    pub intermediaryBufferLen: ma_uint32,
    pub pInputCache: *mut ::std::os::raw::c_void,
    pub inputCacheCap: ma_uint64,
    pub inputCacheConsumed: ma_uint64,
    pub inputCacheRemaining: ma_uint64,
}
#[test]
fn bindgen_test_layout_ma_device__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device__bindgen_ty_2>(),
        1432usize,
        concat!("Size of: ", stringify!(ma_device__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_device__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pID) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_2),
        "::",
        stringify!(pID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_2),
        "::",
        stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        264usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_2),
        "::",
        stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shareMode) as usize - ptr as usize },
        520usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_2),
        "::",
        stringify!(shareMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        524usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_2),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        528usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_2),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelMap) as usize - ptr as usize },
        532usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_2),
        "::",
        stringify!(channelMap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internalFormat) as usize - ptr as usize },
        788usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_2),
        "::",
        stringify!(internalFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internalChannels) as usize - ptr as usize },
        792usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_2),
        "::",
        stringify!(internalChannels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internalSampleRate) as usize - ptr as usize },
        796usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_2),
        "::",
        stringify!(internalSampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internalChannelMap) as usize - ptr as usize },
        800usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_2),
        "::",
        stringify!(internalChannelMap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internalPeriodSizeInFrames) as usize - ptr as usize },
        1056usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_2),
        "::",
        stringify!(internalPeriodSizeInFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internalPeriods) as usize - ptr as usize },
        1060usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_2),
        "::",
        stringify!(internalPeriods)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelMixMode) as usize - ptr as usize },
        1064usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_2),
        "::",
        stringify!(channelMixMode)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).calculateLFEFromSpatialChannels) as usize - ptr as usize
        },
        1068usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_2),
        "::",
        stringify!(calculateLFEFromSpatialChannels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).converter) as usize - ptr as usize },
        1072usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_2),
        "::",
        stringify!(converter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pIntermediaryBuffer) as usize - ptr as usize },
        1384usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_2),
        "::",
        stringify!(pIntermediaryBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intermediaryBufferCap) as usize - ptr as usize },
        1392usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_2),
        "::",
        stringify!(intermediaryBufferCap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intermediaryBufferLen) as usize - ptr as usize },
        1396usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_2),
        "::",
        stringify!(intermediaryBufferLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInputCache) as usize - ptr as usize },
        1400usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_2),
        "::",
        stringify!(pInputCache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputCacheCap) as usize - ptr as usize },
        1408usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_2),
        "::",
        stringify!(inputCacheCap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputCacheConsumed) as usize - ptr as usize },
        1416usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_2),
        "::",
        stringify!(inputCacheConsumed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputCacheRemaining) as usize - ptr as usize },
        1424usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_2),
        "::",
        stringify!(inputCacheRemaining)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_device__bindgen_ty_3 {
    pub pID: *mut ma_device_id,
    pub id: ma_device_id,
    pub name: [::std::os::raw::c_char; 256usize],
    pub shareMode: ma_share_mode,
    pub format: ma_format,
    pub channels: ma_uint32,
    pub channelMap: [ma_channel; 254usize],
    pub internalFormat: ma_format,
    pub internalChannels: ma_uint32,
    pub internalSampleRate: ma_uint32,
    pub internalChannelMap: [ma_channel; 254usize],
    pub internalPeriodSizeInFrames: ma_uint32,
    pub internalPeriods: ma_uint32,
    pub channelMixMode: ma_channel_mix_mode,
    pub calculateLFEFromSpatialChannels: ma_bool32,
    pub converter: ma_data_converter,
    pub pIntermediaryBuffer: *mut ::std::os::raw::c_void,
    pub intermediaryBufferCap: ma_uint32,
    pub intermediaryBufferLen: ma_uint32,
}
#[test]
fn bindgen_test_layout_ma_device__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device__bindgen_ty_3>(),
        1400usize,
        concat!("Size of: ", stringify!(ma_device__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_device__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pID) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_3),
        "::",
        stringify!(pID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_3),
        "::",
        stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        264usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_3),
        "::",
        stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shareMode) as usize - ptr as usize },
        520usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_3),
        "::",
        stringify!(shareMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        524usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_3),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        528usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_3),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelMap) as usize - ptr as usize },
        532usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_3),
        "::",
        stringify!(channelMap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internalFormat) as usize - ptr as usize },
        788usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_3),
        "::",
        stringify!(internalFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internalChannels) as usize - ptr as usize },
        792usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_3),
        "::",
        stringify!(internalChannels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internalSampleRate) as usize - ptr as usize },
        796usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_3),
        "::",
        stringify!(internalSampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internalChannelMap) as usize - ptr as usize },
        800usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_3),
        "::",
        stringify!(internalChannelMap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internalPeriodSizeInFrames) as usize - ptr as usize },
        1056usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_3),
        "::",
        stringify!(internalPeriodSizeInFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internalPeriods) as usize - ptr as usize },
        1060usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_3),
        "::",
        stringify!(internalPeriods)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelMixMode) as usize - ptr as usize },
        1064usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_3),
        "::",
        stringify!(channelMixMode)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).calculateLFEFromSpatialChannels) as usize - ptr as usize
        },
        1068usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_3),
        "::",
        stringify!(calculateLFEFromSpatialChannels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).converter) as usize - ptr as usize },
        1072usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_3),
        "::",
        stringify!(converter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pIntermediaryBuffer) as usize - ptr as usize },
        1384usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_3),
        "::",
        stringify!(pIntermediaryBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intermediaryBufferCap) as usize - ptr as usize },
        1392usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_3),
        "::",
        stringify!(intermediaryBufferCap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intermediaryBufferLen) as usize - ptr as usize },
        1396usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_3),
        "::",
        stringify!(intermediaryBufferLen)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_device__bindgen_ty_4 {
    pub wasapi: ma_device__bindgen_ty_4__bindgen_ty_1,
    pub dsound: ma_device__bindgen_ty_4__bindgen_ty_2,
    pub winmm: ma_device__bindgen_ty_4__bindgen_ty_3,
    pub jack: ma_device__bindgen_ty_4__bindgen_ty_4,
    pub null_device: ma_device__bindgen_ty_4__bindgen_ty_5,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device__bindgen_ty_4__bindgen_ty_1 {
    pub pAudioClientPlayback: ma_ptr,
    pub pAudioClientCapture: ma_ptr,
    pub pRenderClient: ma_ptr,
    pub pCaptureClient: ma_ptr,
    pub pDeviceEnumerator: ma_ptr,
    pub notificationClient: ma_IMMNotificationClient,
    pub hEventPlayback: ma_handle,
    pub hEventCapture: ma_handle,
    pub actualBufferSizeInFramesPlayback: ma_uint32,
    pub actualBufferSizeInFramesCapture: ma_uint32,
    pub originalPeriodSizeInFrames: ma_uint32,
    pub originalPeriodSizeInMilliseconds: ma_uint32,
    pub originalPeriods: ma_uint32,
    pub originalPerformanceProfile: ma_performance_profile,
    pub periodSizeInFramesPlayback: ma_uint32,
    pub periodSizeInFramesCapture: ma_uint32,
    pub pMappedBufferCapture: *mut ::std::os::raw::c_void,
    pub mappedBufferCaptureCap: ma_uint32,
    pub mappedBufferCaptureLen: ma_uint32,
    pub pMappedBufferPlayback: *mut ::std::os::raw::c_void,
    pub mappedBufferPlaybackCap: ma_uint32,
    pub mappedBufferPlaybackLen: ma_uint32,
    pub isStartedCapture: ma_bool32,
    pub isStartedPlayback: ma_bool32,
    pub loopbackProcessID: ma_uint32,
    pub loopbackProcessExclude: ma_bool8,
    pub noAutoConvertSRC: ma_bool8,
    pub noDefaultQualitySRC: ma_bool8,
    pub noHardwareOffloading: ma_bool8,
    pub allowCaptureAutoStreamRouting: ma_bool8,
    pub allowPlaybackAutoStreamRouting: ma_bool8,
    pub isDetachedPlayback: ma_bool8,
    pub isDetachedCapture: ma_bool8,
    pub usage: ma_wasapi_usage,
    pub hAvrtHandle: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ma_device__bindgen_ty_4__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device__bindgen_ty_4__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device__bindgen_ty_4__bindgen_ty_1>(),
        176usize,
        concat!(
        "Size of: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device__bindgen_ty_4__bindgen_ty_1>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pAudioClientPlayback) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(pAudioClientPlayback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pAudioClientCapture) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(pAudioClientCapture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pRenderClient) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(pRenderClient)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCaptureClient) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(pCaptureClient)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDeviceEnumerator) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(pDeviceEnumerator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationClient) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(notificationClient)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hEventPlayback) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(hEventPlayback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hEventCapture) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(hEventCapture)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).actualBufferSizeInFramesPlayback) as usize - ptr as usize
        },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(actualBufferSizeInFramesPlayback)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).actualBufferSizeInFramesCapture) as usize - ptr as usize
        },
        84usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(actualBufferSizeInFramesCapture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).originalPeriodSizeInFrames) as usize - ptr as usize },
        88usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(originalPeriodSizeInFrames)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).originalPeriodSizeInMilliseconds) as usize - ptr as usize
        },
        92usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(originalPeriodSizeInMilliseconds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).originalPeriods) as usize - ptr as usize },
        96usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(originalPeriods)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).originalPerformanceProfile) as usize - ptr as usize },
        100usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(originalPerformanceProfile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).periodSizeInFramesPlayback) as usize - ptr as usize },
        104usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(periodSizeInFramesPlayback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).periodSizeInFramesCapture) as usize - ptr as usize },
        108usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(periodSizeInFramesCapture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pMappedBufferCapture) as usize - ptr as usize },
        112usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(pMappedBufferCapture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mappedBufferCaptureCap) as usize - ptr as usize },
        120usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(mappedBufferCaptureCap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mappedBufferCaptureLen) as usize - ptr as usize },
        124usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(mappedBufferCaptureLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pMappedBufferPlayback) as usize - ptr as usize },
        128usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(pMappedBufferPlayback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mappedBufferPlaybackCap) as usize - ptr as usize },
        136usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(mappedBufferPlaybackCap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mappedBufferPlaybackLen) as usize - ptr as usize },
        140usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(mappedBufferPlaybackLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isStartedCapture) as usize - ptr as usize },
        144usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(isStartedCapture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isStartedPlayback) as usize - ptr as usize },
        148usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(isStartedPlayback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loopbackProcessID) as usize - ptr as usize },
        152usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(loopbackProcessID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loopbackProcessExclude) as usize - ptr as usize },
        156usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(loopbackProcessExclude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noAutoConvertSRC) as usize - ptr as usize },
        157usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(noAutoConvertSRC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noDefaultQualitySRC) as usize - ptr as usize },
        158usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(noDefaultQualitySRC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noHardwareOffloading) as usize - ptr as usize },
        159usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(noHardwareOffloading)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).allowCaptureAutoStreamRouting) as usize - ptr as usize
        },
        160usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(allowCaptureAutoStreamRouting)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).allowPlaybackAutoStreamRouting) as usize - ptr as usize
        },
        161usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(allowPlaybackAutoStreamRouting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isDetachedPlayback) as usize - ptr as usize },
        162usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(isDetachedPlayback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isDetachedCapture) as usize - ptr as usize },
        163usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(isDetachedCapture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usage) as usize - ptr as usize },
        164usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(usage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hAvrtHandle) as usize - ptr as usize },
        168usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_1),
        "::",
        stringify!(hAvrtHandle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device__bindgen_ty_4__bindgen_ty_2 {
    pub pPlayback: ma_ptr,
    pub pPlaybackPrimaryBuffer: ma_ptr,
    pub pPlaybackBuffer: ma_ptr,
    pub pCapture: ma_ptr,
    pub pCaptureBuffer: ma_ptr,
}
#[test]
fn bindgen_test_layout_ma_device__bindgen_ty_4__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device__bindgen_ty_4__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device__bindgen_ty_4__bindgen_ty_2>(),
        40usize,
        concat!(
        "Size of: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device__bindgen_ty_4__bindgen_ty_2>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPlayback) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_2),
        "::",
        stringify!(pPlayback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPlaybackPrimaryBuffer) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_2),
        "::",
        stringify!(pPlaybackPrimaryBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPlaybackBuffer) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_2),
        "::",
        stringify!(pPlaybackBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCapture) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_2),
        "::",
        stringify!(pCapture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCaptureBuffer) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_2),
        "::",
        stringify!(pCaptureBuffer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device__bindgen_ty_4__bindgen_ty_3 {
    pub hDevicePlayback: ma_handle,
    pub hDeviceCapture: ma_handle,
    pub hEventPlayback: ma_handle,
    pub hEventCapture: ma_handle,
    pub fragmentSizeInFrames: ma_uint32,
    pub iNextHeaderPlayback: ma_uint32,
    pub iNextHeaderCapture: ma_uint32,
    pub headerFramesConsumedPlayback: ma_uint32,
    pub headerFramesConsumedCapture: ma_uint32,
    pub pWAVEHDRPlayback: *mut ma_uint8,
    pub pWAVEHDRCapture: *mut ma_uint8,
    pub pIntermediaryBufferPlayback: *mut ma_uint8,
    pub pIntermediaryBufferCapture: *mut ma_uint8,
    pub _pHeapData: *mut ma_uint8,
}
#[test]
fn bindgen_test_layout_ma_device__bindgen_ty_4__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device__bindgen_ty_4__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device__bindgen_ty_4__bindgen_ty_3>(),
        96usize,
        concat!(
        "Size of: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device__bindgen_ty_4__bindgen_ty_3>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hDevicePlayback) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_3),
        "::",
        stringify!(hDevicePlayback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hDeviceCapture) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_3),
        "::",
        stringify!(hDeviceCapture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hEventPlayback) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_3),
        "::",
        stringify!(hEventPlayback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hEventCapture) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_3),
        "::",
        stringify!(hEventCapture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fragmentSizeInFrames) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_3),
        "::",
        stringify!(fragmentSizeInFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iNextHeaderPlayback) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_3),
        "::",
        stringify!(iNextHeaderPlayback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iNextHeaderCapture) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_3),
        "::",
        stringify!(iNextHeaderCapture)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).headerFramesConsumedPlayback) as usize - ptr as usize
        },
        44usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_3),
        "::",
        stringify!(headerFramesConsumedPlayback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).headerFramesConsumedCapture) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_3),
        "::",
        stringify!(headerFramesConsumedCapture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pWAVEHDRPlayback) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_3),
        "::",
        stringify!(pWAVEHDRPlayback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pWAVEHDRCapture) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_3),
        "::",
        stringify!(pWAVEHDRCapture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pIntermediaryBufferPlayback) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_3),
        "::",
        stringify!(pIntermediaryBufferPlayback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pIntermediaryBufferCapture) as usize - ptr as usize },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_3),
        "::",
        stringify!(pIntermediaryBufferCapture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pHeapData) as usize - ptr as usize },
        88usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_3),
        "::",
        stringify!(_pHeapData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device__bindgen_ty_4__bindgen_ty_4 {
    pub pClient: ma_ptr,
    pub ppPortsPlayback: *mut ma_ptr,
    pub ppPortsCapture: *mut ma_ptr,
    pub pIntermediaryBufferPlayback: *mut f32,
    pub pIntermediaryBufferCapture: *mut f32,
}
#[test]
fn bindgen_test_layout_ma_device__bindgen_ty_4__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device__bindgen_ty_4__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device__bindgen_ty_4__bindgen_ty_4>(),
        40usize,
        concat!(
        "Size of: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device__bindgen_ty_4__bindgen_ty_4>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pClient) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_4),
        "::",
        stringify!(pClient)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppPortsPlayback) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_4),
        "::",
        stringify!(ppPortsPlayback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppPortsCapture) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_4),
        "::",
        stringify!(ppPortsCapture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pIntermediaryBufferPlayback) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_4),
        "::",
        stringify!(pIntermediaryBufferPlayback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pIntermediaryBufferCapture) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_4),
        "::",
        stringify!(pIntermediaryBufferCapture)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_device__bindgen_ty_4__bindgen_ty_5 {
    pub deviceThread: ma_thread,
    pub operationEvent: ma_event,
    pub operationCompletionEvent: ma_event,
    pub operationSemaphore: ma_semaphore,
    pub operation: ma_uint32,
    pub operationResult: ma_result,
    pub timer: ma_timer,
    pub priorRunTime: f64,
    pub currentPeriodFramesRemainingPlayback: ma_uint32,
    pub currentPeriodFramesRemainingCapture: ma_uint32,
    pub lastProcessedFramePlayback: ma_uint64,
    pub lastProcessedFrameCapture: ma_uint64,
    pub isStarted: ma_bool32,
}
#[test]
fn bindgen_test_layout_ma_device__bindgen_ty_4__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device__bindgen_ty_4__bindgen_ty_5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device__bindgen_ty_4__bindgen_ty_5>(),
        88usize,
        concat!(
        "Size of: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device__bindgen_ty_4__bindgen_ty_5>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceThread) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_5),
        "::",
        stringify!(deviceThread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).operationEvent) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_5),
        "::",
        stringify!(operationEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).operationCompletionEvent) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_5),
        "::",
        stringify!(operationCompletionEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).operationSemaphore) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_5),
        "::",
        stringify!(operationSemaphore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).operation) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_5),
        "::",
        stringify!(operation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).operationResult) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_5),
        "::",
        stringify!(operationResult)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timer) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_5),
        "::",
        stringify!(timer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priorRunTime) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_5),
        "::",
        stringify!(priorRunTime)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).currentPeriodFramesRemainingPlayback) as usize
                - ptr as usize
        },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_5),
        "::",
        stringify!(currentPeriodFramesRemainingPlayback)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).currentPeriodFramesRemainingCapture) as usize - ptr as usize
        },
        60usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_5),
        "::",
        stringify!(currentPeriodFramesRemainingCapture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lastProcessedFramePlayback) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_5),
        "::",
        stringify!(lastProcessedFramePlayback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lastProcessedFrameCapture) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_5),
        "::",
        stringify!(lastProcessedFrameCapture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isStarted) as usize - ptr as usize },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4__bindgen_ty_5),
        "::",
        stringify!(isStarted)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_device__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device__bindgen_ty_4>(),
        176usize,
        concat!("Size of: ", stringify!(ma_device__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_device__bindgen_ty_4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wasapi) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4),
        "::",
        stringify!(wasapi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dsound) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4),
        "::",
        stringify!(dsound)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).winmm) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4),
        "::",
        stringify!(winmm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jack) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4),
        "::",
        stringify!(jack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).null_device) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device__bindgen_ty_4),
        "::",
        stringify!(null_device)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_device() {
    const UNINIT: ::std::mem::MaybeUninit<ma_device> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_device>(),
        3224usize,
        concat!("Size of: ", stringify!(ma_device))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_device>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_device))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pContext) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device),
        "::",
        stringify!(pContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device),
        "::",
        stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device),
        "::",
        stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device),
        "::",
        stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onData) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device),
        "::",
        stringify!(onData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onNotification) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device),
        "::",
        stringify!(onNotification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onStop) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device),
        "::",
        stringify!(onStop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pUserData) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device),
        "::",
        stringify!(pUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).startStopLock) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device),
        "::",
        stringify!(startStopLock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wakeupEvent) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device),
        "::",
        stringify!(wakeupEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).startEvent) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device),
        "::",
        stringify!(startEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stopEvent) as usize - ptr as usize },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device),
        "::",
        stringify!(stopEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread) as usize - ptr as usize },
        88usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device),
        "::",
        stringify!(thread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).workResult) as usize - ptr as usize },
        96usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device),
        "::",
        stringify!(workResult)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isOwnerOfContext) as usize - ptr as usize },
        100usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device),
        "::",
        stringify!(isOwnerOfContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noPreSilencedOutputBuffer) as usize - ptr as usize },
        101usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device),
        "::",
        stringify!(noPreSilencedOutputBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noClip) as usize - ptr as usize },
        102usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device),
        "::",
        stringify!(noClip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noDisableDenormals) as usize - ptr as usize },
        103usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device),
        "::",
        stringify!(noDisableDenormals)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noFixedSizedCallback) as usize - ptr as usize },
        104usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device),
        "::",
        stringify!(noFixedSizedCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).masterVolumeFactor) as usize - ptr as usize },
        108usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device),
        "::",
        stringify!(masterVolumeFactor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).duplexRB) as usize - ptr as usize },
        112usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device),
        "::",
        stringify!(duplexRB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resampling) as usize - ptr as usize },
        184usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device),
        "::",
        stringify!(resampling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).playback) as usize - ptr as usize },
        216usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device),
        "::",
        stringify!(playback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capture) as usize - ptr as usize },
        1648usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_device),
        "::",
        stringify!(capture)
        )
    );
}
extern "C" {
    pub fn ma_context_config_init() -> ma_context_config;
}
extern "C" {
    pub fn ma_context_init(
        backends: *const ma_backend,
        backendCount: ma_uint32,
        pConfig: *const ma_context_config,
        pContext: *mut ma_context,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_context_uninit(pContext: *mut ma_context) -> ma_result;
}
extern "C" {
    pub fn ma_context_sizeof() -> usize;
}
extern "C" {
    pub fn ma_context_get_log(pContext: *mut ma_context) -> *mut ma_log;
}
extern "C" {
    pub fn ma_context_enumerate_devices(
        pContext: *mut ma_context,
        callback: ma_enum_devices_callback_proc,
        pUserData: *mut ::std::os::raw::c_void,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_context_get_devices(
        pContext: *mut ma_context,
        ppPlaybackDeviceInfos: *mut *mut ma_device_info,
        pPlaybackDeviceCount: *mut ma_uint32,
        ppCaptureDeviceInfos: *mut *mut ma_device_info,
        pCaptureDeviceCount: *mut ma_uint32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_context_get_device_info(
        pContext: *mut ma_context,
        deviceType: ma_device_type,
        pDeviceID: *const ma_device_id,
        pDeviceInfo: *mut ma_device_info,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_context_is_loopback_supported(pContext: *mut ma_context) -> ma_bool32;
}
extern "C" {
    pub fn ma_device_config_init(deviceType: ma_device_type) -> ma_device_config;
}
extern "C" {
    pub fn ma_device_init(
        pContext: *mut ma_context,
        pConfig: *const ma_device_config,
        pDevice: *mut ma_device,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_device_init_ex(
        backends: *const ma_backend,
        backendCount: ma_uint32,
        pContextConfig: *const ma_context_config,
        pConfig: *const ma_device_config,
        pDevice: *mut ma_device,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_device_uninit(pDevice: *mut ma_device);
}
extern "C" {
    pub fn ma_device_get_context(pDevice: *mut ma_device) -> *mut ma_context;
}
extern "C" {
    pub fn ma_device_get_log(pDevice: *mut ma_device) -> *mut ma_log;
}
extern "C" {
    pub fn ma_device_get_info(
        pDevice: *mut ma_device,
        type_: ma_device_type,
        pDeviceInfo: *mut ma_device_info,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_device_get_name(
        pDevice: *mut ma_device,
        type_: ma_device_type,
        pName: *mut ::std::os::raw::c_char,
        nameCap: usize,
        pLengthNotIncludingNullTerminator: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_device_start(pDevice: *mut ma_device) -> ma_result;
}
extern "C" {
    pub fn ma_device_stop(pDevice: *mut ma_device) -> ma_result;
}
extern "C" {
    pub fn ma_device_is_started(pDevice: *const ma_device) -> ma_bool32;
}
extern "C" {
    pub fn ma_device_get_state(pDevice: *const ma_device) -> ma_device_state;
}
extern "C" {
    pub fn ma_device_post_init(
        pDevice: *mut ma_device,
        deviceType: ma_device_type,
        pPlaybackDescriptor: *const ma_device_descriptor,
        pCaptureDescriptor: *const ma_device_descriptor,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_device_set_master_volume(pDevice: *mut ma_device, volume: f32) -> ma_result;
}
extern "C" {
    pub fn ma_device_get_master_volume(pDevice: *mut ma_device, pVolume: *mut f32) -> ma_result;
}
extern "C" {
    pub fn ma_device_set_master_volume_db(pDevice: *mut ma_device, gainDB: f32) -> ma_result;
}
extern "C" {
    pub fn ma_device_get_master_volume_db(pDevice: *mut ma_device, pGainDB: *mut f32) -> ma_result;
}
extern "C" {
    pub fn ma_device_handle_backend_data_callback(
        pDevice: *mut ma_device,
        pOutput: *mut ::std::os::raw::c_void,
        pInput: *const ::std::os::raw::c_void,
        frameCount: ma_uint32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_calculate_buffer_size_in_frames_from_descriptor(
        pDescriptor: *const ma_device_descriptor,
        nativeSampleRate: ma_uint32,
        performanceProfile: ma_performance_profile,
    ) -> ma_uint32;
}
extern "C" {
    pub fn ma_get_backend_name(backend: ma_backend) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ma_is_backend_enabled(backend: ma_backend) -> ma_bool32;
}
extern "C" {
    pub fn ma_get_enabled_backends(
        pBackends: *mut ma_backend,
        backendCap: usize,
        pBackendCount: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_is_loopback_supported(backend: ma_backend) -> ma_bool32;
}
extern "C" {
    #[doc = "Utiltities"]
    pub fn ma_calculate_buffer_size_in_milliseconds_from_frames(
        bufferSizeInFrames: ma_uint32,
        sampleRate: ma_uint32,
    ) -> ma_uint32;
}
extern "C" {
    pub fn ma_calculate_buffer_size_in_frames_from_milliseconds(
        bufferSizeInMilliseconds: ma_uint32,
        sampleRate: ma_uint32,
    ) -> ma_uint32;
}
extern "C" {
    pub fn ma_copy_pcm_frames(
        dst: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
        format: ma_format,
        channels: ma_uint32,
    );
}
extern "C" {
    pub fn ma_silence_pcm_frames(
        p: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        format: ma_format,
        channels: ma_uint32,
    );
}
extern "C" {
    pub fn ma_offset_pcm_frames_ptr(
        p: *mut ::std::os::raw::c_void,
        offsetInFrames: ma_uint64,
        format: ma_format,
        channels: ma_uint32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ma_offset_pcm_frames_const_ptr(
        p: *const ::std::os::raw::c_void,
        offsetInFrames: ma_uint64,
        format: ma_format,
        channels: ma_uint32,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn ma_clip_samples_u8(pDst: *mut ma_uint8, pSrc: *const ma_int16, count: ma_uint64);
}
extern "C" {
    pub fn ma_clip_samples_s16(pDst: *mut ma_int16, pSrc: *const ma_int32, count: ma_uint64);
}
extern "C" {
    pub fn ma_clip_samples_s24(pDst: *mut ma_uint8, pSrc: *const ma_int64, count: ma_uint64);
}
extern "C" {
    pub fn ma_clip_samples_s32(pDst: *mut ma_int32, pSrc: *const ma_int64, count: ma_uint64);
}
extern "C" {
    pub fn ma_clip_samples_f32(pDst: *mut f32, pSrc: *const f32, count: ma_uint64);
}
extern "C" {
    pub fn ma_clip_pcm_frames(
        pDst: *mut ::std::os::raw::c_void,
        pSrc: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
        format: ma_format,
        channels: ma_uint32,
    );
}
extern "C" {
    pub fn ma_copy_and_apply_volume_factor_u8(
        pSamplesOut: *mut ma_uint8,
        pSamplesIn: *const ma_uint8,
        sampleCount: ma_uint64,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_copy_and_apply_volume_factor_s16(
        pSamplesOut: *mut ma_int16,
        pSamplesIn: *const ma_int16,
        sampleCount: ma_uint64,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_copy_and_apply_volume_factor_s24(
        pSamplesOut: *mut ::std::os::raw::c_void,
        pSamplesIn: *const ::std::os::raw::c_void,
        sampleCount: ma_uint64,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_copy_and_apply_volume_factor_s32(
        pSamplesOut: *mut ma_int32,
        pSamplesIn: *const ma_int32,
        sampleCount: ma_uint64,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_copy_and_apply_volume_factor_f32(
        pSamplesOut: *mut f32,
        pSamplesIn: *const f32,
        sampleCount: ma_uint64,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_apply_volume_factor_u8(pSamples: *mut ma_uint8, sampleCount: ma_uint64, factor: f32);
}
extern "C" {
    pub fn ma_apply_volume_factor_s16(pSamples: *mut ma_int16, sampleCount: ma_uint64, factor: f32);
}
extern "C" {
    pub fn ma_apply_volume_factor_s24(
        pSamples: *mut ::std::os::raw::c_void,
        sampleCount: ma_uint64,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_apply_volume_factor_s32(pSamples: *mut ma_int32, sampleCount: ma_uint64, factor: f32);
}
extern "C" {
    pub fn ma_apply_volume_factor_f32(pSamples: *mut f32, sampleCount: ma_uint64, factor: f32);
}
extern "C" {
    pub fn ma_copy_and_apply_volume_factor_pcm_frames_u8(
        pFramesOut: *mut ma_uint8,
        pFramesIn: *const ma_uint8,
        frameCount: ma_uint64,
        channels: ma_uint32,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_copy_and_apply_volume_factor_pcm_frames_s16(
        pFramesOut: *mut ma_int16,
        pFramesIn: *const ma_int16,
        frameCount: ma_uint64,
        channels: ma_uint32,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_copy_and_apply_volume_factor_pcm_frames_s24(
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
        channels: ma_uint32,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_copy_and_apply_volume_factor_pcm_frames_s32(
        pFramesOut: *mut ma_int32,
        pFramesIn: *const ma_int32,
        frameCount: ma_uint64,
        channels: ma_uint32,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_copy_and_apply_volume_factor_pcm_frames_f32(
        pFramesOut: *mut f32,
        pFramesIn: *const f32,
        frameCount: ma_uint64,
        channels: ma_uint32,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_copy_and_apply_volume_factor_pcm_frames(
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
        format: ma_format,
        channels: ma_uint32,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_apply_volume_factor_pcm_frames_u8(
        pFrames: *mut ma_uint8,
        frameCount: ma_uint64,
        channels: ma_uint32,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_apply_volume_factor_pcm_frames_s16(
        pFrames: *mut ma_int16,
        frameCount: ma_uint64,
        channels: ma_uint32,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_apply_volume_factor_pcm_frames_s24(
        pFrames: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        channels: ma_uint32,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_apply_volume_factor_pcm_frames_s32(
        pFrames: *mut ma_int32,
        frameCount: ma_uint64,
        channels: ma_uint32,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_apply_volume_factor_pcm_frames_f32(
        pFrames: *mut f32,
        frameCount: ma_uint64,
        channels: ma_uint32,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_apply_volume_factor_pcm_frames(
        pFrames: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        format: ma_format,
        channels: ma_uint32,
        factor: f32,
    );
}
extern "C" {
    pub fn ma_copy_and_apply_volume_factor_per_channel_f32(
        pFramesOut: *mut f32,
        pFramesIn: *const f32,
        frameCount: ma_uint64,
        channels: ma_uint32,
        pChannelGains: *mut f32,
    );
}
extern "C" {
    pub fn ma_copy_and_apply_volume_and_clip_samples_u8(
        pDst: *mut ma_uint8,
        pSrc: *const ma_int16,
        count: ma_uint64,
        volume: f32,
    );
}
extern "C" {
    pub fn ma_copy_and_apply_volume_and_clip_samples_s16(
        pDst: *mut ma_int16,
        pSrc: *const ma_int32,
        count: ma_uint64,
        volume: f32,
    );
}
extern "C" {
    pub fn ma_copy_and_apply_volume_and_clip_samples_s24(
        pDst: *mut ma_uint8,
        pSrc: *const ma_int64,
        count: ma_uint64,
        volume: f32,
    );
}
extern "C" {
    pub fn ma_copy_and_apply_volume_and_clip_samples_s32(
        pDst: *mut ma_int32,
        pSrc: *const ma_int64,
        count: ma_uint64,
        volume: f32,
    );
}
extern "C" {
    pub fn ma_copy_and_apply_volume_and_clip_samples_f32(
        pDst: *mut f32,
        pSrc: *const f32,
        count: ma_uint64,
        volume: f32,
    );
}
extern "C" {
    pub fn ma_copy_and_apply_volume_and_clip_pcm_frames(
        pDst: *mut ::std::os::raw::c_void,
        pSrc: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
        format: ma_format,
        channels: ma_uint32,
        volume: f32,
    );
}
extern "C" {
    pub fn ma_volume_linear_to_db(factor: f32) -> f32;
}
extern "C" {
    pub fn ma_volume_db_to_linear(gain: f32) -> f32;
}
#[doc = "Data Source"]
pub type ma_data_source = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_data_source_vtable {
    pub onRead: ::std::option::Option<
        unsafe extern "C" fn(
            pDataSource: *mut ma_data_source,
            pFramesOut: *mut ::std::os::raw::c_void,
            frameCount: ma_uint64,
            pFramesRead: *mut ma_uint64,
        ) -> ma_result,
    >,
    pub onSeek: ::std::option::Option<
        unsafe extern "C" fn(pDataSource: *mut ma_data_source, frameIndex: ma_uint64) -> ma_result,
    >,
    pub onGetDataFormat: ::std::option::Option<
        unsafe extern "C" fn(
            pDataSource: *mut ma_data_source,
            pFormat: *mut ma_format,
            pChannels: *mut ma_uint32,
            pSampleRate: *mut ma_uint32,
            pChannelMap: *mut ma_channel,
            channelMapCap: usize,
        ) -> ma_result,
    >,
    pub onGetCursor: ::std::option::Option<
        unsafe extern "C" fn(
            pDataSource: *mut ma_data_source,
            pCursor: *mut ma_uint64,
        ) -> ma_result,
    >,
    pub onGetLength: ::std::option::Option<
        unsafe extern "C" fn(
            pDataSource: *mut ma_data_source,
            pLength: *mut ma_uint64,
        ) -> ma_result,
    >,
    pub onSetLooping: ::std::option::Option<
        unsafe extern "C" fn(pDataSource: *mut ma_data_source, isLooping: ma_bool32) -> ma_result,
    >,
    pub flags: ma_uint32,
}
#[test]
fn bindgen_test_layout_ma_data_source_vtable() {
    const UNINIT: ::std::mem::MaybeUninit<ma_data_source_vtable> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_data_source_vtable>(),
        56usize,
        concat!("Size of: ", stringify!(ma_data_source_vtable))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_data_source_vtable>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_data_source_vtable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onRead) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_source_vtable),
        "::",
        stringify!(onRead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onSeek) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_source_vtable),
        "::",
        stringify!(onSeek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onGetDataFormat) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_source_vtable),
        "::",
        stringify!(onGetDataFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onGetCursor) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_source_vtable),
        "::",
        stringify!(onGetCursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onGetLength) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_source_vtable),
        "::",
        stringify!(onGetLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onSetLooping) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_source_vtable),
        "::",
        stringify!(onSetLooping)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_source_vtable),
        "::",
        stringify!(flags)
        )
    );
}
pub type ma_data_source_get_next_proc = ::std::option::Option<
    unsafe extern "C" fn(pDataSource: *mut ma_data_source) -> *mut ma_data_source,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_data_source_config {
    pub vtable: *const ma_data_source_vtable,
}
#[test]
fn bindgen_test_layout_ma_data_source_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_data_source_config> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_data_source_config>(),
        8usize,
        concat!("Size of: ", stringify!(ma_data_source_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_data_source_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_data_source_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_source_config),
        "::",
        stringify!(vtable)
        )
    );
}
extern "C" {
    pub fn ma_data_source_config_init() -> ma_data_source_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_data_source_base {
    pub vtable: *const ma_data_source_vtable,
    pub rangeBegInFrames: ma_uint64,
    pub rangeEndInFrames: ma_uint64,
    pub loopBegInFrames: ma_uint64,
    pub loopEndInFrames: ma_uint64,
    pub pCurrent: *mut ma_data_source,
    pub pNext: *mut ma_data_source,
    pub onGetNext: ma_data_source_get_next_proc,
    pub isLooping: ma_bool32,
}
#[test]
fn bindgen_test_layout_ma_data_source_base() {
    const UNINIT: ::std::mem::MaybeUninit<ma_data_source_base> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_data_source_base>(),
        72usize,
        concat!("Size of: ", stringify!(ma_data_source_base))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_data_source_base>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_data_source_base))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_source_base),
        "::",
        stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rangeBegInFrames) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_source_base),
        "::",
        stringify!(rangeBegInFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rangeEndInFrames) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_source_base),
        "::",
        stringify!(rangeEndInFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loopBegInFrames) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_source_base),
        "::",
        stringify!(loopBegInFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loopEndInFrames) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_source_base),
        "::",
        stringify!(loopEndInFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCurrent) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_source_base),
        "::",
        stringify!(pCurrent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_source_base),
        "::",
        stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onGetNext) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_source_base),
        "::",
        stringify!(onGetNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isLooping) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_source_base),
        "::",
        stringify!(isLooping)
        )
    );
}
extern "C" {
    pub fn ma_data_source_init(
        pConfig: *const ma_data_source_config,
        pDataSource: *mut ma_data_source,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_source_uninit(pDataSource: *mut ma_data_source);
}
extern "C" {
    pub fn ma_data_source_read_pcm_frames(
        pDataSource: *mut ma_data_source,
        pFramesOut: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        pFramesRead: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_source_seek_pcm_frames(
        pDataSource: *mut ma_data_source,
        frameCount: ma_uint64,
        pFramesSeeked: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_source_seek_to_pcm_frame(
        pDataSource: *mut ma_data_source,
        frameIndex: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_source_get_data_format(
        pDataSource: *mut ma_data_source,
        pFormat: *mut ma_format,
        pChannels: *mut ma_uint32,
        pSampleRate: *mut ma_uint32,
        pChannelMap: *mut ma_channel,
        channelMapCap: usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_source_get_cursor_in_pcm_frames(
        pDataSource: *mut ma_data_source,
        pCursor: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_source_get_length_in_pcm_frames(
        pDataSource: *mut ma_data_source,
        pLength: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_source_get_cursor_in_seconds(
        pDataSource: *mut ma_data_source,
        pCursor: *mut f32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_source_get_length_in_seconds(
        pDataSource: *mut ma_data_source,
        pLength: *mut f32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_source_set_looping(
        pDataSource: *mut ma_data_source,
        isLooping: ma_bool32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_source_is_looping(pDataSource: *const ma_data_source) -> ma_bool32;
}
extern "C" {
    pub fn ma_data_source_set_range_in_pcm_frames(
        pDataSource: *mut ma_data_source,
        rangeBegInFrames: ma_uint64,
        rangeEndInFrames: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_source_get_range_in_pcm_frames(
        pDataSource: *const ma_data_source,
        pRangeBegInFrames: *mut ma_uint64,
        pRangeEndInFrames: *mut ma_uint64,
    );
}
extern "C" {
    pub fn ma_data_source_set_loop_point_in_pcm_frames(
        pDataSource: *mut ma_data_source,
        loopBegInFrames: ma_uint64,
        loopEndInFrames: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_source_get_loop_point_in_pcm_frames(
        pDataSource: *const ma_data_source,
        pLoopBegInFrames: *mut ma_uint64,
        pLoopEndInFrames: *mut ma_uint64,
    );
}
extern "C" {
    pub fn ma_data_source_set_current(
        pDataSource: *mut ma_data_source,
        pCurrentDataSource: *mut ma_data_source,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_source_get_current(pDataSource: *const ma_data_source) -> *mut ma_data_source;
}
extern "C" {
    pub fn ma_data_source_set_next(
        pDataSource: *mut ma_data_source,
        pNextDataSource: *mut ma_data_source,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_source_get_next(pDataSource: *const ma_data_source) -> *mut ma_data_source;
}
extern "C" {
    pub fn ma_data_source_set_next_callback(
        pDataSource: *mut ma_data_source,
        onGetNext: ma_data_source_get_next_proc,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_source_get_next_callback(
        pDataSource: *const ma_data_source,
    ) -> ma_data_source_get_next_proc;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_audio_buffer_ref {
    pub ds: ma_data_source_base,
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub cursor: ma_uint64,
    pub sizeInFrames: ma_uint64,
    pub pData: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ma_audio_buffer_ref() {
    const UNINIT: ::std::mem::MaybeUninit<ma_audio_buffer_ref> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_audio_buffer_ref>(),
        112usize,
        concat!("Size of: ", stringify!(ma_audio_buffer_ref))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_audio_buffer_ref>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_audio_buffer_ref))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ds) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_audio_buffer_ref),
        "::",
        stringify!(ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_audio_buffer_ref),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        76usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_audio_buffer_ref),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_audio_buffer_ref),
        "::",
        stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cursor) as usize - ptr as usize },
        88usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_audio_buffer_ref),
        "::",
        stringify!(cursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sizeInFrames) as usize - ptr as usize },
        96usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_audio_buffer_ref),
        "::",
        stringify!(sizeInFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pData) as usize - ptr as usize },
        104usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_audio_buffer_ref),
        "::",
        stringify!(pData)
        )
    );
}
extern "C" {
    pub fn ma_audio_buffer_ref_init(
        format: ma_format,
        channels: ma_uint32,
        pData: *const ::std::os::raw::c_void,
        sizeInFrames: ma_uint64,
        pAudioBufferRef: *mut ma_audio_buffer_ref,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_audio_buffer_ref_uninit(pAudioBufferRef: *mut ma_audio_buffer_ref);
}
extern "C" {
    pub fn ma_audio_buffer_ref_set_data(
        pAudioBufferRef: *mut ma_audio_buffer_ref,
        pData: *const ::std::os::raw::c_void,
        sizeInFrames: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_audio_buffer_ref_read_pcm_frames(
        pAudioBufferRef: *mut ma_audio_buffer_ref,
        pFramesOut: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        loop_: ma_bool32,
    ) -> ma_uint64;
}
extern "C" {
    pub fn ma_audio_buffer_ref_seek_to_pcm_frame(
        pAudioBufferRef: *mut ma_audio_buffer_ref,
        frameIndex: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_audio_buffer_ref_map(
        pAudioBufferRef: *mut ma_audio_buffer_ref,
        ppFramesOut: *mut *mut ::std::os::raw::c_void,
        pFrameCount: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_audio_buffer_ref_unmap(
        pAudioBufferRef: *mut ma_audio_buffer_ref,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_audio_buffer_ref_at_end(pAudioBufferRef: *const ma_audio_buffer_ref) -> ma_bool32;
}
extern "C" {
    pub fn ma_audio_buffer_ref_get_cursor_in_pcm_frames(
        pAudioBufferRef: *const ma_audio_buffer_ref,
        pCursor: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_audio_buffer_ref_get_length_in_pcm_frames(
        pAudioBufferRef: *const ma_audio_buffer_ref,
        pLength: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_audio_buffer_ref_get_available_frames(
        pAudioBufferRef: *const ma_audio_buffer_ref,
        pAvailableFrames: *mut ma_uint64,
    ) -> ma_result;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_audio_buffer_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub sizeInFrames: ma_uint64,
    pub pData: *const ::std::os::raw::c_void,
    pub allocationCallbacks: ma_allocation_callbacks,
}
#[test]
fn bindgen_test_layout_ma_audio_buffer_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_audio_buffer_config> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_audio_buffer_config>(),
        64usize,
        concat!("Size of: ", stringify!(ma_audio_buffer_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_audio_buffer_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_audio_buffer_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_audio_buffer_config),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_audio_buffer_config),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_audio_buffer_config),
        "::",
        stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sizeInFrames) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_audio_buffer_config),
        "::",
        stringify!(sizeInFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pData) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_audio_buffer_config),
        "::",
        stringify!(pData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocationCallbacks) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_audio_buffer_config),
        "::",
        stringify!(allocationCallbacks)
        )
    );
}
extern "C" {
    pub fn ma_audio_buffer_config_init(
        format: ma_format,
        channels: ma_uint32,
        sizeInFrames: ma_uint64,
        pData: *const ::std::os::raw::c_void,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    ) -> ma_audio_buffer_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_audio_buffer {
    pub ref_: ma_audio_buffer_ref,
    pub allocationCallbacks: ma_allocation_callbacks,
    pub ownsData: ma_bool32,
    pub _pExtraData: [ma_uint8; 1usize],
}
#[test]
fn bindgen_test_layout_ma_audio_buffer() {
    const UNINIT: ::std::mem::MaybeUninit<ma_audio_buffer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_audio_buffer>(),
        152usize,
        concat!("Size of: ", stringify!(ma_audio_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_audio_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_audio_buffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_audio_buffer),
        "::",
        stringify!(ref_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocationCallbacks) as usize - ptr as usize },
        112usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_audio_buffer),
        "::",
        stringify!(allocationCallbacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ownsData) as usize - ptr as usize },
        144usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_audio_buffer),
        "::",
        stringify!(ownsData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pExtraData) as usize - ptr as usize },
        148usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_audio_buffer),
        "::",
        stringify!(_pExtraData)
        )
    );
}
extern "C" {
    pub fn ma_audio_buffer_init(
        pConfig: *const ma_audio_buffer_config,
        pAudioBuffer: *mut ma_audio_buffer,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_audio_buffer_init_copy(
        pConfig: *const ma_audio_buffer_config,
        pAudioBuffer: *mut ma_audio_buffer,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_audio_buffer_alloc_and_init(
        pConfig: *const ma_audio_buffer_config,
        ppAudioBuffer: *mut *mut ma_audio_buffer,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_audio_buffer_uninit(pAudioBuffer: *mut ma_audio_buffer);
}
extern "C" {
    pub fn ma_audio_buffer_uninit_and_free(pAudioBuffer: *mut ma_audio_buffer);
}
extern "C" {
    pub fn ma_audio_buffer_read_pcm_frames(
        pAudioBuffer: *mut ma_audio_buffer,
        pFramesOut: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        loop_: ma_bool32,
    ) -> ma_uint64;
}
extern "C" {
    pub fn ma_audio_buffer_seek_to_pcm_frame(
        pAudioBuffer: *mut ma_audio_buffer,
        frameIndex: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_audio_buffer_map(
        pAudioBuffer: *mut ma_audio_buffer,
        ppFramesOut: *mut *mut ::std::os::raw::c_void,
        pFrameCount: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_audio_buffer_unmap(
        pAudioBuffer: *mut ma_audio_buffer,
        frameCount: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_audio_buffer_at_end(pAudioBuffer: *const ma_audio_buffer) -> ma_bool32;
}
extern "C" {
    pub fn ma_audio_buffer_get_cursor_in_pcm_frames(
        pAudioBuffer: *const ma_audio_buffer,
        pCursor: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_audio_buffer_get_length_in_pcm_frames(
        pAudioBuffer: *const ma_audio_buffer,
        pLength: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_audio_buffer_get_available_frames(
        pAudioBuffer: *const ma_audio_buffer,
        pAvailableFrames: *mut ma_uint64,
    ) -> ma_result;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_paged_audio_buffer_page {
    pub pNext: *mut ma_paged_audio_buffer_page,
    pub sizeInFrames: ma_uint64,
    pub pAudioData: [ma_uint8; 1usize],
}
#[test]
fn bindgen_test_layout_ma_paged_audio_buffer_page() {
    const UNINIT: ::std::mem::MaybeUninit<ma_paged_audio_buffer_page> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_paged_audio_buffer_page>(),
        24usize,
        concat!("Size of: ", stringify!(ma_paged_audio_buffer_page))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_paged_audio_buffer_page>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_paged_audio_buffer_page))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_paged_audio_buffer_page),
        "::",
        stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sizeInFrames) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_paged_audio_buffer_page),
        "::",
        stringify!(sizeInFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pAudioData) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_paged_audio_buffer_page),
        "::",
        stringify!(pAudioData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_paged_audio_buffer_data {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub head: ma_paged_audio_buffer_page,
    pub pTail: *mut ma_paged_audio_buffer_page,
}
#[test]
fn bindgen_test_layout_ma_paged_audio_buffer_data() {
    const UNINIT: ::std::mem::MaybeUninit<ma_paged_audio_buffer_data> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_paged_audio_buffer_data>(),
        40usize,
        concat!("Size of: ", stringify!(ma_paged_audio_buffer_data))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_paged_audio_buffer_data>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_paged_audio_buffer_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_paged_audio_buffer_data),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_paged_audio_buffer_data),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_paged_audio_buffer_data),
        "::",
        stringify!(head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pTail) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_paged_audio_buffer_data),
        "::",
        stringify!(pTail)
        )
    );
}
extern "C" {
    pub fn ma_paged_audio_buffer_data_init(
        format: ma_format,
        channels: ma_uint32,
        pData: *mut ma_paged_audio_buffer_data,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_paged_audio_buffer_data_uninit(
        pData: *mut ma_paged_audio_buffer_data,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
extern "C" {
    pub fn ma_paged_audio_buffer_data_get_head(
        pData: *mut ma_paged_audio_buffer_data,
    ) -> *mut ma_paged_audio_buffer_page;
}
extern "C" {
    pub fn ma_paged_audio_buffer_data_get_tail(
        pData: *mut ma_paged_audio_buffer_data,
    ) -> *mut ma_paged_audio_buffer_page;
}
extern "C" {
    pub fn ma_paged_audio_buffer_data_get_length_in_pcm_frames(
        pData: *mut ma_paged_audio_buffer_data,
        pLength: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_paged_audio_buffer_data_allocate_page(
        pData: *mut ma_paged_audio_buffer_data,
        pageSizeInFrames: ma_uint64,
        pInitialData: *const ::std::os::raw::c_void,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        ppPage: *mut *mut ma_paged_audio_buffer_page,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_paged_audio_buffer_data_free_page(
        pData: *mut ma_paged_audio_buffer_data,
        pPage: *mut ma_paged_audio_buffer_page,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_paged_audio_buffer_data_append_page(
        pData: *mut ma_paged_audio_buffer_data,
        pPage: *mut ma_paged_audio_buffer_page,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_paged_audio_buffer_data_allocate_and_append_page(
        pData: *mut ma_paged_audio_buffer_data,
        pageSizeInFrames: ma_uint32,
        pInitialData: *const ::std::os::raw::c_void,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    ) -> ma_result;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_paged_audio_buffer_config {
    pub pData: *mut ma_paged_audio_buffer_data,
}
#[test]
fn bindgen_test_layout_ma_paged_audio_buffer_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_paged_audio_buffer_config> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_paged_audio_buffer_config>(),
        8usize,
        concat!("Size of: ", stringify!(ma_paged_audio_buffer_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_paged_audio_buffer_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_paged_audio_buffer_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pData) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_paged_audio_buffer_config),
        "::",
        stringify!(pData)
        )
    );
}
extern "C" {
    pub fn ma_paged_audio_buffer_config_init(
        pData: *mut ma_paged_audio_buffer_data,
    ) -> ma_paged_audio_buffer_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_paged_audio_buffer {
    pub ds: ma_data_source_base,
    pub pData: *mut ma_paged_audio_buffer_data,
    pub pCurrent: *mut ma_paged_audio_buffer_page,
    pub relativeCursor: ma_uint64,
    pub absoluteCursor: ma_uint64,
}
#[test]
fn bindgen_test_layout_ma_paged_audio_buffer() {
    const UNINIT: ::std::mem::MaybeUninit<ma_paged_audio_buffer> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_paged_audio_buffer>(),
        104usize,
        concat!("Size of: ", stringify!(ma_paged_audio_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_paged_audio_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_paged_audio_buffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ds) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_paged_audio_buffer),
        "::",
        stringify!(ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pData) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_paged_audio_buffer),
        "::",
        stringify!(pData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCurrent) as usize - ptr as usize },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_paged_audio_buffer),
        "::",
        stringify!(pCurrent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).relativeCursor) as usize - ptr as usize },
        88usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_paged_audio_buffer),
        "::",
        stringify!(relativeCursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).absoluteCursor) as usize - ptr as usize },
        96usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_paged_audio_buffer),
        "::",
        stringify!(absoluteCursor)
        )
    );
}
extern "C" {
    pub fn ma_paged_audio_buffer_init(
        pConfig: *const ma_paged_audio_buffer_config,
        pPagedAudioBuffer: *mut ma_paged_audio_buffer,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_paged_audio_buffer_uninit(pPagedAudioBuffer: *mut ma_paged_audio_buffer);
}
extern "C" {
    pub fn ma_paged_audio_buffer_read_pcm_frames(
        pPagedAudioBuffer: *mut ma_paged_audio_buffer,
        pFramesOut: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        pFramesRead: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_paged_audio_buffer_seek_to_pcm_frame(
        pPagedAudioBuffer: *mut ma_paged_audio_buffer,
        frameIndex: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_paged_audio_buffer_get_cursor_in_pcm_frames(
        pPagedAudioBuffer: *mut ma_paged_audio_buffer,
        pCursor: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_paged_audio_buffer_get_length_in_pcm_frames(
        pPagedAudioBuffer: *mut ma_paged_audio_buffer,
        pLength: *mut ma_uint64,
    ) -> ma_result;
}
#[doc = "VFS"]
#[doc = "==="]
#[doc = ""]
#[doc = "The VFS object (virtual file system) is what's used to customize file access. This is useful in cases where stdio FILE* based APIs may not be entirely"]
#[doc = "appropriate for a given situation."]
pub type ma_vfs = ::std::os::raw::c_void;
pub type ma_vfs_file = ma_handle;
pub const ma_open_mode_flags_MA_OPEN_MODE_READ: ma_open_mode_flags = 1;
pub const ma_open_mode_flags_MA_OPEN_MODE_WRITE: ma_open_mode_flags = 2;
pub type ma_open_mode_flags = ::std::os::raw::c_int;
pub const ma_seek_origin_ma_seek_origin_start: ma_seek_origin = 0;
pub const ma_seek_origin_ma_seek_origin_current: ma_seek_origin = 1;
pub const ma_seek_origin_ma_seek_origin_end: ma_seek_origin = 2;
pub type ma_seek_origin = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_file_info {
    pub sizeInBytes: ma_uint64,
}
#[test]
fn bindgen_test_layout_ma_file_info() {
    const UNINIT: ::std::mem::MaybeUninit<ma_file_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_file_info>(),
        8usize,
        concat!("Size of: ", stringify!(ma_file_info))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_file_info>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_file_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sizeInBytes) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_file_info),
        "::",
        stringify!(sizeInBytes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_vfs_callbacks {
    pub onOpen: ::std::option::Option<
        unsafe extern "C" fn(
            pVFS: *mut ma_vfs,
            pFilePath: *const ::std::os::raw::c_char,
            openMode: ma_uint32,
            pFile: *mut ma_vfs_file,
        ) -> ma_result,
    >,
    pub onOpenW: ::std::option::Option<
        unsafe extern "C" fn(
            pVFS: *mut ma_vfs,
            pFilePath: *const wchar_t,
            openMode: ma_uint32,
            pFile: *mut ma_vfs_file,
        ) -> ma_result,
    >,
    pub onClose: ::std::option::Option<
        unsafe extern "C" fn(pVFS: *mut ma_vfs, file: ma_vfs_file) -> ma_result,
    >,
    pub onRead: ::std::option::Option<
        unsafe extern "C" fn(
            pVFS: *mut ma_vfs,
            file: ma_vfs_file,
            pDst: *mut ::std::os::raw::c_void,
            sizeInBytes: usize,
            pBytesRead: *mut usize,
        ) -> ma_result,
    >,
    pub onWrite: ::std::option::Option<
        unsafe extern "C" fn(
            pVFS: *mut ma_vfs,
            file: ma_vfs_file,
            pSrc: *const ::std::os::raw::c_void,
            sizeInBytes: usize,
            pBytesWritten: *mut usize,
        ) -> ma_result,
    >,
    pub onSeek: ::std::option::Option<
        unsafe extern "C" fn(
            pVFS: *mut ma_vfs,
            file: ma_vfs_file,
            offset: ma_int64,
            origin: ma_seek_origin,
        ) -> ma_result,
    >,
    pub onTell: ::std::option::Option<
        unsafe extern "C" fn(
            pVFS: *mut ma_vfs,
            file: ma_vfs_file,
            pCursor: *mut ma_int64,
        ) -> ma_result,
    >,
    pub onInfo: ::std::option::Option<
        unsafe extern "C" fn(
            pVFS: *mut ma_vfs,
            file: ma_vfs_file,
            pInfo: *mut ma_file_info,
        ) -> ma_result,
    >,
}
#[test]
fn bindgen_test_layout_ma_vfs_callbacks() {
    const UNINIT: ::std::mem::MaybeUninit<ma_vfs_callbacks> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_vfs_callbacks>(),
        64usize,
        concat!("Size of: ", stringify!(ma_vfs_callbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_vfs_callbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_vfs_callbacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onOpen) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_vfs_callbacks),
        "::",
        stringify!(onOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onOpenW) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_vfs_callbacks),
        "::",
        stringify!(onOpenW)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onClose) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_vfs_callbacks),
        "::",
        stringify!(onClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onRead) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_vfs_callbacks),
        "::",
        stringify!(onRead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onWrite) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_vfs_callbacks),
        "::",
        stringify!(onWrite)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onSeek) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_vfs_callbacks),
        "::",
        stringify!(onSeek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onTell) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_vfs_callbacks),
        "::",
        stringify!(onTell)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onInfo) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_vfs_callbacks),
        "::",
        stringify!(onInfo)
        )
    );
}
extern "C" {
    pub fn ma_vfs_open(
        pVFS: *mut ma_vfs,
        pFilePath: *const ::std::os::raw::c_char,
        openMode: ma_uint32,
        pFile: *mut ma_vfs_file,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_vfs_open_w(
        pVFS: *mut ma_vfs,
        pFilePath: *const wchar_t,
        openMode: ma_uint32,
        pFile: *mut ma_vfs_file,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_vfs_close(pVFS: *mut ma_vfs, file: ma_vfs_file) -> ma_result;
}
extern "C" {
    pub fn ma_vfs_read(
        pVFS: *mut ma_vfs,
        file: ma_vfs_file,
        pDst: *mut ::std::os::raw::c_void,
        sizeInBytes: usize,
        pBytesRead: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_vfs_write(
        pVFS: *mut ma_vfs,
        file: ma_vfs_file,
        pSrc: *const ::std::os::raw::c_void,
        sizeInBytes: usize,
        pBytesWritten: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_vfs_seek(
        pVFS: *mut ma_vfs,
        file: ma_vfs_file,
        offset: ma_int64,
        origin: ma_seek_origin,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_vfs_tell(pVFS: *mut ma_vfs, file: ma_vfs_file, pCursor: *mut ma_int64) -> ma_result;
}
extern "C" {
    pub fn ma_vfs_info(pVFS: *mut ma_vfs, file: ma_vfs_file, pInfo: *mut ma_file_info)
                       -> ma_result;
}
extern "C" {
    pub fn ma_vfs_open_and_read_file(
        pVFS: *mut ma_vfs,
        pFilePath: *const ::std::os::raw::c_char,
        ppData: *mut *mut ::std::os::raw::c_void,
        pSize: *mut usize,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    ) -> ma_result;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_default_vfs {
    pub cb: ma_vfs_callbacks,
    pub allocationCallbacks: ma_allocation_callbacks,
}
#[test]
fn bindgen_test_layout_ma_default_vfs() {
    const UNINIT: ::std::mem::MaybeUninit<ma_default_vfs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_default_vfs>(),
        96usize,
        concat!("Size of: ", stringify!(ma_default_vfs))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_default_vfs>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_default_vfs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_default_vfs),
        "::",
        stringify!(cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocationCallbacks) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_default_vfs),
        "::",
        stringify!(allocationCallbacks)
        )
    );
}
extern "C" {
    pub fn ma_default_vfs_init(
        pVFS: *mut ma_default_vfs,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    ) -> ma_result;
}
pub type ma_read_proc = ::std::option::Option<
    unsafe extern "C" fn(
        pUserData: *mut ::std::os::raw::c_void,
        pBufferOut: *mut ::std::os::raw::c_void,
        bytesToRead: usize,
        pBytesRead: *mut usize,
    ) -> ma_result,
>;
pub type ma_seek_proc = ::std::option::Option<
    unsafe extern "C" fn(
        pUserData: *mut ::std::os::raw::c_void,
        offset: ma_int64,
        origin: ma_seek_origin,
    ) -> ma_result,
>;
pub type ma_tell_proc = ::std::option::Option<
    unsafe extern "C" fn(
        pUserData: *mut ::std::os::raw::c_void,
        pCursor: *mut ma_int64,
    ) -> ma_result,
>;
pub const ma_encoding_format_ma_encoding_format_unknown: ma_encoding_format = 0;
pub const ma_encoding_format_ma_encoding_format_wav: ma_encoding_format = 1;
pub const ma_encoding_format_ma_encoding_format_flac: ma_encoding_format = 2;
pub const ma_encoding_format_ma_encoding_format_mp3: ma_encoding_format = 3;
pub const ma_encoding_format_ma_encoding_format_vorbis: ma_encoding_format = 4;
pub type ma_encoding_format = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_decoding_backend_config {
    pub preferredFormat: ma_format,
    pub seekPointCount: ma_uint32,
}
#[test]
fn bindgen_test_layout_ma_decoding_backend_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_decoding_backend_config> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_decoding_backend_config>(),
        8usize,
        concat!("Size of: ", stringify!(ma_decoding_backend_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_decoding_backend_config>(),
        4usize,
        concat!("Alignment of ", stringify!(ma_decoding_backend_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preferredFormat) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoding_backend_config),
        "::",
        stringify!(preferredFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seekPointCount) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoding_backend_config),
        "::",
        stringify!(seekPointCount)
        )
    );
}
extern "C" {
    pub fn ma_decoding_backend_config_init(
        preferredFormat: ma_format,
        seekPointCount: ma_uint32,
    ) -> ma_decoding_backend_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_decoding_backend_vtable {
    pub onInit: ::std::option::Option<
        unsafe extern "C" fn(
            pUserData: *mut ::std::os::raw::c_void,
            onRead: ma_read_proc,
            onSeek: ma_seek_proc,
            onTell: ma_tell_proc,
            pReadSeekTellUserData: *mut ::std::os::raw::c_void,
            pConfig: *const ma_decoding_backend_config,
            pAllocationCallbacks: *const ma_allocation_callbacks,
            ppBackend: *mut *mut ma_data_source,
        ) -> ma_result,
    >,
    pub onInitFile: ::std::option::Option<
        unsafe extern "C" fn(
            pUserData: *mut ::std::os::raw::c_void,
            pFilePath: *const ::std::os::raw::c_char,
            pConfig: *const ma_decoding_backend_config,
            pAllocationCallbacks: *const ma_allocation_callbacks,
            ppBackend: *mut *mut ma_data_source,
        ) -> ma_result,
    >,
    pub onInitFileW: ::std::option::Option<
        unsafe extern "C" fn(
            pUserData: *mut ::std::os::raw::c_void,
            pFilePath: *const wchar_t,
            pConfig: *const ma_decoding_backend_config,
            pAllocationCallbacks: *const ma_allocation_callbacks,
            ppBackend: *mut *mut ma_data_source,
        ) -> ma_result,
    >,
    pub onInitMemory: ::std::option::Option<
        unsafe extern "C" fn(
            pUserData: *mut ::std::os::raw::c_void,
            pData: *const ::std::os::raw::c_void,
            dataSize: usize,
            pConfig: *const ma_decoding_backend_config,
            pAllocationCallbacks: *const ma_allocation_callbacks,
            ppBackend: *mut *mut ma_data_source,
        ) -> ma_result,
    >,
    pub onUninit: ::std::option::Option<
        unsafe extern "C" fn(
            pUserData: *mut ::std::os::raw::c_void,
            pBackend: *mut ma_data_source,
            pAllocationCallbacks: *const ma_allocation_callbacks,
        ),
    >,
}
#[test]
fn bindgen_test_layout_ma_decoding_backend_vtable() {
    const UNINIT: ::std::mem::MaybeUninit<ma_decoding_backend_vtable> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_decoding_backend_vtable>(),
        40usize,
        concat!("Size of: ", stringify!(ma_decoding_backend_vtable))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_decoding_backend_vtable>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_decoding_backend_vtable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onInit) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoding_backend_vtable),
        "::",
        stringify!(onInit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onInitFile) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoding_backend_vtable),
        "::",
        stringify!(onInitFile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onInitFileW) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoding_backend_vtable),
        "::",
        stringify!(onInitFileW)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onInitMemory) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoding_backend_vtable),
        "::",
        stringify!(onInitMemory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onUninit) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoding_backend_vtable),
        "::",
        stringify!(onUninit)
        )
    );
}
pub type ma_decoder_read_proc = ::std::option::Option<
    unsafe extern "C" fn(
        pDecoder: *mut ma_decoder,
        pBufferOut: *mut ::std::os::raw::c_void,
        bytesToRead: usize,
        pBytesRead: *mut usize,
    ) -> ma_result,
>;
pub type ma_decoder_seek_proc = ::std::option::Option<
    unsafe extern "C" fn(
        pDecoder: *mut ma_decoder,
        byteOffset: ma_int64,
        origin: ma_seek_origin,
    ) -> ma_result,
>;
pub type ma_decoder_tell_proc = ::std::option::Option<
    unsafe extern "C" fn(pDecoder: *mut ma_decoder, pCursor: *mut ma_int64) -> ma_result,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_decoder_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub pChannelMap: *mut ma_channel,
    pub channelMixMode: ma_channel_mix_mode,
    pub ditherMode: ma_dither_mode,
    pub resampling: ma_resampler_config,
    pub allocationCallbacks: ma_allocation_callbacks,
    pub encodingFormat: ma_encoding_format,
    pub seekPointCount: ma_uint32,
    pub ppCustomBackendVTables: *mut *mut ma_decoding_backend_vtable,
    pub customBackendCount: ma_uint32,
    pub pCustomBackendUserData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ma_decoder_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_decoder_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_decoder_config>(),
        144usize,
        concat!("Size of: ", stringify!(ma_decoder_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_decoder_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_decoder_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder_config),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder_config),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder_config),
        "::",
        stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pChannelMap) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder_config),
        "::",
        stringify!(pChannelMap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelMixMode) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder_config),
        "::",
        stringify!(channelMixMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ditherMode) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder_config),
        "::",
        stringify!(ditherMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resampling) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder_config),
        "::",
        stringify!(resampling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocationCallbacks) as usize - ptr as usize },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder_config),
        "::",
        stringify!(allocationCallbacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encodingFormat) as usize - ptr as usize },
        112usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder_config),
        "::",
        stringify!(encodingFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seekPointCount) as usize - ptr as usize },
        116usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder_config),
        "::",
        stringify!(seekPointCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppCustomBackendVTables) as usize - ptr as usize },
        120usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder_config),
        "::",
        stringify!(ppCustomBackendVTables)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).customBackendCount) as usize - ptr as usize },
        128usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder_config),
        "::",
        stringify!(customBackendCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCustomBackendUserData) as usize - ptr as usize },
        136usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder_config),
        "::",
        stringify!(pCustomBackendUserData)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_decoder {
    pub ds: ma_data_source_base,
    pub pBackend: *mut ma_data_source,
    pub pBackendVTable: *const ma_decoding_backend_vtable,
    pub pBackendUserData: *mut ::std::os::raw::c_void,
    pub onRead: ma_decoder_read_proc,
    pub onSeek: ma_decoder_seek_proc,
    pub onTell: ma_decoder_tell_proc,
    pub pUserData: *mut ::std::os::raw::c_void,
    pub readPointerInPCMFrames: ma_uint64,
    pub outputFormat: ma_format,
    pub outputChannels: ma_uint32,
    pub outputSampleRate: ma_uint32,
    pub converter: ma_data_converter,
    pub pInputCache: *mut ::std::os::raw::c_void,
    pub inputCacheCap: ma_uint64,
    pub inputCacheConsumed: ma_uint64,
    pub inputCacheRemaining: ma_uint64,
    pub allocationCallbacks: ma_allocation_callbacks,
    pub data: ma_decoder__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_decoder__bindgen_ty_1 {
    pub vfs: ma_decoder__bindgen_ty_1__bindgen_ty_1,
    pub memory: ma_decoder__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_decoder__bindgen_ty_1__bindgen_ty_1 {
    pub pVFS: *mut ma_vfs,
    pub file: ma_vfs_file,
}
#[test]
fn bindgen_test_layout_ma_decoder__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_decoder__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_decoder__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
        "Size of: ",
        stringify!(ma_decoder__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_decoder__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_decoder__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVFS) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder__bindgen_ty_1__bindgen_ty_1),
        "::",
        stringify!(pVFS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder__bindgen_ty_1__bindgen_ty_1),
        "::",
        stringify!(file)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_decoder__bindgen_ty_1__bindgen_ty_2 {
    pub pData: *const ma_uint8,
    pub dataSize: usize,
    pub currentReadPos: usize,
}
#[test]
fn bindgen_test_layout_ma_decoder__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<ma_decoder__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_decoder__bindgen_ty_1__bindgen_ty_2>(),
        24usize,
        concat!(
        "Size of: ",
        stringify!(ma_decoder__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_decoder__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_decoder__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pData) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder__bindgen_ty_1__bindgen_ty_2),
        "::",
        stringify!(pData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataSize) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder__bindgen_ty_1__bindgen_ty_2),
        "::",
        stringify!(dataSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).currentReadPos) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder__bindgen_ty_1__bindgen_ty_2),
        "::",
        stringify!(currentReadPos)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_decoder__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_decoder__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_decoder__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(ma_decoder__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_decoder__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_decoder__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vfs) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder__bindgen_ty_1),
        "::",
        stringify!(vfs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder__bindgen_ty_1),
        "::",
        stringify!(memory)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_decoder() {
    const UNINIT: ::std::mem::MaybeUninit<ma_decoder> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_decoder>(),
        552usize,
        concat!("Size of: ", stringify!(ma_decoder))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_decoder>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_decoder))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ds) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder),
        "::",
        stringify!(ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pBackend) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder),
        "::",
        stringify!(pBackend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pBackendVTable) as usize - ptr as usize },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder),
        "::",
        stringify!(pBackendVTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pBackendUserData) as usize - ptr as usize },
        88usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder),
        "::",
        stringify!(pBackendUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onRead) as usize - ptr as usize },
        96usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder),
        "::",
        stringify!(onRead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onSeek) as usize - ptr as usize },
        104usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder),
        "::",
        stringify!(onSeek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onTell) as usize - ptr as usize },
        112usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder),
        "::",
        stringify!(onTell)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pUserData) as usize - ptr as usize },
        120usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder),
        "::",
        stringify!(pUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readPointerInPCMFrames) as usize - ptr as usize },
        128usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder),
        "::",
        stringify!(readPointerInPCMFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outputFormat) as usize - ptr as usize },
        136usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder),
        "::",
        stringify!(outputFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outputChannels) as usize - ptr as usize },
        140usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder),
        "::",
        stringify!(outputChannels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outputSampleRate) as usize - ptr as usize },
        144usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder),
        "::",
        stringify!(outputSampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).converter) as usize - ptr as usize },
        152usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder),
        "::",
        stringify!(converter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInputCache) as usize - ptr as usize },
        464usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder),
        "::",
        stringify!(pInputCache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputCacheCap) as usize - ptr as usize },
        472usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder),
        "::",
        stringify!(inputCacheCap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputCacheConsumed) as usize - ptr as usize },
        480usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder),
        "::",
        stringify!(inputCacheConsumed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputCacheRemaining) as usize - ptr as usize },
        488usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder),
        "::",
        stringify!(inputCacheRemaining)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocationCallbacks) as usize - ptr as usize },
        496usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder),
        "::",
        stringify!(allocationCallbacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        528usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_decoder),
        "::",
        stringify!(data)
        )
    );
}
extern "C" {
    pub fn ma_decoder_config_init(
        outputFormat: ma_format,
        outputChannels: ma_uint32,
        outputSampleRate: ma_uint32,
    ) -> ma_decoder_config;
}
extern "C" {
    pub fn ma_decoder_config_init_default() -> ma_decoder_config;
}
extern "C" {
    pub fn ma_decoder_init(
        onRead: ma_decoder_read_proc,
        onSeek: ma_decoder_seek_proc,
        pUserData: *mut ::std::os::raw::c_void,
        pConfig: *const ma_decoder_config,
        pDecoder: *mut ma_decoder,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_decoder_init_memory(
        pData: *const ::std::os::raw::c_void,
        dataSize: usize,
        pConfig: *const ma_decoder_config,
        pDecoder: *mut ma_decoder,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_decoder_init_vfs(
        pVFS: *mut ma_vfs,
        pFilePath: *const ::std::os::raw::c_char,
        pConfig: *const ma_decoder_config,
        pDecoder: *mut ma_decoder,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_decoder_init_vfs_w(
        pVFS: *mut ma_vfs,
        pFilePath: *const wchar_t,
        pConfig: *const ma_decoder_config,
        pDecoder: *mut ma_decoder,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_decoder_init_file(
        pFilePath: *const ::std::os::raw::c_char,
        pConfig: *const ma_decoder_config,
        pDecoder: *mut ma_decoder,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_decoder_init_file_w(
        pFilePath: *const wchar_t,
        pConfig: *const ma_decoder_config,
        pDecoder: *mut ma_decoder,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_decoder_uninit(pDecoder: *mut ma_decoder) -> ma_result;
}
extern "C" {
    pub fn ma_decoder_read_pcm_frames(
        pDecoder: *mut ma_decoder,
        pFramesOut: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        pFramesRead: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_decoder_seek_to_pcm_frame(
        pDecoder: *mut ma_decoder,
        frameIndex: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_decoder_get_data_format(
        pDecoder: *mut ma_decoder,
        pFormat: *mut ma_format,
        pChannels: *mut ma_uint32,
        pSampleRate: *mut ma_uint32,
        pChannelMap: *mut ma_channel,
        channelMapCap: usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_decoder_get_cursor_in_pcm_frames(
        pDecoder: *mut ma_decoder,
        pCursor: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_decoder_get_length_in_pcm_frames(
        pDecoder: *mut ma_decoder,
        pLength: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_decoder_get_available_frames(
        pDecoder: *mut ma_decoder,
        pAvailableFrames: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_decode_from_vfs(
        pVFS: *mut ma_vfs,
        pFilePath: *const ::std::os::raw::c_char,
        pConfig: *mut ma_decoder_config,
        pFrameCountOut: *mut ma_uint64,
        ppPCMFramesOut: *mut *mut ::std::os::raw::c_void,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_decode_file(
        pFilePath: *const ::std::os::raw::c_char,
        pConfig: *mut ma_decoder_config,
        pFrameCountOut: *mut ma_uint64,
        ppPCMFramesOut: *mut *mut ::std::os::raw::c_void,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_decode_memory(
        pData: *const ::std::os::raw::c_void,
        dataSize: usize,
        pConfig: *mut ma_decoder_config,
        pFrameCountOut: *mut ma_uint64,
        ppPCMFramesOut: *mut *mut ::std::os::raw::c_void,
    ) -> ma_result;
}
pub type ma_encoder_write_proc = ::std::option::Option<
    unsafe extern "C" fn(
        pEncoder: *mut ma_encoder,
        pBufferIn: *const ::std::os::raw::c_void,
        bytesToWrite: usize,
        pBytesWritten: *mut usize,
    ) -> ma_result,
>;
pub type ma_encoder_seek_proc = ::std::option::Option<
    unsafe extern "C" fn(
        pEncoder: *mut ma_encoder,
        offset: ma_int64,
        origin: ma_seek_origin,
    ) -> ma_result,
>;
pub type ma_encoder_init_proc =
::std::option::Option<unsafe extern "C" fn(pEncoder: *mut ma_encoder) -> ma_result>;
pub type ma_encoder_uninit_proc =
::std::option::Option<unsafe extern "C" fn(pEncoder: *mut ma_encoder)>;
pub type ma_encoder_write_pcm_frames_proc = ::std::option::Option<
    unsafe extern "C" fn(
        pEncoder: *mut ma_encoder,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
        pFramesWritten: *mut ma_uint64,
    ) -> ma_result,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_encoder_config {
    pub encodingFormat: ma_encoding_format,
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub allocationCallbacks: ma_allocation_callbacks,
}
#[test]
fn bindgen_test_layout_ma_encoder_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_encoder_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_encoder_config>(),
        48usize,
        concat!("Size of: ", stringify!(ma_encoder_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_encoder_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_encoder_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encodingFormat) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_encoder_config),
        "::",
        stringify!(encodingFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_encoder_config),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_encoder_config),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_encoder_config),
        "::",
        stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocationCallbacks) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_encoder_config),
        "::",
        stringify!(allocationCallbacks)
        )
    );
}
extern "C" {
    pub fn ma_encoder_config_init(
        encodingFormat: ma_encoding_format,
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
    ) -> ma_encoder_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_encoder {
    pub config: ma_encoder_config,
    pub onWrite: ma_encoder_write_proc,
    pub onSeek: ma_encoder_seek_proc,
    pub onInit: ma_encoder_init_proc,
    pub onUninit: ma_encoder_uninit_proc,
    pub onWritePCMFrames: ma_encoder_write_pcm_frames_proc,
    pub pUserData: *mut ::std::os::raw::c_void,
    pub pInternalEncoder: *mut ::std::os::raw::c_void,
    pub data: ma_encoder__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_encoder__bindgen_ty_1 {
    pub vfs: ma_encoder__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_encoder__bindgen_ty_1__bindgen_ty_1 {
    pub pVFS: *mut ma_vfs,
    pub file: ma_vfs_file,
}
#[test]
fn bindgen_test_layout_ma_encoder__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_encoder__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_encoder__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
        "Size of: ",
        stringify!(ma_encoder__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_encoder__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_encoder__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVFS) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_encoder__bindgen_ty_1__bindgen_ty_1),
        "::",
        stringify!(pVFS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_encoder__bindgen_ty_1__bindgen_ty_1),
        "::",
        stringify!(file)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_encoder__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_encoder__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_encoder__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(ma_encoder__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_encoder__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_encoder__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vfs) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_encoder__bindgen_ty_1),
        "::",
        stringify!(vfs)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_encoder() {
    const UNINIT: ::std::mem::MaybeUninit<ma_encoder> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_encoder>(),
        120usize,
        concat!("Size of: ", stringify!(ma_encoder))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_encoder>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_encoder))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_encoder),
        "::",
        stringify!(config)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onWrite) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_encoder),
        "::",
        stringify!(onWrite)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onSeek) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_encoder),
        "::",
        stringify!(onSeek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onInit) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_encoder),
        "::",
        stringify!(onInit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onUninit) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_encoder),
        "::",
        stringify!(onUninit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onWritePCMFrames) as usize - ptr as usize },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_encoder),
        "::",
        stringify!(onWritePCMFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pUserData) as usize - ptr as usize },
        88usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_encoder),
        "::",
        stringify!(pUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInternalEncoder) as usize - ptr as usize },
        96usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_encoder),
        "::",
        stringify!(pInternalEncoder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        104usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_encoder),
        "::",
        stringify!(data)
        )
    );
}
extern "C" {
    pub fn ma_encoder_init(
        onWrite: ma_encoder_write_proc,
        onSeek: ma_encoder_seek_proc,
        pUserData: *mut ::std::os::raw::c_void,
        pConfig: *const ma_encoder_config,
        pEncoder: *mut ma_encoder,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_encoder_init_vfs(
        pVFS: *mut ma_vfs,
        pFilePath: *const ::std::os::raw::c_char,
        pConfig: *const ma_encoder_config,
        pEncoder: *mut ma_encoder,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_encoder_init_vfs_w(
        pVFS: *mut ma_vfs,
        pFilePath: *const wchar_t,
        pConfig: *const ma_encoder_config,
        pEncoder: *mut ma_encoder,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_encoder_init_file(
        pFilePath: *const ::std::os::raw::c_char,
        pConfig: *const ma_encoder_config,
        pEncoder: *mut ma_encoder,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_encoder_init_file_w(
        pFilePath: *const wchar_t,
        pConfig: *const ma_encoder_config,
        pEncoder: *mut ma_encoder,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_encoder_uninit(pEncoder: *mut ma_encoder);
}
extern "C" {
    pub fn ma_encoder_write_pcm_frames(
        pEncoder: *mut ma_encoder,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
        pFramesWritten: *mut ma_uint64,
    ) -> ma_result;
}
pub const ma_waveform_type_ma_waveform_type_sine: ma_waveform_type = 0;
pub const ma_waveform_type_ma_waveform_type_square: ma_waveform_type = 1;
pub const ma_waveform_type_ma_waveform_type_triangle: ma_waveform_type = 2;
pub const ma_waveform_type_ma_waveform_type_sawtooth: ma_waveform_type = 3;
pub type ma_waveform_type = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_waveform_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub type_: ma_waveform_type,
    pub amplitude: f64,
    pub frequency: f64,
}
#[test]
fn bindgen_test_layout_ma_waveform_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_waveform_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_waveform_config>(),
        32usize,
        concat!("Size of: ", stringify!(ma_waveform_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_waveform_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_waveform_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_waveform_config),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_waveform_config),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_waveform_config),
        "::",
        stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_waveform_config),
        "::",
        stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amplitude) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_waveform_config),
        "::",
        stringify!(amplitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frequency) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_waveform_config),
        "::",
        stringify!(frequency)
        )
    );
}
extern "C" {
    pub fn ma_waveform_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        type_: ma_waveform_type,
        amplitude: f64,
        frequency: f64,
    ) -> ma_waveform_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_waveform {
    pub ds: ma_data_source_base,
    pub config: ma_waveform_config,
    pub advance: f64,
    pub time: f64,
}
#[test]
fn bindgen_test_layout_ma_waveform() {
    const UNINIT: ::std::mem::MaybeUninit<ma_waveform> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_waveform>(),
        120usize,
        concat!("Size of: ", stringify!(ma_waveform))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_waveform>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_waveform))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ds) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_waveform),
        "::",
        stringify!(ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_waveform),
        "::",
        stringify!(config)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).advance) as usize - ptr as usize },
        104usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_waveform),
        "::",
        stringify!(advance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        112usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_waveform),
        "::",
        stringify!(time)
        )
    );
}
extern "C" {
    pub fn ma_waveform_init(
        pConfig: *const ma_waveform_config,
        pWaveform: *mut ma_waveform,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_waveform_uninit(pWaveform: *mut ma_waveform);
}
extern "C" {
    pub fn ma_waveform_read_pcm_frames(
        pWaveform: *mut ma_waveform,
        pFramesOut: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        pFramesRead: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_waveform_seek_to_pcm_frame(
        pWaveform: *mut ma_waveform,
        frameIndex: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_waveform_set_amplitude(pWaveform: *mut ma_waveform, amplitude: f64) -> ma_result;
}
extern "C" {
    pub fn ma_waveform_set_frequency(pWaveform: *mut ma_waveform, frequency: f64) -> ma_result;
}
extern "C" {
    pub fn ma_waveform_set_type(pWaveform: *mut ma_waveform, type_: ma_waveform_type) -> ma_result;
}
extern "C" {
    pub fn ma_waveform_set_sample_rate(
        pWaveform: *mut ma_waveform,
        sampleRate: ma_uint32,
    ) -> ma_result;
}
pub const ma_noise_type_ma_noise_type_white: ma_noise_type = 0;
pub const ma_noise_type_ma_noise_type_pink: ma_noise_type = 1;
pub const ma_noise_type_ma_noise_type_brownian: ma_noise_type = 2;
pub type ma_noise_type = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_noise_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub type_: ma_noise_type,
    pub seed: ma_int32,
    pub amplitude: f64,
    pub duplicateChannels: ma_bool32,
}
#[test]
fn bindgen_test_layout_ma_noise_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_noise_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_noise_config>(),
        32usize,
        concat!("Size of: ", stringify!(ma_noise_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_noise_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_noise_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_noise_config),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_noise_config),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_noise_config),
        "::",
        stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seed) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_noise_config),
        "::",
        stringify!(seed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amplitude) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_noise_config),
        "::",
        stringify!(amplitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).duplicateChannels) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_noise_config),
        "::",
        stringify!(duplicateChannels)
        )
    );
}
extern "C" {
    pub fn ma_noise_config_init(
        format: ma_format,
        channels: ma_uint32,
        type_: ma_noise_type,
        seed: ma_int32,
        amplitude: f64,
    ) -> ma_noise_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_noise {
    pub ds: ma_data_source_vtable,
    pub config: ma_noise_config,
    pub lcg: ma_lcg,
    pub state: ma_noise__bindgen_ty_1,
    pub _pHeap: *mut ::std::os::raw::c_void,
    pub _ownsHeap: ma_bool32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_noise__bindgen_ty_1 {
    pub pink: ma_noise__bindgen_ty_1__bindgen_ty_1,
    pub brownian: ma_noise__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_noise__bindgen_ty_1__bindgen_ty_1 {
    pub bin: *mut *mut f64,
    pub accumulation: *mut f64,
    pub counter: *mut ma_uint32,
}
#[test]
fn bindgen_test_layout_ma_noise__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_noise__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_noise__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!(
        "Size of: ",
        stringify!(ma_noise__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_noise__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_noise__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bin) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_noise__bindgen_ty_1__bindgen_ty_1),
        "::",
        stringify!(bin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accumulation) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_noise__bindgen_ty_1__bindgen_ty_1),
        "::",
        stringify!(accumulation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counter) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_noise__bindgen_ty_1__bindgen_ty_1),
        "::",
        stringify!(counter)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_noise__bindgen_ty_1__bindgen_ty_2 {
    pub accumulation: *mut f64,
}
#[test]
fn bindgen_test_layout_ma_noise__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<ma_noise__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_noise__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
        "Size of: ",
        stringify!(ma_noise__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_noise__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_noise__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accumulation) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_noise__bindgen_ty_1__bindgen_ty_2),
        "::",
        stringify!(accumulation)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_noise__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_noise__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_noise__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(ma_noise__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_noise__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_noise__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pink) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_noise__bindgen_ty_1),
        "::",
        stringify!(pink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).brownian) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_noise__bindgen_ty_1),
        "::",
        stringify!(brownian)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_noise() {
    const UNINIT: ::std::mem::MaybeUninit<ma_noise> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_noise>(),
        136usize,
        concat!("Size of: ", stringify!(ma_noise))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_noise>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_noise))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ds) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_noise),
        "::",
        stringify!(ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_noise),
        "::",
        stringify!(config)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lcg) as usize - ptr as usize },
        88usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_noise),
        "::",
        stringify!(lcg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        96usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_noise),
        "::",
        stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pHeap) as usize - ptr as usize },
        120usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_noise),
        "::",
        stringify!(_pHeap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ownsHeap) as usize - ptr as usize },
        128usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_noise),
        "::",
        stringify!(_ownsHeap)
        )
    );
}
extern "C" {
    pub fn ma_noise_get_heap_size(
        pConfig: *const ma_noise_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_noise_init_preallocated(
        pConfig: *const ma_noise_config,
        pHeap: *mut ::std::os::raw::c_void,
        pNoise: *mut ma_noise,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_noise_init(
        pConfig: *const ma_noise_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pNoise: *mut ma_noise,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_noise_uninit(
        pNoise: *mut ma_noise,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
extern "C" {
    pub fn ma_noise_read_pcm_frames(
        pNoise: *mut ma_noise,
        pFramesOut: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        pFramesRead: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_noise_set_amplitude(pNoise: *mut ma_noise, amplitude: f64) -> ma_result;
}
extern "C" {
    pub fn ma_noise_set_seed(pNoise: *mut ma_noise, seed: ma_int32) -> ma_result;
}
extern "C" {
    pub fn ma_noise_set_type(pNoise: *mut ma_noise, type_: ma_noise_type) -> ma_result;
}
pub const ma_resource_manager_data_source_flags_MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_STREAM:
ma_resource_manager_data_source_flags = 1;
pub const ma_resource_manager_data_source_flags_MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_DECODE:
ma_resource_manager_data_source_flags = 2;
pub const ma_resource_manager_data_source_flags_MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_ASYNC:
ma_resource_manager_data_source_flags = 4;
pub const ma_resource_manager_data_source_flags_MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_WAIT_INIT:
ma_resource_manager_data_source_flags = 8;
pub const ma_resource_manager_data_source_flags_MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_UNKNOWN_LENGTH : ma_resource_manager_data_source_flags = 16 ;
pub type ma_resource_manager_data_source_flags = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_resource_manager_pipeline_stage_notification {
    pub pNotification: *mut ma_async_notification,
    pub pFence: *mut ma_fence,
}
#[test]
fn bindgen_test_layout_ma_resource_manager_pipeline_stage_notification() {
    const UNINIT: ::std::mem::MaybeUninit<ma_resource_manager_pipeline_stage_notification> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_resource_manager_pipeline_stage_notification>(),
        16usize,
        concat!(
        "Size of: ",
        stringify!(ma_resource_manager_pipeline_stage_notification)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_resource_manager_pipeline_stage_notification>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_resource_manager_pipeline_stage_notification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNotification) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_pipeline_stage_notification),
        "::",
        stringify!(pNotification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pFence) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_pipeline_stage_notification),
        "::",
        stringify!(pFence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_resource_manager_pipeline_notifications {
    pub init: ma_resource_manager_pipeline_stage_notification,
    pub done: ma_resource_manager_pipeline_stage_notification,
}
#[test]
fn bindgen_test_layout_ma_resource_manager_pipeline_notifications() {
    const UNINIT: ::std::mem::MaybeUninit<ma_resource_manager_pipeline_notifications> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_resource_manager_pipeline_notifications>(),
        32usize,
        concat!(
        "Size of: ",
        stringify!(ma_resource_manager_pipeline_notifications)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_resource_manager_pipeline_notifications>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_resource_manager_pipeline_notifications)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_pipeline_notifications),
        "::",
        stringify!(init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).done) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_pipeline_notifications),
        "::",
        stringify!(done)
        )
    );
}
extern "C" {
    pub fn ma_resource_manager_pipeline_notifications_init(
    ) -> ma_resource_manager_pipeline_notifications;
}
pub const ma_resource_manager_flags_MA_RESOURCE_MANAGER_FLAG_NON_BLOCKING:
ma_resource_manager_flags = 1;
pub const ma_resource_manager_flags_MA_RESOURCE_MANAGER_FLAG_NO_THREADING:
ma_resource_manager_flags = 2;
pub type ma_resource_manager_flags = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_resource_manager_data_source_config {
    pub pFilePath: *const ::std::os::raw::c_char,
    pub pFilePathW: *const wchar_t,
    pub pNotifications: *const ma_resource_manager_pipeline_notifications,
    pub initialSeekPointInPCMFrames: ma_uint64,
    pub rangeBegInPCMFrames: ma_uint64,
    pub rangeEndInPCMFrames: ma_uint64,
    pub loopPointBegInPCMFrames: ma_uint64,
    pub loopPointEndInPCMFrames: ma_uint64,
    pub isLooping: ma_bool32,
    pub flags: ma_uint32,
}
#[test]
fn bindgen_test_layout_ma_resource_manager_data_source_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_resource_manager_data_source_config> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_resource_manager_data_source_config>(),
        72usize,
        concat!(
        "Size of: ",
        stringify!(ma_resource_manager_data_source_config)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_resource_manager_data_source_config>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_resource_manager_data_source_config)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pFilePath) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_source_config),
        "::",
        stringify!(pFilePath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pFilePathW) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_source_config),
        "::",
        stringify!(pFilePathW)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNotifications) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_source_config),
        "::",
        stringify!(pNotifications)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialSeekPointInPCMFrames) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_source_config),
        "::",
        stringify!(initialSeekPointInPCMFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rangeBegInPCMFrames) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_source_config),
        "::",
        stringify!(rangeBegInPCMFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rangeEndInPCMFrames) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_source_config),
        "::",
        stringify!(rangeEndInPCMFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loopPointBegInPCMFrames) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_source_config),
        "::",
        stringify!(loopPointBegInPCMFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loopPointEndInPCMFrames) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_source_config),
        "::",
        stringify!(loopPointEndInPCMFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isLooping) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_source_config),
        "::",
        stringify!(isLooping)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        68usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_source_config),
        "::",
        stringify!(flags)
        )
    );
}
extern "C" {
    pub fn ma_resource_manager_data_source_config_init() -> ma_resource_manager_data_source_config;
}
pub const ma_resource_manager_data_supply_type_ma_resource_manager_data_supply_type_unknown:
ma_resource_manager_data_supply_type = 0;
pub const ma_resource_manager_data_supply_type_ma_resource_manager_data_supply_type_encoded:
ma_resource_manager_data_supply_type = 1;
pub const ma_resource_manager_data_supply_type_ma_resource_manager_data_supply_type_decoded:
ma_resource_manager_data_supply_type = 2;
pub const ma_resource_manager_data_supply_type_ma_resource_manager_data_supply_type_decoded_paged : ma_resource_manager_data_supply_type = 3 ;
pub type ma_resource_manager_data_supply_type = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_resource_manager_data_supply {
    pub type_: ma_resource_manager_data_supply_type,
    pub backend: ma_resource_manager_data_supply__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_resource_manager_data_supply__bindgen_ty_1 {
    pub encoded: ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_1,
    pub decoded: ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2,
    pub decodedPaged: ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_1 {
    pub pData: *const ::std::os::raw::c_void,
    pub sizeInBytes: usize,
}
#[test]
fn bindgen_test_layout_ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
        "Size of: ",
        stringify!(ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pData) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_1),
        "::",
        stringify!(pData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sizeInBytes) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_1),
        "::",
        stringify!(sizeInBytes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2 {
    pub pData: *const ::std::os::raw::c_void,
    pub totalFrameCount: ma_uint64,
    pub decodedFrameCount: ma_uint64,
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
}
#[test]
fn bindgen_test_layout_ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<
        ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2>(),
        40usize,
        concat!(
        "Size of: ",
        stringify!(ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pData) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2),
        "::",
        stringify!(pData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalFrameCount) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2),
        "::",
        stringify!(totalFrameCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decodedFrameCount) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2),
        "::",
        stringify!(decodedFrameCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2),
        "::",
        stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2),
        "::",
        stringify!(sampleRate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_3 {
    pub data: ma_paged_audio_buffer_data,
    pub decodedFrameCount: ma_uint64,
    pub sampleRate: ma_uint32,
}
#[test]
fn bindgen_test_layout_ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<
        ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_3,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_3>(),
        56usize,
        concat!(
        "Size of: ",
        stringify!(ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_3),
        "::",
        stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decodedFrameCount) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_3),
        "::",
        stringify!(decodedFrameCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_3),
        "::",
        stringify!(sampleRate)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_resource_manager_data_supply__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_resource_manager_data_supply__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_resource_manager_data_supply__bindgen_ty_1>(),
        56usize,
        concat!(
        "Size of: ",
        stringify!(ma_resource_manager_data_supply__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_resource_manager_data_supply__bindgen_ty_1>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_resource_manager_data_supply__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encoded) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_supply__bindgen_ty_1),
        "::",
        stringify!(encoded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decoded) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_supply__bindgen_ty_1),
        "::",
        stringify!(decoded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decodedPaged) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_supply__bindgen_ty_1),
        "::",
        stringify!(decodedPaged)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_resource_manager_data_supply() {
    const UNINIT: ::std::mem::MaybeUninit<ma_resource_manager_data_supply> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_resource_manager_data_supply>(),
        64usize,
        concat!("Size of: ", stringify!(ma_resource_manager_data_supply))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_resource_manager_data_supply>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_resource_manager_data_supply))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_supply),
        "::",
        stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backend) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_supply),
        "::",
        stringify!(backend)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_resource_manager_data_buffer_node {
    pub hashedName32: ma_uint32,
    pub refCount: ma_uint32,
    pub result: ma_result,
    pub executionCounter: ma_uint32,
    pub executionPointer: ma_uint32,
    pub isDataOwnedByResourceManager: ma_bool32,
    pub data: ma_resource_manager_data_supply,
    pub pParent: *mut ma_resource_manager_data_buffer_node,
    pub pChildLo: *mut ma_resource_manager_data_buffer_node,
    pub pChildHi: *mut ma_resource_manager_data_buffer_node,
}
#[test]
fn bindgen_test_layout_ma_resource_manager_data_buffer_node() {
    const UNINIT: ::std::mem::MaybeUninit<ma_resource_manager_data_buffer_node> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_resource_manager_data_buffer_node>(),
        112usize,
        concat!(
        "Size of: ",
        stringify!(ma_resource_manager_data_buffer_node)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_resource_manager_data_buffer_node>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_resource_manager_data_buffer_node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hashedName32) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_buffer_node),
        "::",
        stringify!(hashedName32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refCount) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_buffer_node),
        "::",
        stringify!(refCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_buffer_node),
        "::",
        stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).executionCounter) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_buffer_node),
        "::",
        stringify!(executionCounter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).executionPointer) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_buffer_node),
        "::",
        stringify!(executionPointer)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).isDataOwnedByResourceManager) as usize - ptr as usize
        },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_buffer_node),
        "::",
        stringify!(isDataOwnedByResourceManager)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_buffer_node),
        "::",
        stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pParent) as usize - ptr as usize },
        88usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_buffer_node),
        "::",
        stringify!(pParent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pChildLo) as usize - ptr as usize },
        96usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_buffer_node),
        "::",
        stringify!(pChildLo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pChildHi) as usize - ptr as usize },
        104usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_buffer_node),
        "::",
        stringify!(pChildHi)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_resource_manager_data_buffer {
    pub ds: ma_data_source_base,
    pub pResourceManager: *mut ma_resource_manager,
    pub pNode: *mut ma_resource_manager_data_buffer_node,
    pub flags: ma_uint32,
    pub executionCounter: ma_uint32,
    pub executionPointer: ma_uint32,
    pub seekTargetInPCMFrames: ma_uint64,
    pub seekToCursorOnNextRead: ma_bool32,
    pub result: ma_result,
    pub isLooping: ma_bool32,
    pub isConnectorInitialized: ma_bool32,
    pub connector: ma_resource_manager_data_buffer__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_resource_manager_data_buffer__bindgen_ty_1 {
    pub decoder: ma_decoder,
    pub buffer: ma_audio_buffer,
    pub pagedBuffer: ma_paged_audio_buffer,
}
#[test]
fn bindgen_test_layout_ma_resource_manager_data_buffer__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_resource_manager_data_buffer__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_resource_manager_data_buffer__bindgen_ty_1>(),
        552usize,
        concat!(
        "Size of: ",
        stringify!(ma_resource_manager_data_buffer__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_resource_manager_data_buffer__bindgen_ty_1>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_resource_manager_data_buffer__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decoder) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_buffer__bindgen_ty_1),
        "::",
        stringify!(decoder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_buffer__bindgen_ty_1),
        "::",
        stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pagedBuffer) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_buffer__bindgen_ty_1),
        "::",
        stringify!(pagedBuffer)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_resource_manager_data_buffer() {
    const UNINIT: ::std::mem::MaybeUninit<ma_resource_manager_data_buffer> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_resource_manager_data_buffer>(),
        680usize,
        concat!("Size of: ", stringify!(ma_resource_manager_data_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_resource_manager_data_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_resource_manager_data_buffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ds) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_buffer),
        "::",
        stringify!(ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pResourceManager) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_buffer),
        "::",
        stringify!(pResourceManager)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNode) as usize - ptr as usize },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_buffer),
        "::",
        stringify!(pNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        88usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_buffer),
        "::",
        stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).executionCounter) as usize - ptr as usize },
        92usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_buffer),
        "::",
        stringify!(executionCounter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).executionPointer) as usize - ptr as usize },
        96usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_buffer),
        "::",
        stringify!(executionPointer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seekTargetInPCMFrames) as usize - ptr as usize },
        104usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_buffer),
        "::",
        stringify!(seekTargetInPCMFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seekToCursorOnNextRead) as usize - ptr as usize },
        112usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_buffer),
        "::",
        stringify!(seekToCursorOnNextRead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        116usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_buffer),
        "::",
        stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isLooping) as usize - ptr as usize },
        120usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_buffer),
        "::",
        stringify!(isLooping)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isConnectorInitialized) as usize - ptr as usize },
        124usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_buffer),
        "::",
        stringify!(isConnectorInitialized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connector) as usize - ptr as usize },
        128usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_buffer),
        "::",
        stringify!(connector)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_resource_manager_data_stream {
    pub ds: ma_data_source_base,
    pub pResourceManager: *mut ma_resource_manager,
    pub flags: ma_uint32,
    pub decoder: ma_decoder,
    pub isDecoderInitialized: ma_bool32,
    pub totalLengthInPCMFrames: ma_uint64,
    pub relativeCursor: ma_uint32,
    pub absoluteCursor: ma_uint64,
    pub currentPageIndex: ma_uint32,
    pub executionCounter: ma_uint32,
    pub executionPointer: ma_uint32,
    pub isLooping: ma_bool32,
    pub pPageData: *mut ::std::os::raw::c_void,
    pub pageFrameCount: [ma_uint32; 2usize],
    pub result: ma_result,
    pub isDecoderAtEnd: ma_bool32,
    pub isPageValid: [ma_bool32; 2usize],
    pub seekCounter: ma_bool32,
}
#[test]
fn bindgen_test_layout_ma_resource_manager_data_stream() {
    const UNINIT: ::std::mem::MaybeUninit<ma_resource_manager_data_stream> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_resource_manager_data_stream>(),
        728usize,
        concat!("Size of: ", stringify!(ma_resource_manager_data_stream))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_resource_manager_data_stream>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_resource_manager_data_stream))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ds) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_stream),
        "::",
        stringify!(ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pResourceManager) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_stream),
        "::",
        stringify!(pResourceManager)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_stream),
        "::",
        stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decoder) as usize - ptr as usize },
        88usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_stream),
        "::",
        stringify!(decoder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isDecoderInitialized) as usize - ptr as usize },
        640usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_stream),
        "::",
        stringify!(isDecoderInitialized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalLengthInPCMFrames) as usize - ptr as usize },
        648usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_stream),
        "::",
        stringify!(totalLengthInPCMFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).relativeCursor) as usize - ptr as usize },
        656usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_stream),
        "::",
        stringify!(relativeCursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).absoluteCursor) as usize - ptr as usize },
        664usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_stream),
        "::",
        stringify!(absoluteCursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).currentPageIndex) as usize - ptr as usize },
        672usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_stream),
        "::",
        stringify!(currentPageIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).executionCounter) as usize - ptr as usize },
        676usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_stream),
        "::",
        stringify!(executionCounter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).executionPointer) as usize - ptr as usize },
        680usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_stream),
        "::",
        stringify!(executionPointer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isLooping) as usize - ptr as usize },
        684usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_stream),
        "::",
        stringify!(isLooping)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPageData) as usize - ptr as usize },
        688usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_stream),
        "::",
        stringify!(pPageData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pageFrameCount) as usize - ptr as usize },
        696usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_stream),
        "::",
        stringify!(pageFrameCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        704usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_stream),
        "::",
        stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isDecoderAtEnd) as usize - ptr as usize },
        708usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_stream),
        "::",
        stringify!(isDecoderAtEnd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isPageValid) as usize - ptr as usize },
        712usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_stream),
        "::",
        stringify!(isPageValid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seekCounter) as usize - ptr as usize },
        720usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_stream),
        "::",
        stringify!(seekCounter)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_resource_manager_data_source {
    pub backend: ma_resource_manager_data_source__bindgen_ty_1,
    pub flags: ma_uint32,
    pub executionCounter: ma_uint32,
    pub executionPointer: ma_uint32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_resource_manager_data_source__bindgen_ty_1 {
    pub buffer: ma_resource_manager_data_buffer,
    pub stream: ma_resource_manager_data_stream,
}
#[test]
fn bindgen_test_layout_ma_resource_manager_data_source__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ma_resource_manager_data_source__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_resource_manager_data_source__bindgen_ty_1>(),
        728usize,
        concat!(
        "Size of: ",
        stringify!(ma_resource_manager_data_source__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ma_resource_manager_data_source__bindgen_ty_1>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(ma_resource_manager_data_source__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_source__bindgen_ty_1),
        "::",
        stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_source__bindgen_ty_1),
        "::",
        stringify!(stream)
        )
    );
}
#[test]
fn bindgen_test_layout_ma_resource_manager_data_source() {
    const UNINIT: ::std::mem::MaybeUninit<ma_resource_manager_data_source> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_resource_manager_data_source>(),
        744usize,
        concat!("Size of: ", stringify!(ma_resource_manager_data_source))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_resource_manager_data_source>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_resource_manager_data_source))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backend) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_source),
        "::",
        stringify!(backend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        728usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_source),
        "::",
        stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).executionCounter) as usize - ptr as usize },
        732usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_source),
        "::",
        stringify!(executionCounter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).executionPointer) as usize - ptr as usize },
        736usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_data_source),
        "::",
        stringify!(executionPointer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_resource_manager_config {
    pub allocationCallbacks: ma_allocation_callbacks,
    pub pLog: *mut ma_log,
    pub decodedFormat: ma_format,
    pub decodedChannels: ma_uint32,
    pub decodedSampleRate: ma_uint32,
    pub jobThreadCount: ma_uint32,
    pub jobQueueCapacity: ma_uint32,
    pub flags: ma_uint32,
    pub pVFS: *mut ma_vfs,
    pub ppCustomDecodingBackendVTables: *mut *mut ma_decoding_backend_vtable,
    pub customDecodingBackendCount: ma_uint32,
    pub pCustomDecodingBackendUserData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ma_resource_manager_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_resource_manager_config> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_resource_manager_config>(),
        96usize,
        concat!("Size of: ", stringify!(ma_resource_manager_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_resource_manager_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_resource_manager_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocationCallbacks) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_config),
        "::",
        stringify!(allocationCallbacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pLog) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_config),
        "::",
        stringify!(pLog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decodedFormat) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_config),
        "::",
        stringify!(decodedFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decodedChannels) as usize - ptr as usize },
        44usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_config),
        "::",
        stringify!(decodedChannels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decodedSampleRate) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_config),
        "::",
        stringify!(decodedSampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jobThreadCount) as usize - ptr as usize },
        52usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_config),
        "::",
        stringify!(jobThreadCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jobQueueCapacity) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_config),
        "::",
        stringify!(jobQueueCapacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        60usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_config),
        "::",
        stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVFS) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_config),
        "::",
        stringify!(pVFS)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ppCustomDecodingBackendVTables) as usize - ptr as usize
        },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_config),
        "::",
        stringify!(ppCustomDecodingBackendVTables)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).customDecodingBackendCount) as usize - ptr as usize },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_config),
        "::",
        stringify!(customDecodingBackendCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pCustomDecodingBackendUserData) as usize - ptr as usize
        },
        88usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager_config),
        "::",
        stringify!(pCustomDecodingBackendUserData)
        )
    );
}
extern "C" {
    pub fn ma_resource_manager_config_init() -> ma_resource_manager_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_resource_manager {
    pub config: ma_resource_manager_config,
    pub pRootDataBufferNode: *mut ma_resource_manager_data_buffer_node,
    pub dataBufferBSTLock: ma_mutex,
    pub jobThreads: [ma_thread; 64usize],
    pub jobQueue: ma_job_queue,
    pub defaultVFS: ma_default_vfs,
    pub log: ma_log,
}
#[test]
fn bindgen_test_layout_ma_resource_manager() {
    const UNINIT: ::std::mem::MaybeUninit<ma_resource_manager> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_resource_manager>(),
        936usize,
        concat!("Size of: ", stringify!(ma_resource_manager))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_resource_manager>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_resource_manager))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager),
        "::",
        stringify!(config)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pRootDataBufferNode) as usize - ptr as usize },
        96usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager),
        "::",
        stringify!(pRootDataBufferNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataBufferBSTLock) as usize - ptr as usize },
        104usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager),
        "::",
        stringify!(dataBufferBSTLock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jobThreads) as usize - ptr as usize },
        112usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager),
        "::",
        stringify!(jobThreads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jobQueue) as usize - ptr as usize },
        624usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager),
        "::",
        stringify!(jobQueue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defaultVFS) as usize - ptr as usize },
        728usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager),
        "::",
        stringify!(defaultVFS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize },
        824usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_resource_manager),
        "::",
        stringify!(log)
        )
    );
}
extern "C" {
    pub fn ma_resource_manager_init(
        pConfig: *const ma_resource_manager_config,
        pResourceManager: *mut ma_resource_manager,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_uninit(pResourceManager: *mut ma_resource_manager);
}
extern "C" {
    pub fn ma_resource_manager_get_log(pResourceManager: *mut ma_resource_manager) -> *mut ma_log;
}
extern "C" {
    pub fn ma_resource_manager_register_file(
        pResourceManager: *mut ma_resource_manager,
        pFilePath: *const ::std::os::raw::c_char,
        flags: ma_uint32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_register_file_w(
        pResourceManager: *mut ma_resource_manager,
        pFilePath: *const wchar_t,
        flags: ma_uint32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_register_decoded_data(
        pResourceManager: *mut ma_resource_manager,
        pName: *const ::std::os::raw::c_char,
        pData: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_register_decoded_data_w(
        pResourceManager: *mut ma_resource_manager,
        pName: *const wchar_t,
        pData: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_register_encoded_data(
        pResourceManager: *mut ma_resource_manager,
        pName: *const ::std::os::raw::c_char,
        pData: *const ::std::os::raw::c_void,
        sizeInBytes: usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_register_encoded_data_w(
        pResourceManager: *mut ma_resource_manager,
        pName: *const wchar_t,
        pData: *const ::std::os::raw::c_void,
        sizeInBytes: usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_unregister_file(
        pResourceManager: *mut ma_resource_manager,
        pFilePath: *const ::std::os::raw::c_char,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_unregister_file_w(
        pResourceManager: *mut ma_resource_manager,
        pFilePath: *const wchar_t,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_unregister_data(
        pResourceManager: *mut ma_resource_manager,
        pName: *const ::std::os::raw::c_char,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_unregister_data_w(
        pResourceManager: *mut ma_resource_manager,
        pName: *const wchar_t,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_buffer_init_ex(
        pResourceManager: *mut ma_resource_manager,
        pConfig: *const ma_resource_manager_data_source_config,
        pDataBuffer: *mut ma_resource_manager_data_buffer,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_buffer_init(
        pResourceManager: *mut ma_resource_manager,
        pFilePath: *const ::std::os::raw::c_char,
        flags: ma_uint32,
        pNotifications: *const ma_resource_manager_pipeline_notifications,
        pDataBuffer: *mut ma_resource_manager_data_buffer,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_buffer_init_w(
        pResourceManager: *mut ma_resource_manager,
        pFilePath: *const wchar_t,
        flags: ma_uint32,
        pNotifications: *const ma_resource_manager_pipeline_notifications,
        pDataBuffer: *mut ma_resource_manager_data_buffer,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_buffer_init_copy(
        pResourceManager: *mut ma_resource_manager,
        pExistingDataBuffer: *const ma_resource_manager_data_buffer,
        pDataBuffer: *mut ma_resource_manager_data_buffer,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_buffer_uninit(
        pDataBuffer: *mut ma_resource_manager_data_buffer,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_buffer_read_pcm_frames(
        pDataBuffer: *mut ma_resource_manager_data_buffer,
        pFramesOut: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        pFramesRead: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_buffer_seek_to_pcm_frame(
        pDataBuffer: *mut ma_resource_manager_data_buffer,
        frameIndex: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_buffer_get_data_format(
        pDataBuffer: *mut ma_resource_manager_data_buffer,
        pFormat: *mut ma_format,
        pChannels: *mut ma_uint32,
        pSampleRate: *mut ma_uint32,
        pChannelMap: *mut ma_channel,
        channelMapCap: usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_buffer_get_cursor_in_pcm_frames(
        pDataBuffer: *mut ma_resource_manager_data_buffer,
        pCursor: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_buffer_get_length_in_pcm_frames(
        pDataBuffer: *mut ma_resource_manager_data_buffer,
        pLength: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_buffer_result(
        pDataBuffer: *const ma_resource_manager_data_buffer,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_buffer_set_looping(
        pDataBuffer: *mut ma_resource_manager_data_buffer,
        isLooping: ma_bool32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_buffer_is_looping(
        pDataBuffer: *const ma_resource_manager_data_buffer,
    ) -> ma_bool32;
}
extern "C" {
    pub fn ma_resource_manager_data_buffer_get_available_frames(
        pDataBuffer: *mut ma_resource_manager_data_buffer,
        pAvailableFrames: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_stream_init_ex(
        pResourceManager: *mut ma_resource_manager,
        pConfig: *const ma_resource_manager_data_source_config,
        pDataStream: *mut ma_resource_manager_data_stream,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_stream_init(
        pResourceManager: *mut ma_resource_manager,
        pFilePath: *const ::std::os::raw::c_char,
        flags: ma_uint32,
        pNotifications: *const ma_resource_manager_pipeline_notifications,
        pDataStream: *mut ma_resource_manager_data_stream,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_stream_init_w(
        pResourceManager: *mut ma_resource_manager,
        pFilePath: *const wchar_t,
        flags: ma_uint32,
        pNotifications: *const ma_resource_manager_pipeline_notifications,
        pDataStream: *mut ma_resource_manager_data_stream,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_stream_uninit(
        pDataStream: *mut ma_resource_manager_data_stream,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_stream_read_pcm_frames(
        pDataStream: *mut ma_resource_manager_data_stream,
        pFramesOut: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        pFramesRead: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_stream_seek_to_pcm_frame(
        pDataStream: *mut ma_resource_manager_data_stream,
        frameIndex: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_stream_get_data_format(
        pDataStream: *mut ma_resource_manager_data_stream,
        pFormat: *mut ma_format,
        pChannels: *mut ma_uint32,
        pSampleRate: *mut ma_uint32,
        pChannelMap: *mut ma_channel,
        channelMapCap: usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_stream_get_cursor_in_pcm_frames(
        pDataStream: *mut ma_resource_manager_data_stream,
        pCursor: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_stream_get_length_in_pcm_frames(
        pDataStream: *mut ma_resource_manager_data_stream,
        pLength: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_stream_result(
        pDataStream: *const ma_resource_manager_data_stream,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_stream_set_looping(
        pDataStream: *mut ma_resource_manager_data_stream,
        isLooping: ma_bool32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_stream_is_looping(
        pDataStream: *const ma_resource_manager_data_stream,
    ) -> ma_bool32;
}
extern "C" {
    pub fn ma_resource_manager_data_stream_get_available_frames(
        pDataStream: *mut ma_resource_manager_data_stream,
        pAvailableFrames: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_source_init_ex(
        pResourceManager: *mut ma_resource_manager,
        pConfig: *const ma_resource_manager_data_source_config,
        pDataSource: *mut ma_resource_manager_data_source,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_source_init(
        pResourceManager: *mut ma_resource_manager,
        pName: *const ::std::os::raw::c_char,
        flags: ma_uint32,
        pNotifications: *const ma_resource_manager_pipeline_notifications,
        pDataSource: *mut ma_resource_manager_data_source,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_source_init_w(
        pResourceManager: *mut ma_resource_manager,
        pName: *const wchar_t,
        flags: ma_uint32,
        pNotifications: *const ma_resource_manager_pipeline_notifications,
        pDataSource: *mut ma_resource_manager_data_source,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_source_init_copy(
        pResourceManager: *mut ma_resource_manager,
        pExistingDataSource: *const ma_resource_manager_data_source,
        pDataSource: *mut ma_resource_manager_data_source,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_source_uninit(
        pDataSource: *mut ma_resource_manager_data_source,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_source_read_pcm_frames(
        pDataSource: *mut ma_resource_manager_data_source,
        pFramesOut: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        pFramesRead: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_source_seek_to_pcm_frame(
        pDataSource: *mut ma_resource_manager_data_source,
        frameIndex: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_source_get_data_format(
        pDataSource: *mut ma_resource_manager_data_source,
        pFormat: *mut ma_format,
        pChannels: *mut ma_uint32,
        pSampleRate: *mut ma_uint32,
        pChannelMap: *mut ma_channel,
        channelMapCap: usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_source_get_cursor_in_pcm_frames(
        pDataSource: *mut ma_resource_manager_data_source,
        pCursor: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_source_get_length_in_pcm_frames(
        pDataSource: *mut ma_resource_manager_data_source,
        pLength: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_source_result(
        pDataSource: *const ma_resource_manager_data_source,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_source_set_looping(
        pDataSource: *mut ma_resource_manager_data_source,
        isLooping: ma_bool32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_data_source_is_looping(
        pDataSource: *const ma_resource_manager_data_source,
    ) -> ma_bool32;
}
extern "C" {
    pub fn ma_resource_manager_data_source_get_available_frames(
        pDataSource: *mut ma_resource_manager_data_source,
        pAvailableFrames: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_post_job(
        pResourceManager: *mut ma_resource_manager,
        pJob: *const ma_job,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_post_job_quit(
        pResourceManager: *mut ma_resource_manager,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_next_job(
        pResourceManager: *mut ma_resource_manager,
        pJob: *mut ma_job,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_process_job(
        pResourceManager: *mut ma_resource_manager,
        pJob: *mut ma_job,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_resource_manager_process_next_job(
        pResourceManager: *mut ma_resource_manager,
    ) -> ma_result;
}
pub type ma_node = ::std::os::raw::c_void;
pub const ma_node_flags_MA_NODE_FLAG_PASSTHROUGH: ma_node_flags = 1;
pub const ma_node_flags_MA_NODE_FLAG_CONTINUOUS_PROCESSING: ma_node_flags = 2;
pub const ma_node_flags_MA_NODE_FLAG_ALLOW_NULL_INPUT: ma_node_flags = 4;
pub const ma_node_flags_MA_NODE_FLAG_DIFFERENT_PROCESSING_RATES: ma_node_flags = 8;
pub const ma_node_flags_MA_NODE_FLAG_SILENT_OUTPUT: ma_node_flags = 16;
pub type ma_node_flags = ::std::os::raw::c_int;
pub const ma_node_state_ma_node_state_started: ma_node_state = 0;
pub const ma_node_state_ma_node_state_stopped: ma_node_state = 1;
pub type ma_node_state = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_node_vtable {
    pub onProcess: ::std::option::Option<
        unsafe extern "C" fn(
            pNode: *mut ma_node,
            ppFramesIn: *mut *const f32,
            pFrameCountIn: *mut ma_uint32,
            ppFramesOut: *mut *mut f32,
            pFrameCountOut: *mut ma_uint32,
        ),
    >,
    pub onGetRequiredInputFrameCount: ::std::option::Option<
        unsafe extern "C" fn(
            pNode: *mut ma_node,
            outputFrameCount: ma_uint32,
            pInputFrameCount: *mut ma_uint32,
        ) -> ma_result,
    >,
    pub inputBusCount: ma_uint8,
    pub outputBusCount: ma_uint8,
    pub flags: ma_uint32,
}
#[test]
fn bindgen_test_layout_ma_node_vtable() {
    const UNINIT: ::std::mem::MaybeUninit<ma_node_vtable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_node_vtable>(),
        24usize,
        concat!("Size of: ", stringify!(ma_node_vtable))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_node_vtable>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_node_vtable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onProcess) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_vtable),
        "::",
        stringify!(onProcess)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).onGetRequiredInputFrameCount) as usize - ptr as usize
        },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_vtable),
        "::",
        stringify!(onGetRequiredInputFrameCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputBusCount) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_vtable),
        "::",
        stringify!(inputBusCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outputBusCount) as usize - ptr as usize },
        17usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_vtable),
        "::",
        stringify!(outputBusCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_vtable),
        "::",
        stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_node_config {
    pub vtable: *const ma_node_vtable,
    pub initialState: ma_node_state,
    pub inputBusCount: ma_uint32,
    pub outputBusCount: ma_uint32,
    pub pInputChannels: *const ma_uint32,
    pub pOutputChannels: *const ma_uint32,
}
#[test]
fn bindgen_test_layout_ma_node_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_node_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_node_config>(),
        40usize,
        concat!("Size of: ", stringify!(ma_node_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_node_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_node_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_config),
        "::",
        stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialState) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_config),
        "::",
        stringify!(initialState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputBusCount) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_config),
        "::",
        stringify!(inputBusCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outputBusCount) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_config),
        "::",
        stringify!(outputBusCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInputChannels) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_config),
        "::",
        stringify!(pInputChannels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pOutputChannels) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_config),
        "::",
        stringify!(pOutputChannels)
        )
    );
}
extern "C" {
    pub fn ma_node_config_init() -> ma_node_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_node_output_bus {
    pub pNode: *mut ma_node,
    pub outputBusIndex: ma_uint8,
    pub channels: ma_uint8,
    pub inputNodeInputBusIndex: ma_uint8,
    pub flags: ma_uint32,
    pub refCount: ma_uint32,
    pub isAttached: ma_bool32,
    pub lock: ma_spinlock,
    pub volume: f32,
    pub pNext: *mut ma_node_output_bus,
    pub pPrev: *mut ma_node_output_bus,
    pub pInputNode: *mut ma_node,
}
#[test]
fn bindgen_test_layout_ma_node_output_bus() {
    const UNINIT: ::std::mem::MaybeUninit<ma_node_output_bus> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_node_output_bus>(),
        56usize,
        concat!("Size of: ", stringify!(ma_node_output_bus))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_node_output_bus>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_node_output_bus))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_output_bus),
        "::",
        stringify!(pNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outputBusIndex) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_output_bus),
        "::",
        stringify!(outputBusIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        9usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_output_bus),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputNodeInputBusIndex) as usize - ptr as usize },
        10usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_output_bus),
        "::",
        stringify!(inputNodeInputBusIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_output_bus),
        "::",
        stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refCount) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_output_bus),
        "::",
        stringify!(refCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isAttached) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_output_bus),
        "::",
        stringify!(isAttached)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_output_bus),
        "::",
        stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).volume) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_output_bus),
        "::",
        stringify!(volume)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_output_bus),
        "::",
        stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPrev) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_output_bus),
        "::",
        stringify!(pPrev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInputNode) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_output_bus),
        "::",
        stringify!(pInputNode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_node_input_bus {
    pub head: ma_node_output_bus,
    pub nextCounter: ma_uint32,
    pub lock: ma_spinlock,
    pub channels: ma_uint8,
}
#[test]
fn bindgen_test_layout_ma_node_input_bus() {
    const UNINIT: ::std::mem::MaybeUninit<ma_node_input_bus> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_node_input_bus>(),
        72usize,
        concat!("Size of: ", stringify!(ma_node_input_bus))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_node_input_bus>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_node_input_bus))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_input_bus),
        "::",
        stringify!(head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nextCounter) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_input_bus),
        "::",
        stringify!(nextCounter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        60usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_input_bus),
        "::",
        stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_input_bus),
        "::",
        stringify!(channels)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_node_base {
    pub pNodeGraph: *mut ma_node_graph,
    pub vtable: *const ma_node_vtable,
    pub pCachedData: *mut f32,
    pub cachedDataCapInFramesPerBus: ma_uint16,
    pub cachedFrameCountOut: ma_uint16,
    pub cachedFrameCountIn: ma_uint16,
    pub consumedFrameCountIn: ma_uint16,
    pub state: ma_node_state,
    pub stateTimes: [ma_uint64; 2usize],
    pub localTime: ma_uint64,
    pub inputBusCount: ma_uint32,
    pub outputBusCount: ma_uint32,
    pub pInputBuses: *mut ma_node_input_bus,
    pub pOutputBuses: *mut ma_node_output_bus,
    pub _inputBuses: [ma_node_input_bus; 2usize],
    pub _outputBuses: [ma_node_output_bus; 2usize],
    pub _pHeap: *mut ::std::os::raw::c_void,
    pub _ownsHeap: ma_bool32,
}
#[test]
fn bindgen_test_layout_ma_node_base() {
    const UNINIT: ::std::mem::MaybeUninit<ma_node_base> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_node_base>(),
        360usize,
        concat!("Size of: ", stringify!(ma_node_base))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_node_base>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_node_base))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNodeGraph) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_base),
        "::",
        stringify!(pNodeGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_base),
        "::",
        stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCachedData) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_base),
        "::",
        stringify!(pCachedData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cachedDataCapInFramesPerBus) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_base),
        "::",
        stringify!(cachedDataCapInFramesPerBus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cachedFrameCountOut) as usize - ptr as usize },
        26usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_base),
        "::",
        stringify!(cachedFrameCountOut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cachedFrameCountIn) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_base),
        "::",
        stringify!(cachedFrameCountIn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).consumedFrameCountIn) as usize - ptr as usize },
        30usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_base),
        "::",
        stringify!(consumedFrameCountIn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_base),
        "::",
        stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stateTimes) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_base),
        "::",
        stringify!(stateTimes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).localTime) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_base),
        "::",
        stringify!(localTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputBusCount) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_base),
        "::",
        stringify!(inputBusCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outputBusCount) as usize - ptr as usize },
        68usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_base),
        "::",
        stringify!(outputBusCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInputBuses) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_base),
        "::",
        stringify!(pInputBuses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pOutputBuses) as usize - ptr as usize },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_base),
        "::",
        stringify!(pOutputBuses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._inputBuses) as usize - ptr as usize },
        88usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_base),
        "::",
        stringify!(_inputBuses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._outputBuses) as usize - ptr as usize },
        232usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_base),
        "::",
        stringify!(_outputBuses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pHeap) as usize - ptr as usize },
        344usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_base),
        "::",
        stringify!(_pHeap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ownsHeap) as usize - ptr as usize },
        352usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_base),
        "::",
        stringify!(_ownsHeap)
        )
    );
}
extern "C" {
    pub fn ma_node_get_heap_size(
        pNodeGraph: *mut ma_node_graph,
        pConfig: *const ma_node_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_node_init_preallocated(
        pNodeGraph: *mut ma_node_graph,
        pConfig: *const ma_node_config,
        pHeap: *mut ::std::os::raw::c_void,
        pNode: *mut ma_node,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_node_init(
        pNodeGraph: *mut ma_node_graph,
        pConfig: *const ma_node_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pNode: *mut ma_node,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_node_uninit(
        pNode: *mut ma_node,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
extern "C" {
    pub fn ma_node_get_node_graph(pNode: *const ma_node) -> *mut ma_node_graph;
}
extern "C" {
    pub fn ma_node_get_input_bus_count(pNode: *const ma_node) -> ma_uint32;
}
extern "C" {
    pub fn ma_node_get_output_bus_count(pNode: *const ma_node) -> ma_uint32;
}
extern "C" {
    pub fn ma_node_get_input_channels(pNode: *const ma_node, inputBusIndex: ma_uint32)
                                      -> ma_uint32;
}
extern "C" {
    pub fn ma_node_get_output_channels(
        pNode: *const ma_node,
        outputBusIndex: ma_uint32,
    ) -> ma_uint32;
}
extern "C" {
    pub fn ma_node_attach_output_bus(
        pNode: *mut ma_node,
        outputBusIndex: ma_uint32,
        pOtherNode: *mut ma_node,
        otherNodeInputBusIndex: ma_uint32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_node_detach_output_bus(pNode: *mut ma_node, outputBusIndex: ma_uint32) -> ma_result;
}
extern "C" {
    pub fn ma_node_detach_all_output_buses(pNode: *mut ma_node) -> ma_result;
}
extern "C" {
    pub fn ma_node_set_output_bus_volume(
        pNode: *mut ma_node,
        outputBusIndex: ma_uint32,
        volume: f32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_node_get_output_bus_volume(pNode: *const ma_node, outputBusIndex: ma_uint32) -> f32;
}
extern "C" {
    pub fn ma_node_set_state(pNode: *mut ma_node, state: ma_node_state) -> ma_result;
}
extern "C" {
    pub fn ma_node_get_state(pNode: *const ma_node) -> ma_node_state;
}
extern "C" {
    pub fn ma_node_set_state_time(
        pNode: *mut ma_node,
        state: ma_node_state,
        globalTime: ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_node_get_state_time(pNode: *const ma_node, state: ma_node_state) -> ma_uint64;
}
extern "C" {
    pub fn ma_node_get_state_by_time(pNode: *const ma_node, globalTime: ma_uint64)
                                     -> ma_node_state;
}
extern "C" {
    pub fn ma_node_get_state_by_time_range(
        pNode: *const ma_node,
        globalTimeBeg: ma_uint64,
        globalTimeEnd: ma_uint64,
    ) -> ma_node_state;
}
extern "C" {
    pub fn ma_node_get_time(pNode: *const ma_node) -> ma_uint64;
}
extern "C" {
    pub fn ma_node_set_time(pNode: *mut ma_node, localTime: ma_uint64) -> ma_result;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_node_graph_config {
    pub channels: ma_uint32,
    pub nodeCacheCapInFrames: ma_uint16,
}
#[test]
fn bindgen_test_layout_ma_node_graph_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_node_graph_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_node_graph_config>(),
        8usize,
        concat!("Size of: ", stringify!(ma_node_graph_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_node_graph_config>(),
        4usize,
        concat!("Alignment of ", stringify!(ma_node_graph_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_graph_config),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeCacheCapInFrames) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_graph_config),
        "::",
        stringify!(nodeCacheCapInFrames)
        )
    );
}
extern "C" {
    pub fn ma_node_graph_config_init(channels: ma_uint32) -> ma_node_graph_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_node_graph {
    pub base: ma_node_base,
    pub endpoint: ma_node_base,
    pub nodeCacheCapInFrames: ma_uint16,
    pub isReading: ma_bool32,
}
#[test]
fn bindgen_test_layout_ma_node_graph() {
    const UNINIT: ::std::mem::MaybeUninit<ma_node_graph> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_node_graph>(),
        728usize,
        concat!("Size of: ", stringify!(ma_node_graph))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_node_graph>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_node_graph))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_graph),
        "::",
        stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpoint) as usize - ptr as usize },
        360usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_graph),
        "::",
        stringify!(endpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeCacheCapInFrames) as usize - ptr as usize },
        720usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_graph),
        "::",
        stringify!(nodeCacheCapInFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isReading) as usize - ptr as usize },
        724usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_node_graph),
        "::",
        stringify!(isReading)
        )
    );
}
extern "C" {
    pub fn ma_node_graph_init(
        pConfig: *const ma_node_graph_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pNodeGraph: *mut ma_node_graph,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_node_graph_uninit(
        pNodeGraph: *mut ma_node_graph,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
extern "C" {
    pub fn ma_node_graph_get_endpoint(pNodeGraph: *mut ma_node_graph) -> *mut ma_node;
}
extern "C" {
    pub fn ma_node_graph_read_pcm_frames(
        pNodeGraph: *mut ma_node_graph,
        pFramesOut: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        pFramesRead: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_node_graph_get_channels(pNodeGraph: *const ma_node_graph) -> ma_uint32;
}
extern "C" {
    pub fn ma_node_graph_get_time(pNodeGraph: *const ma_node_graph) -> ma_uint64;
}
extern "C" {
    pub fn ma_node_graph_set_time(
        pNodeGraph: *mut ma_node_graph,
        globalTime: ma_uint64,
    ) -> ma_result;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_data_source_node_config {
    pub nodeConfig: ma_node_config,
    pub pDataSource: *mut ma_data_source,
}
#[test]
fn bindgen_test_layout_ma_data_source_node_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_data_source_node_config> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_data_source_node_config>(),
        48usize,
        concat!("Size of: ", stringify!(ma_data_source_node_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_data_source_node_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_data_source_node_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeConfig) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_source_node_config),
        "::",
        stringify!(nodeConfig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDataSource) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_source_node_config),
        "::",
        stringify!(pDataSource)
        )
    );
}
extern "C" {
    pub fn ma_data_source_node_config_init(
        pDataSource: *mut ma_data_source,
    ) -> ma_data_source_node_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_data_source_node {
    pub base: ma_node_base,
    pub pDataSource: *mut ma_data_source,
}
#[test]
fn bindgen_test_layout_ma_data_source_node() {
    const UNINIT: ::std::mem::MaybeUninit<ma_data_source_node> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_data_source_node>(),
        368usize,
        concat!("Size of: ", stringify!(ma_data_source_node))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_data_source_node>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_data_source_node))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_source_node),
        "::",
        stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDataSource) as usize - ptr as usize },
        360usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_data_source_node),
        "::",
        stringify!(pDataSource)
        )
    );
}
extern "C" {
    pub fn ma_data_source_node_init(
        pNodeGraph: *mut ma_node_graph,
        pConfig: *const ma_data_source_node_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pDataSourceNode: *mut ma_data_source_node,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_source_node_uninit(
        pDataSourceNode: *mut ma_data_source_node,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
extern "C" {
    pub fn ma_data_source_node_set_looping(
        pDataSourceNode: *mut ma_data_source_node,
        isLooping: ma_bool32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_data_source_node_is_looping(pDataSourceNode: *mut ma_data_source_node) -> ma_bool32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_splitter_node_config {
    pub nodeConfig: ma_node_config,
    pub channels: ma_uint32,
    pub outputBusCount: ma_uint32,
}
#[test]
fn bindgen_test_layout_ma_splitter_node_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_splitter_node_config> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_splitter_node_config>(),
        48usize,
        concat!("Size of: ", stringify!(ma_splitter_node_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_splitter_node_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_splitter_node_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeConfig) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_splitter_node_config),
        "::",
        stringify!(nodeConfig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_splitter_node_config),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outputBusCount) as usize - ptr as usize },
        44usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_splitter_node_config),
        "::",
        stringify!(outputBusCount)
        )
    );
}
extern "C" {
    pub fn ma_splitter_node_config_init(channels: ma_uint32) -> ma_splitter_node_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_splitter_node {
    pub base: ma_node_base,
}
#[test]
fn bindgen_test_layout_ma_splitter_node() {
    const UNINIT: ::std::mem::MaybeUninit<ma_splitter_node> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_splitter_node>(),
        360usize,
        concat!("Size of: ", stringify!(ma_splitter_node))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_splitter_node>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_splitter_node))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_splitter_node),
        "::",
        stringify!(base)
        )
    );
}
extern "C" {
    pub fn ma_splitter_node_init(
        pNodeGraph: *mut ma_node_graph,
        pConfig: *const ma_splitter_node_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pSplitterNode: *mut ma_splitter_node,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_splitter_node_uninit(
        pSplitterNode: *mut ma_splitter_node,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_biquad_node_config {
    pub nodeConfig: ma_node_config,
    pub biquad: ma_biquad_config,
}
#[test]
fn bindgen_test_layout_ma_biquad_node_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_biquad_node_config> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_biquad_node_config>(),
        96usize,
        concat!("Size of: ", stringify!(ma_biquad_node_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_biquad_node_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_biquad_node_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeConfig) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_biquad_node_config),
        "::",
        stringify!(nodeConfig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).biquad) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_biquad_node_config),
        "::",
        stringify!(biquad)
        )
    );
}
extern "C" {
    pub fn ma_biquad_node_config_init(
        channels: ma_uint32,
        b0: f32,
        b1: f32,
        b2: f32,
        a0: f32,
        a1: f32,
        a2: f32,
    ) -> ma_biquad_node_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_biquad_node {
    pub baseNode: ma_node_base,
    pub biquad: ma_biquad,
}
#[test]
fn bindgen_test_layout_ma_biquad_node() {
    const UNINIT: ::std::mem::MaybeUninit<ma_biquad_node> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_biquad_node>(),
        424usize,
        concat!("Size of: ", stringify!(ma_biquad_node))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_biquad_node>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_biquad_node))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseNode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_biquad_node),
        "::",
        stringify!(baseNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).biquad) as usize - ptr as usize },
        360usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_biquad_node),
        "::",
        stringify!(biquad)
        )
    );
}
extern "C" {
    pub fn ma_biquad_node_init(
        pNodeGraph: *mut ma_node_graph,
        pConfig: *const ma_biquad_node_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pNode: *mut ma_biquad_node,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_biquad_node_reinit(
        pConfig: *const ma_biquad_config,
        pNode: *mut ma_biquad_node,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_biquad_node_uninit(
        pNode: *mut ma_biquad_node,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_lpf_node_config {
    pub nodeConfig: ma_node_config,
    pub lpf: ma_lpf_config,
}
#[test]
fn bindgen_test_layout_ma_lpf_node_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_lpf_node_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_lpf_node_config>(),
        72usize,
        concat!("Size of: ", stringify!(ma_lpf_node_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_lpf_node_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_lpf_node_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeConfig) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_lpf_node_config),
        "::",
        stringify!(nodeConfig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lpf) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_lpf_node_config),
        "::",
        stringify!(lpf)
        )
    );
}
extern "C" {
    pub fn ma_lpf_node_config_init(
        channels: ma_uint32,
        sampleRate: ma_uint32,
        cutoffFrequency: f64,
        order: ma_uint32,
    ) -> ma_lpf_node_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_lpf_node {
    pub baseNode: ma_node_base,
    pub lpf: ma_lpf,
}
#[test]
fn bindgen_test_layout_ma_lpf_node() {
    const UNINIT: ::std::mem::MaybeUninit<ma_lpf_node> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_lpf_node>(),
        416usize,
        concat!("Size of: ", stringify!(ma_lpf_node))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_lpf_node>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_lpf_node))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseNode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_lpf_node),
        "::",
        stringify!(baseNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lpf) as usize - ptr as usize },
        360usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_lpf_node),
        "::",
        stringify!(lpf)
        )
    );
}
extern "C" {
    pub fn ma_lpf_node_init(
        pNodeGraph: *mut ma_node_graph,
        pConfig: *const ma_lpf_node_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pNode: *mut ma_lpf_node,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_lpf_node_reinit(pConfig: *const ma_lpf_config, pNode: *mut ma_lpf_node) -> ma_result;
}
extern "C" {
    pub fn ma_lpf_node_uninit(
        pNode: *mut ma_lpf_node,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_hpf_node_config {
    pub nodeConfig: ma_node_config,
    pub hpf: ma_hpf_config,
}
#[test]
fn bindgen_test_layout_ma_hpf_node_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_hpf_node_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_hpf_node_config>(),
        72usize,
        concat!("Size of: ", stringify!(ma_hpf_node_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_hpf_node_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_hpf_node_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeConfig) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hpf_node_config),
        "::",
        stringify!(nodeConfig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hpf) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hpf_node_config),
        "::",
        stringify!(hpf)
        )
    );
}
extern "C" {
    pub fn ma_hpf_node_config_init(
        channels: ma_uint32,
        sampleRate: ma_uint32,
        cutoffFrequency: f64,
        order: ma_uint32,
    ) -> ma_hpf_node_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_hpf_node {
    pub baseNode: ma_node_base,
    pub hpf: ma_hpf,
}
#[test]
fn bindgen_test_layout_ma_hpf_node() {
    const UNINIT: ::std::mem::MaybeUninit<ma_hpf_node> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_hpf_node>(),
        416usize,
        concat!("Size of: ", stringify!(ma_hpf_node))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_hpf_node>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_hpf_node))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseNode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hpf_node),
        "::",
        stringify!(baseNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hpf) as usize - ptr as usize },
        360usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hpf_node),
        "::",
        stringify!(hpf)
        )
    );
}
extern "C" {
    pub fn ma_hpf_node_init(
        pNodeGraph: *mut ma_node_graph,
        pConfig: *const ma_hpf_node_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pNode: *mut ma_hpf_node,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_hpf_node_reinit(pConfig: *const ma_hpf_config, pNode: *mut ma_hpf_node) -> ma_result;
}
extern "C" {
    pub fn ma_hpf_node_uninit(
        pNode: *mut ma_hpf_node,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_bpf_node_config {
    pub nodeConfig: ma_node_config,
    pub bpf: ma_bpf_config,
}
#[test]
fn bindgen_test_layout_ma_bpf_node_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_bpf_node_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_bpf_node_config>(),
        72usize,
        concat!("Size of: ", stringify!(ma_bpf_node_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_bpf_node_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_bpf_node_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeConfig) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_bpf_node_config),
        "::",
        stringify!(nodeConfig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bpf) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_bpf_node_config),
        "::",
        stringify!(bpf)
        )
    );
}
extern "C" {
    pub fn ma_bpf_node_config_init(
        channels: ma_uint32,
        sampleRate: ma_uint32,
        cutoffFrequency: f64,
        order: ma_uint32,
    ) -> ma_bpf_node_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_bpf_node {
    pub baseNode: ma_node_base,
    pub bpf: ma_bpf,
}
#[test]
fn bindgen_test_layout_ma_bpf_node() {
    const UNINIT: ::std::mem::MaybeUninit<ma_bpf_node> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_bpf_node>(),
        400usize,
        concat!("Size of: ", stringify!(ma_bpf_node))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_bpf_node>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_bpf_node))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseNode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_bpf_node),
        "::",
        stringify!(baseNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bpf) as usize - ptr as usize },
        360usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_bpf_node),
        "::",
        stringify!(bpf)
        )
    );
}
extern "C" {
    pub fn ma_bpf_node_init(
        pNodeGraph: *mut ma_node_graph,
        pConfig: *const ma_bpf_node_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pNode: *mut ma_bpf_node,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_bpf_node_reinit(pConfig: *const ma_bpf_config, pNode: *mut ma_bpf_node) -> ma_result;
}
extern "C" {
    pub fn ma_bpf_node_uninit(
        pNode: *mut ma_bpf_node,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_notch_node_config {
    pub nodeConfig: ma_node_config,
    pub notch: ma_notch_config,
}
#[test]
fn bindgen_test_layout_ma_notch_node_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_notch_node_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_notch_node_config>(),
        72usize,
        concat!("Size of: ", stringify!(ma_notch_node_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_notch_node_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_notch_node_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeConfig) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_notch_node_config),
        "::",
        stringify!(nodeConfig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notch) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_notch_node_config),
        "::",
        stringify!(notch)
        )
    );
}
extern "C" {
    pub fn ma_notch_node_config_init(
        channels: ma_uint32,
        sampleRate: ma_uint32,
        q: f64,
        frequency: f64,
    ) -> ma_notch_node_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_notch_node {
    pub baseNode: ma_node_base,
    pub notch: ma_notch2,
}
#[test]
fn bindgen_test_layout_ma_notch_node() {
    const UNINIT: ::std::mem::MaybeUninit<ma_notch_node> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_notch_node>(),
        424usize,
        concat!("Size of: ", stringify!(ma_notch_node))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_notch_node>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_notch_node))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseNode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_notch_node),
        "::",
        stringify!(baseNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notch) as usize - ptr as usize },
        360usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_notch_node),
        "::",
        stringify!(notch)
        )
    );
}
extern "C" {
    pub fn ma_notch_node_init(
        pNodeGraph: *mut ma_node_graph,
        pConfig: *const ma_notch_node_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pNode: *mut ma_notch_node,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_notch_node_reinit(
        pConfig: *const ma_notch_config,
        pNode: *mut ma_notch_node,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_notch_node_uninit(
        pNode: *mut ma_notch_node,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_peak_node_config {
    pub nodeConfig: ma_node_config,
    pub peak: ma_peak_config,
}
#[test]
fn bindgen_test_layout_ma_peak_node_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_peak_node_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_peak_node_config>(),
        80usize,
        concat!("Size of: ", stringify!(ma_peak_node_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_peak_node_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_peak_node_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeConfig) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_peak_node_config),
        "::",
        stringify!(nodeConfig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).peak) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_peak_node_config),
        "::",
        stringify!(peak)
        )
    );
}
extern "C" {
    pub fn ma_peak_node_config_init(
        channels: ma_uint32,
        sampleRate: ma_uint32,
        gainDB: f64,
        q: f64,
        frequency: f64,
    ) -> ma_peak_node_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_peak_node {
    pub baseNode: ma_node_base,
    pub peak: ma_peak2,
}
#[test]
fn bindgen_test_layout_ma_peak_node() {
    const UNINIT: ::std::mem::MaybeUninit<ma_peak_node> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_peak_node>(),
        424usize,
        concat!("Size of: ", stringify!(ma_peak_node))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_peak_node>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_peak_node))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseNode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_peak_node),
        "::",
        stringify!(baseNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).peak) as usize - ptr as usize },
        360usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_peak_node),
        "::",
        stringify!(peak)
        )
    );
}
extern "C" {
    pub fn ma_peak_node_init(
        pNodeGraph: *mut ma_node_graph,
        pConfig: *const ma_peak_node_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pNode: *mut ma_peak_node,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_peak_node_reinit(
        pConfig: *const ma_peak_config,
        pNode: *mut ma_peak_node,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_peak_node_uninit(
        pNode: *mut ma_peak_node,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_loshelf_node_config {
    pub nodeConfig: ma_node_config,
    pub loshelf: ma_loshelf_config,
}
#[test]
fn bindgen_test_layout_ma_loshelf_node_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_loshelf_node_config> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_loshelf_node_config>(),
        80usize,
        concat!("Size of: ", stringify!(ma_loshelf_node_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_loshelf_node_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_loshelf_node_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeConfig) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_loshelf_node_config),
        "::",
        stringify!(nodeConfig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loshelf) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_loshelf_node_config),
        "::",
        stringify!(loshelf)
        )
    );
}
extern "C" {
    pub fn ma_loshelf_node_config_init(
        channels: ma_uint32,
        sampleRate: ma_uint32,
        gainDB: f64,
        q: f64,
        frequency: f64,
    ) -> ma_loshelf_node_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_loshelf_node {
    pub baseNode: ma_node_base,
    pub loshelf: ma_loshelf2,
}
#[test]
fn bindgen_test_layout_ma_loshelf_node() {
    const UNINIT: ::std::mem::MaybeUninit<ma_loshelf_node> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_loshelf_node>(),
        424usize,
        concat!("Size of: ", stringify!(ma_loshelf_node))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_loshelf_node>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_loshelf_node))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseNode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_loshelf_node),
        "::",
        stringify!(baseNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loshelf) as usize - ptr as usize },
        360usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_loshelf_node),
        "::",
        stringify!(loshelf)
        )
    );
}
extern "C" {
    pub fn ma_loshelf_node_init(
        pNodeGraph: *mut ma_node_graph,
        pConfig: *const ma_loshelf_node_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pNode: *mut ma_loshelf_node,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_loshelf_node_reinit(
        pConfig: *const ma_loshelf_config,
        pNode: *mut ma_loshelf_node,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_loshelf_node_uninit(
        pNode: *mut ma_loshelf_node,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_hishelf_node_config {
    pub nodeConfig: ma_node_config,
    pub hishelf: ma_hishelf_config,
}
#[test]
fn bindgen_test_layout_ma_hishelf_node_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_hishelf_node_config> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_hishelf_node_config>(),
        80usize,
        concat!("Size of: ", stringify!(ma_hishelf_node_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_hishelf_node_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_hishelf_node_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeConfig) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hishelf_node_config),
        "::",
        stringify!(nodeConfig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hishelf) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hishelf_node_config),
        "::",
        stringify!(hishelf)
        )
    );
}
extern "C" {
    pub fn ma_hishelf_node_config_init(
        channels: ma_uint32,
        sampleRate: ma_uint32,
        gainDB: f64,
        q: f64,
        frequency: f64,
    ) -> ma_hishelf_node_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_hishelf_node {
    pub baseNode: ma_node_base,
    pub hishelf: ma_hishelf2,
}
#[test]
fn bindgen_test_layout_ma_hishelf_node() {
    const UNINIT: ::std::mem::MaybeUninit<ma_hishelf_node> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_hishelf_node>(),
        424usize,
        concat!("Size of: ", stringify!(ma_hishelf_node))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_hishelf_node>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_hishelf_node))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseNode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hishelf_node),
        "::",
        stringify!(baseNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hishelf) as usize - ptr as usize },
        360usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_hishelf_node),
        "::",
        stringify!(hishelf)
        )
    );
}
extern "C" {
    pub fn ma_hishelf_node_init(
        pNodeGraph: *mut ma_node_graph,
        pConfig: *const ma_hishelf_node_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pNode: *mut ma_hishelf_node,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_hishelf_node_reinit(
        pConfig: *const ma_hishelf_config,
        pNode: *mut ma_hishelf_node,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_hishelf_node_uninit(
        pNode: *mut ma_hishelf_node,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_delay_node_config {
    pub nodeConfig: ma_node_config,
    pub delay: ma_delay_config,
}
#[test]
fn bindgen_test_layout_ma_delay_node_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_delay_node_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_delay_node_config>(),
        72usize,
        concat!("Size of: ", stringify!(ma_delay_node_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_delay_node_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_delay_node_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeConfig) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_delay_node_config),
        "::",
        stringify!(nodeConfig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delay) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_delay_node_config),
        "::",
        stringify!(delay)
        )
    );
}
extern "C" {
    pub fn ma_delay_node_config_init(
        channels: ma_uint32,
        sampleRate: ma_uint32,
        delayInFrames: ma_uint32,
        decay: f32,
    ) -> ma_delay_node_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_delay_node {
    pub baseNode: ma_node_base,
    pub delay: ma_delay,
}
#[test]
fn bindgen_test_layout_ma_delay_node() {
    const UNINIT: ::std::mem::MaybeUninit<ma_delay_node> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_delay_node>(),
        408usize,
        concat!("Size of: ", stringify!(ma_delay_node))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_delay_node>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_delay_node))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseNode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_delay_node),
        "::",
        stringify!(baseNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delay) as usize - ptr as usize },
        360usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_delay_node),
        "::",
        stringify!(delay)
        )
    );
}
extern "C" {
    pub fn ma_delay_node_init(
        pNodeGraph: *mut ma_node_graph,
        pConfig: *const ma_delay_node_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pDelayNode: *mut ma_delay_node,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_delay_node_uninit(
        pDelayNode: *mut ma_delay_node,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
extern "C" {
    pub fn ma_delay_node_set_wet(pDelayNode: *mut ma_delay_node, value: f32);
}
extern "C" {
    pub fn ma_delay_node_get_wet(pDelayNode: *const ma_delay_node) -> f32;
}
extern "C" {
    pub fn ma_delay_node_set_dry(pDelayNode: *mut ma_delay_node, value: f32);
}
extern "C" {
    pub fn ma_delay_node_get_dry(pDelayNode: *const ma_delay_node) -> f32;
}
extern "C" {
    pub fn ma_delay_node_set_decay(pDelayNode: *mut ma_delay_node, value: f32);
}
extern "C" {
    pub fn ma_delay_node_get_decay(pDelayNode: *const ma_delay_node) -> f32;
}
pub const ma_sound_flags_MA_SOUND_FLAG_STREAM: ma_sound_flags = 1;
pub const ma_sound_flags_MA_SOUND_FLAG_DECODE: ma_sound_flags = 2;
pub const ma_sound_flags_MA_SOUND_FLAG_ASYNC: ma_sound_flags = 4;
pub const ma_sound_flags_MA_SOUND_FLAG_WAIT_INIT: ma_sound_flags = 8;
pub const ma_sound_flags_MA_SOUND_FLAG_NO_DEFAULT_ATTACHMENT: ma_sound_flags = 16;
pub const ma_sound_flags_MA_SOUND_FLAG_NO_PITCH: ma_sound_flags = 32;
pub const ma_sound_flags_MA_SOUND_FLAG_NO_SPATIALIZATION: ma_sound_flags = 64;
pub type ma_sound_flags = ::std::os::raw::c_int;
pub const ma_engine_node_type_ma_engine_node_type_sound: ma_engine_node_type = 0;
pub const ma_engine_node_type_ma_engine_node_type_group: ma_engine_node_type = 1;
pub type ma_engine_node_type = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_engine_node_config {
    pub pEngine: *mut ma_engine,
    pub type_: ma_engine_node_type,
    pub channelsIn: ma_uint32,
    pub channelsOut: ma_uint32,
    pub sampleRate: ma_uint32,
    pub monoExpansionMode: ma_mono_expansion_mode,
    pub isPitchDisabled: ma_bool8,
    pub isSpatializationDisabled: ma_bool8,
    pub pinnedListenerIndex: ma_uint8,
}
#[test]
fn bindgen_test_layout_ma_engine_node_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_engine_node_config> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_engine_node_config>(),
        32usize,
        concat!("Size of: ", stringify!(ma_engine_node_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_engine_node_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_engine_node_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pEngine) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_node_config),
        "::",
        stringify!(pEngine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_node_config),
        "::",
        stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelsIn) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_node_config),
        "::",
        stringify!(channelsIn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelsOut) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_node_config),
        "::",
        stringify!(channelsOut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_node_config),
        "::",
        stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).monoExpansionMode) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_node_config),
        "::",
        stringify!(monoExpansionMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isPitchDisabled) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_node_config),
        "::",
        stringify!(isPitchDisabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isSpatializationDisabled) as usize - ptr as usize },
        29usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_node_config),
        "::",
        stringify!(isSpatializationDisabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pinnedListenerIndex) as usize - ptr as usize },
        30usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_node_config),
        "::",
        stringify!(pinnedListenerIndex)
        )
    );
}
extern "C" {
    pub fn ma_engine_node_config_init(
        pEngine: *mut ma_engine,
        type_: ma_engine_node_type,
        flags: ma_uint32,
    ) -> ma_engine_node_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_engine_node {
    pub baseNode: ma_node_base,
    pub pEngine: *mut ma_engine,
    pub sampleRate: ma_uint32,
    pub monoExpansionMode: ma_mono_expansion_mode,
    pub fader: ma_fader,
    pub resampler: ma_linear_resampler,
    pub spatializer: ma_spatializer,
    pub panner: ma_panner,
    pub pitch: f32,
    pub oldPitch: f32,
    pub oldDopplerPitch: f32,
    pub isPitchDisabled: ma_bool32,
    pub isSpatializationDisabled: ma_bool32,
    pub pinnedListenerIndex: ma_uint32,
    pub _ownsHeap: ma_bool8,
    pub _pHeap: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ma_engine_node() {
    const UNINIT: ::std::mem::MaybeUninit<ma_engine_node> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_engine_node>(),
        792usize,
        concat!("Size of: ", stringify!(ma_engine_node))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_engine_node>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_engine_node))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseNode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_node),
        "::",
        stringify!(baseNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pEngine) as usize - ptr as usize },
        360usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_node),
        "::",
        stringify!(pEngine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        368usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_node),
        "::",
        stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).monoExpansionMode) as usize - ptr as usize },
        372usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_node),
        "::",
        stringify!(monoExpansionMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fader) as usize - ptr as usize },
        376usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_node),
        "::",
        stringify!(fader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resampler) as usize - ptr as usize },
        416usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_node),
        "::",
        stringify!(resampler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spatializer) as usize - ptr as usize },
        552usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_node),
        "::",
        stringify!(spatializer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).panner) as usize - ptr as usize },
        736usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_node),
        "::",
        stringify!(panner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitch) as usize - ptr as usize },
        752usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_node),
        "::",
        stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oldPitch) as usize - ptr as usize },
        756usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_node),
        "::",
        stringify!(oldPitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oldDopplerPitch) as usize - ptr as usize },
        760usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_node),
        "::",
        stringify!(oldDopplerPitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isPitchDisabled) as usize - ptr as usize },
        764usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_node),
        "::",
        stringify!(isPitchDisabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isSpatializationDisabled) as usize - ptr as usize },
        768usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_node),
        "::",
        stringify!(isSpatializationDisabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pinnedListenerIndex) as usize - ptr as usize },
        772usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_node),
        "::",
        stringify!(pinnedListenerIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ownsHeap) as usize - ptr as usize },
        776usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_node),
        "::",
        stringify!(_ownsHeap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pHeap) as usize - ptr as usize },
        784usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_node),
        "::",
        stringify!(_pHeap)
        )
    );
}
extern "C" {
    pub fn ma_engine_node_get_heap_size(
        pConfig: *const ma_engine_node_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_engine_node_init_preallocated(
        pConfig: *const ma_engine_node_config,
        pHeap: *mut ::std::os::raw::c_void,
        pEngineNode: *mut ma_engine_node,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_engine_node_init(
        pConfig: *const ma_engine_node_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pEngineNode: *mut ma_engine_node,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_engine_node_uninit(
        pEngineNode: *mut ma_engine_node,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_sound_config {
    pub pFilePath: *const ::std::os::raw::c_char,
    pub pFilePathW: *const wchar_t,
    pub pDataSource: *mut ma_data_source,
    pub pInitialAttachment: *mut ma_node,
    pub initialAttachmentInputBusIndex: ma_uint32,
    pub channelsIn: ma_uint32,
    pub channelsOut: ma_uint32,
    pub monoExpansionMode: ma_mono_expansion_mode,
    pub flags: ma_uint32,
    pub initialSeekPointInPCMFrames: ma_uint64,
    pub rangeBegInPCMFrames: ma_uint64,
    pub rangeEndInPCMFrames: ma_uint64,
    pub loopPointBegInPCMFrames: ma_uint64,
    pub loopPointEndInPCMFrames: ma_uint64,
    pub isLooping: ma_bool32,
    pub pDoneFence: *mut ma_fence,
}
#[test]
fn bindgen_test_layout_ma_sound_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_sound_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_sound_config>(),
        112usize,
        concat!("Size of: ", stringify!(ma_sound_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_sound_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_sound_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pFilePath) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_sound_config),
        "::",
        stringify!(pFilePath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pFilePathW) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_sound_config),
        "::",
        stringify!(pFilePathW)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDataSource) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_sound_config),
        "::",
        stringify!(pDataSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInitialAttachment) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_sound_config),
        "::",
        stringify!(pInitialAttachment)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).initialAttachmentInputBusIndex) as usize - ptr as usize
        },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_sound_config),
        "::",
        stringify!(initialAttachmentInputBusIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelsIn) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_sound_config),
        "::",
        stringify!(channelsIn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelsOut) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_sound_config),
        "::",
        stringify!(channelsOut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).monoExpansionMode) as usize - ptr as usize },
        44usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_sound_config),
        "::",
        stringify!(monoExpansionMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_sound_config),
        "::",
        stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialSeekPointInPCMFrames) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_sound_config),
        "::",
        stringify!(initialSeekPointInPCMFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rangeBegInPCMFrames) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_sound_config),
        "::",
        stringify!(rangeBegInPCMFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rangeEndInPCMFrames) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_sound_config),
        "::",
        stringify!(rangeEndInPCMFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loopPointBegInPCMFrames) as usize - ptr as usize },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_sound_config),
        "::",
        stringify!(loopPointBegInPCMFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loopPointEndInPCMFrames) as usize - ptr as usize },
        88usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_sound_config),
        "::",
        stringify!(loopPointEndInPCMFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isLooping) as usize - ptr as usize },
        96usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_sound_config),
        "::",
        stringify!(isLooping)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDoneFence) as usize - ptr as usize },
        104usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_sound_config),
        "::",
        stringify!(pDoneFence)
        )
    );
}
extern "C" {
    pub fn ma_sound_config_init() -> ma_sound_config;
}
extern "C" {
    pub fn ma_sound_config_init_2(pEngine: *mut ma_engine) -> ma_sound_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_sound {
    pub engineNode: ma_engine_node,
    pub pDataSource: *mut ma_data_source,
    pub seekTarget: ma_uint64,
    pub atEnd: ma_bool32,
    pub ownsDataSource: ma_bool8,
    pub pResourceManagerDataSource: *mut ma_resource_manager_data_source,
}
#[test]
fn bindgen_test_layout_ma_sound() {
    const UNINIT: ::std::mem::MaybeUninit<ma_sound> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_sound>(),
        824usize,
        concat!("Size of: ", stringify!(ma_sound))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_sound>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_sound))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).engineNode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_sound),
        "::",
        stringify!(engineNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDataSource) as usize - ptr as usize },
        792usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_sound),
        "::",
        stringify!(pDataSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seekTarget) as usize - ptr as usize },
        800usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_sound),
        "::",
        stringify!(seekTarget)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).atEnd) as usize - ptr as usize },
        808usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_sound),
        "::",
        stringify!(atEnd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ownsDataSource) as usize - ptr as usize },
        812usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_sound),
        "::",
        stringify!(ownsDataSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pResourceManagerDataSource) as usize - ptr as usize },
        816usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_sound),
        "::",
        stringify!(pResourceManagerDataSource)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_sound_inlined {
    pub sound: ma_sound,
    pub pNext: *mut ma_sound_inlined,
    pub pPrev: *mut ma_sound_inlined,
}
#[test]
fn bindgen_test_layout_ma_sound_inlined() {
    const UNINIT: ::std::mem::MaybeUninit<ma_sound_inlined> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_sound_inlined>(),
        840usize,
        concat!("Size of: ", stringify!(ma_sound_inlined))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_sound_inlined>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_sound_inlined))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sound) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_sound_inlined),
        "::",
        stringify!(sound)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        824usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_sound_inlined),
        "::",
        stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPrev) as usize - ptr as usize },
        832usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_sound_inlined),
        "::",
        stringify!(pPrev)
        )
    );
}
pub type ma_sound_group_config = ma_sound_config;
pub type ma_sound_group = ma_sound;
extern "C" {
    pub fn ma_sound_group_config_init() -> ma_sound_group_config;
}
extern "C" {
    pub fn ma_sound_group_config_init_2(pEngine: *mut ma_engine) -> ma_sound_group_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_engine_config {
    pub pResourceManager: *mut ma_resource_manager,
    pub pContext: *mut ma_context,
    pub pDevice: *mut ma_device,
    pub pPlaybackDeviceID: *mut ma_device_id,
    pub notificationCallback: ma_device_notification_proc,
    pub pLog: *mut ma_log,
    pub listenerCount: ma_uint32,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub periodSizeInFrames: ma_uint32,
    pub periodSizeInMilliseconds: ma_uint32,
    pub gainSmoothTimeInFrames: ma_uint32,
    pub gainSmoothTimeInMilliseconds: ma_uint32,
    pub allocationCallbacks: ma_allocation_callbacks,
    pub noAutoStart: ma_bool32,
    pub noDevice: ma_bool32,
    pub monoExpansionMode: ma_mono_expansion_mode,
    pub pResourceManagerVFS: *mut ma_vfs,
}
#[test]
fn bindgen_test_layout_ma_engine_config() {
    const UNINIT: ::std::mem::MaybeUninit<ma_engine_config> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_engine_config>(),
        136usize,
        concat!("Size of: ", stringify!(ma_engine_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_engine_config>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_engine_config))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pResourceManager) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_config),
        "::",
        stringify!(pResourceManager)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pContext) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_config),
        "::",
        stringify!(pContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDevice) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_config),
        "::",
        stringify!(pDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPlaybackDeviceID) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_config),
        "::",
        stringify!(pPlaybackDeviceID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notificationCallback) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_config),
        "::",
        stringify!(notificationCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pLog) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_config),
        "::",
        stringify!(pLog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).listenerCount) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_config),
        "::",
        stringify!(listenerCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        52usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_config),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_config),
        "::",
        stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).periodSizeInFrames) as usize - ptr as usize },
        60usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_config),
        "::",
        stringify!(periodSizeInFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).periodSizeInMilliseconds) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_config),
        "::",
        stringify!(periodSizeInMilliseconds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gainSmoothTimeInFrames) as usize - ptr as usize },
        68usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_config),
        "::",
        stringify!(gainSmoothTimeInFrames)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).gainSmoothTimeInMilliseconds) as usize - ptr as usize
        },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_config),
        "::",
        stringify!(gainSmoothTimeInMilliseconds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocationCallbacks) as usize - ptr as usize },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_config),
        "::",
        stringify!(allocationCallbacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noAutoStart) as usize - ptr as usize },
        112usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_config),
        "::",
        stringify!(noAutoStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noDevice) as usize - ptr as usize },
        116usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_config),
        "::",
        stringify!(noDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).monoExpansionMode) as usize - ptr as usize },
        120usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_config),
        "::",
        stringify!(monoExpansionMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pResourceManagerVFS) as usize - ptr as usize },
        128usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine_config),
        "::",
        stringify!(pResourceManagerVFS)
        )
    );
}
extern "C" {
    pub fn ma_engine_config_init() -> ma_engine_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_engine {
    pub nodeGraph: ma_node_graph,
    pub pResourceManager: *mut ma_resource_manager,
    pub pDevice: *mut ma_device,
    pub pLog: *mut ma_log,
    pub sampleRate: ma_uint32,
    pub listenerCount: ma_uint32,
    pub listeners: [ma_spatializer_listener; 4usize],
    pub allocationCallbacks: ma_allocation_callbacks,
    pub ownsResourceManager: ma_bool8,
    pub ownsDevice: ma_bool8,
    pub inlinedSoundLock: ma_spinlock,
    pub pInlinedSoundHead: *mut ma_sound_inlined,
    pub inlinedSoundCount: ma_uint32,
    pub gainSmoothTimeInFrames: ma_uint32,
    pub monoExpansionMode: ma_mono_expansion_mode,
}
#[test]
fn bindgen_test_layout_ma_engine() {
    const UNINIT: ::std::mem::MaybeUninit<ma_engine> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ma_engine>(),
        1240usize,
        concat!("Size of: ", stringify!(ma_engine))
    );
    assert_eq!(
        ::std::mem::align_of::<ma_engine>(),
        8usize,
        concat!("Alignment of ", stringify!(ma_engine))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeGraph) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine),
        "::",
        stringify!(nodeGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pResourceManager) as usize - ptr as usize },
        728usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine),
        "::",
        stringify!(pResourceManager)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDevice) as usize - ptr as usize },
        736usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine),
        "::",
        stringify!(pDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pLog) as usize - ptr as usize },
        744usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine),
        "::",
        stringify!(pLog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        752usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine),
        "::",
        stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).listenerCount) as usize - ptr as usize },
        756usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine),
        "::",
        stringify!(listenerCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).listeners) as usize - ptr as usize },
        760usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine),
        "::",
        stringify!(listeners)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocationCallbacks) as usize - ptr as usize },
        1176usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine),
        "::",
        stringify!(allocationCallbacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ownsResourceManager) as usize - ptr as usize },
        1208usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine),
        "::",
        stringify!(ownsResourceManager)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ownsDevice) as usize - ptr as usize },
        1209usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine),
        "::",
        stringify!(ownsDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inlinedSoundLock) as usize - ptr as usize },
        1212usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine),
        "::",
        stringify!(inlinedSoundLock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInlinedSoundHead) as usize - ptr as usize },
        1216usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine),
        "::",
        stringify!(pInlinedSoundHead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inlinedSoundCount) as usize - ptr as usize },
        1224usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine),
        "::",
        stringify!(inlinedSoundCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gainSmoothTimeInFrames) as usize - ptr as usize },
        1228usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine),
        "::",
        stringify!(gainSmoothTimeInFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).monoExpansionMode) as usize - ptr as usize },
        1232usize,
        concat!(
        "Offset of field: ",
        stringify!(ma_engine),
        "::",
        stringify!(monoExpansionMode)
        )
    );
}
extern "C" {
    pub fn ma_engine_init(pConfig: *const ma_engine_config, pEngine: *mut ma_engine) -> ma_result;
}
extern "C" {
    pub fn ma_engine_uninit(pEngine: *mut ma_engine);
}
extern "C" {
    pub fn ma_engine_read_pcm_frames(
        pEngine: *mut ma_engine,
        pFramesOut: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        pFramesRead: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_engine_get_node_graph(pEngine: *mut ma_engine) -> *mut ma_node_graph;
}
extern "C" {
    pub fn ma_engine_get_resource_manager(pEngine: *mut ma_engine) -> *mut ma_resource_manager;
}
extern "C" {
    pub fn ma_engine_get_device(pEngine: *mut ma_engine) -> *mut ma_device;
}
extern "C" {
    pub fn ma_engine_get_log(pEngine: *mut ma_engine) -> *mut ma_log;
}
extern "C" {
    pub fn ma_engine_get_endpoint(pEngine: *mut ma_engine) -> *mut ma_node;
}
extern "C" {
    pub fn ma_engine_get_time(pEngine: *const ma_engine) -> ma_uint64;
}
extern "C" {
    pub fn ma_engine_set_time(pEngine: *mut ma_engine, globalTime: ma_uint64) -> ma_result;
}
extern "C" {
    pub fn ma_engine_get_channels(pEngine: *const ma_engine) -> ma_uint32;
}
extern "C" {
    pub fn ma_engine_get_sample_rate(pEngine: *const ma_engine) -> ma_uint32;
}
extern "C" {
    pub fn ma_engine_start(pEngine: *mut ma_engine) -> ma_result;
}
extern "C" {
    pub fn ma_engine_stop(pEngine: *mut ma_engine) -> ma_result;
}
extern "C" {
    pub fn ma_engine_set_volume(pEngine: *mut ma_engine, volume: f32) -> ma_result;
}
extern "C" {
    pub fn ma_engine_set_gain_db(pEngine: *mut ma_engine, gainDB: f32) -> ma_result;
}
extern "C" {
    pub fn ma_engine_get_listener_count(pEngine: *const ma_engine) -> ma_uint32;
}
extern "C" {
    pub fn ma_engine_find_closest_listener(
        pEngine: *const ma_engine,
        absolutePosX: f32,
        absolutePosY: f32,
        absolutePosZ: f32,
    ) -> ma_uint32;
}
extern "C" {
    pub fn ma_engine_listener_set_position(
        pEngine: *mut ma_engine,
        listenerIndex: ma_uint32,
        x: f32,
        y: f32,
        z: f32,
    );
}
extern "C" {
    pub fn ma_engine_listener_get_position(
        pEngine: *const ma_engine,
        listenerIndex: ma_uint32,
    ) -> ma_vec3f;
}
extern "C" {
    pub fn ma_engine_listener_set_direction(
        pEngine: *mut ma_engine,
        listenerIndex: ma_uint32,
        x: f32,
        y: f32,
        z: f32,
    );
}
extern "C" {
    pub fn ma_engine_listener_get_direction(
        pEngine: *const ma_engine,
        listenerIndex: ma_uint32,
    ) -> ma_vec3f;
}
extern "C" {
    pub fn ma_engine_listener_set_velocity(
        pEngine: *mut ma_engine,
        listenerIndex: ma_uint32,
        x: f32,
        y: f32,
        z: f32,
    );
}
extern "C" {
    pub fn ma_engine_listener_get_velocity(
        pEngine: *const ma_engine,
        listenerIndex: ma_uint32,
    ) -> ma_vec3f;
}
extern "C" {
    pub fn ma_engine_listener_set_cone(
        pEngine: *mut ma_engine,
        listenerIndex: ma_uint32,
        innerAngleInRadians: f32,
        outerAngleInRadians: f32,
        outerGain: f32,
    );
}
extern "C" {
    pub fn ma_engine_listener_get_cone(
        pEngine: *const ma_engine,
        listenerIndex: ma_uint32,
        pInnerAngleInRadians: *mut f32,
        pOuterAngleInRadians: *mut f32,
        pOuterGain: *mut f32,
    );
}
extern "C" {
    pub fn ma_engine_listener_set_world_up(
        pEngine: *mut ma_engine,
        listenerIndex: ma_uint32,
        x: f32,
        y: f32,
        z: f32,
    );
}
extern "C" {
    pub fn ma_engine_listener_get_world_up(
        pEngine: *const ma_engine,
        listenerIndex: ma_uint32,
    ) -> ma_vec3f;
}
extern "C" {
    pub fn ma_engine_listener_set_enabled(
        pEngine: *mut ma_engine,
        listenerIndex: ma_uint32,
        isEnabled: ma_bool32,
    );
}
extern "C" {
    pub fn ma_engine_listener_is_enabled(
        pEngine: *const ma_engine,
        listenerIndex: ma_uint32,
    ) -> ma_bool32;
}
extern "C" {
    pub fn ma_engine_play_sound_ex(
        pEngine: *mut ma_engine,
        pFilePath: *const ::std::os::raw::c_char,
        pNode: *mut ma_node,
        nodeInputBusIndex: ma_uint32,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_engine_play_sound(
        pEngine: *mut ma_engine,
        pFilePath: *const ::std::os::raw::c_char,
        pGroup: *mut ma_sound_group,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_sound_init_from_file(
        pEngine: *mut ma_engine,
        pFilePath: *const ::std::os::raw::c_char,
        flags: ma_uint32,
        pGroup: *mut ma_sound_group,
        pDoneFence: *mut ma_fence,
        pSound: *mut ma_sound,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_sound_init_from_file_w(
        pEngine: *mut ma_engine,
        pFilePath: *const wchar_t,
        flags: ma_uint32,
        pGroup: *mut ma_sound_group,
        pDoneFence: *mut ma_fence,
        pSound: *mut ma_sound,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_sound_init_copy(
        pEngine: *mut ma_engine,
        pExistingSound: *const ma_sound,
        flags: ma_uint32,
        pGroup: *mut ma_sound_group,
        pSound: *mut ma_sound,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_sound_init_from_data_source(
        pEngine: *mut ma_engine,
        pDataSource: *mut ma_data_source,
        flags: ma_uint32,
        pGroup: *mut ma_sound_group,
        pSound: *mut ma_sound,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_sound_init_ex(
        pEngine: *mut ma_engine,
        pConfig: *const ma_sound_config,
        pSound: *mut ma_sound,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_sound_uninit(pSound: *mut ma_sound);
}
extern "C" {
    pub fn ma_sound_get_engine(pSound: *const ma_sound) -> *mut ma_engine;
}
extern "C" {
    pub fn ma_sound_get_data_source(pSound: *const ma_sound) -> *mut ma_data_source;
}
extern "C" {
    pub fn ma_sound_start(pSound: *mut ma_sound) -> ma_result;
}
extern "C" {
    pub fn ma_sound_stop(pSound: *mut ma_sound) -> ma_result;
}
extern "C" {
    pub fn ma_sound_set_volume(pSound: *mut ma_sound, volume: f32);
}
extern "C" {
    pub fn ma_sound_get_volume(pSound: *const ma_sound) -> f32;
}
extern "C" {
    pub fn ma_sound_set_pan(pSound: *mut ma_sound, pan: f32);
}
extern "C" {
    pub fn ma_sound_get_pan(pSound: *const ma_sound) -> f32;
}
extern "C" {
    pub fn ma_sound_set_pan_mode(pSound: *mut ma_sound, panMode: ma_pan_mode);
}
extern "C" {
    pub fn ma_sound_get_pan_mode(pSound: *const ma_sound) -> ma_pan_mode;
}
extern "C" {
    pub fn ma_sound_set_pitch(pSound: *mut ma_sound, pitch: f32);
}
extern "C" {
    pub fn ma_sound_get_pitch(pSound: *const ma_sound) -> f32;
}
extern "C" {
    pub fn ma_sound_set_spatialization_enabled(pSound: *mut ma_sound, enabled: ma_bool32);
}
extern "C" {
    pub fn ma_sound_is_spatialization_enabled(pSound: *const ma_sound) -> ma_bool32;
}
extern "C" {
    pub fn ma_sound_set_pinned_listener_index(pSound: *mut ma_sound, listenerIndex: ma_uint32);
}
extern "C" {
    pub fn ma_sound_get_pinned_listener_index(pSound: *const ma_sound) -> ma_uint32;
}
extern "C" {
    pub fn ma_sound_get_listener_index(pSound: *const ma_sound) -> ma_uint32;
}
extern "C" {
    pub fn ma_sound_get_direction_to_listener(pSound: *const ma_sound) -> ma_vec3f;
}
extern "C" {
    pub fn ma_sound_set_position(pSound: *mut ma_sound, x: f32, y: f32, z: f32);
}
extern "C" {
    pub fn ma_sound_get_position(pSound: *const ma_sound) -> ma_vec3f;
}
extern "C" {
    pub fn ma_sound_set_direction(pSound: *mut ma_sound, x: f32, y: f32, z: f32);
}
extern "C" {
    pub fn ma_sound_get_direction(pSound: *const ma_sound) -> ma_vec3f;
}
extern "C" {
    pub fn ma_sound_set_velocity(pSound: *mut ma_sound, x: f32, y: f32, z: f32);
}
extern "C" {
    pub fn ma_sound_get_velocity(pSound: *const ma_sound) -> ma_vec3f;
}
extern "C" {
    pub fn ma_sound_set_attenuation_model(
        pSound: *mut ma_sound,
        attenuationModel: ma_attenuation_model,
    );
}
extern "C" {
    pub fn ma_sound_get_attenuation_model(pSound: *const ma_sound) -> ma_attenuation_model;
}
extern "C" {
    pub fn ma_sound_set_positioning(pSound: *mut ma_sound, positioning: ma_positioning);
}
extern "C" {
    pub fn ma_sound_get_positioning(pSound: *const ma_sound) -> ma_positioning;
}
extern "C" {
    pub fn ma_sound_set_rolloff(pSound: *mut ma_sound, rolloff: f32);
}
extern "C" {
    pub fn ma_sound_get_rolloff(pSound: *const ma_sound) -> f32;
}
extern "C" {
    pub fn ma_sound_set_min_gain(pSound: *mut ma_sound, minGain: f32);
}
extern "C" {
    pub fn ma_sound_get_min_gain(pSound: *const ma_sound) -> f32;
}
extern "C" {
    pub fn ma_sound_set_max_gain(pSound: *mut ma_sound, maxGain: f32);
}
extern "C" {
    pub fn ma_sound_get_max_gain(pSound: *const ma_sound) -> f32;
}
extern "C" {
    pub fn ma_sound_set_min_distance(pSound: *mut ma_sound, minDistance: f32);
}
extern "C" {
    pub fn ma_sound_get_min_distance(pSound: *const ma_sound) -> f32;
}
extern "C" {
    pub fn ma_sound_set_max_distance(pSound: *mut ma_sound, maxDistance: f32);
}
extern "C" {
    pub fn ma_sound_get_max_distance(pSound: *const ma_sound) -> f32;
}
extern "C" {
    pub fn ma_sound_set_cone(
        pSound: *mut ma_sound,
        innerAngleInRadians: f32,
        outerAngleInRadians: f32,
        outerGain: f32,
    );
}
extern "C" {
    pub fn ma_sound_get_cone(
        pSound: *const ma_sound,
        pInnerAngleInRadians: *mut f32,
        pOuterAngleInRadians: *mut f32,
        pOuterGain: *mut f32,
    );
}
extern "C" {
    pub fn ma_sound_set_doppler_factor(pSound: *mut ma_sound, dopplerFactor: f32);
}
extern "C" {
    pub fn ma_sound_get_doppler_factor(pSound: *const ma_sound) -> f32;
}
extern "C" {
    pub fn ma_sound_set_directional_attenuation_factor(
        pSound: *mut ma_sound,
        directionalAttenuationFactor: f32,
    );
}
extern "C" {
    pub fn ma_sound_get_directional_attenuation_factor(pSound: *const ma_sound) -> f32;
}
extern "C" {
    pub fn ma_sound_set_fade_in_pcm_frames(
        pSound: *mut ma_sound,
        volumeBeg: f32,
        volumeEnd: f32,
        fadeLengthInFrames: ma_uint64,
    );
}
extern "C" {
    pub fn ma_sound_set_fade_in_milliseconds(
        pSound: *mut ma_sound,
        volumeBeg: f32,
        volumeEnd: f32,
        fadeLengthInMilliseconds: ma_uint64,
    );
}
extern "C" {
    pub fn ma_sound_get_current_fade_volume(pSound: *mut ma_sound) -> f32;
}
extern "C" {
    pub fn ma_sound_set_start_time_in_pcm_frames(
        pSound: *mut ma_sound,
        absoluteGlobalTimeInFrames: ma_uint64,
    );
}
extern "C" {
    pub fn ma_sound_set_start_time_in_milliseconds(
        pSound: *mut ma_sound,
        absoluteGlobalTimeInMilliseconds: ma_uint64,
    );
}
extern "C" {
    pub fn ma_sound_set_stop_time_in_pcm_frames(
        pSound: *mut ma_sound,
        absoluteGlobalTimeInFrames: ma_uint64,
    );
}
extern "C" {
    pub fn ma_sound_set_stop_time_in_milliseconds(
        pSound: *mut ma_sound,
        absoluteGlobalTimeInMilliseconds: ma_uint64,
    );
}
extern "C" {
    pub fn ma_sound_is_playing(pSound: *const ma_sound) -> ma_bool32;
}
extern "C" {
    pub fn ma_sound_get_time_in_pcm_frames(pSound: *const ma_sound) -> ma_uint64;
}
extern "C" {
    pub fn ma_sound_set_looping(pSound: *mut ma_sound, isLooping: ma_bool32);
}
extern "C" {
    pub fn ma_sound_is_looping(pSound: *const ma_sound) -> ma_bool32;
}
extern "C" {
    pub fn ma_sound_at_end(pSound: *const ma_sound) -> ma_bool32;
}
extern "C" {
    pub fn ma_sound_seek_to_pcm_frame(pSound: *mut ma_sound, frameIndex: ma_uint64) -> ma_result;
}
extern "C" {
    pub fn ma_sound_get_data_format(
        pSound: *mut ma_sound,
        pFormat: *mut ma_format,
        pChannels: *mut ma_uint32,
        pSampleRate: *mut ma_uint32,
        pChannelMap: *mut ma_channel,
        channelMapCap: usize,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_sound_get_cursor_in_pcm_frames(
        pSound: *mut ma_sound,
        pCursor: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_sound_get_length_in_pcm_frames(
        pSound: *mut ma_sound,
        pLength: *mut ma_uint64,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_sound_get_cursor_in_seconds(pSound: *mut ma_sound, pCursor: *mut f32) -> ma_result;
}
extern "C" {
    pub fn ma_sound_get_length_in_seconds(pSound: *mut ma_sound, pLength: *mut f32) -> ma_result;
}
extern "C" {
    pub fn ma_sound_group_init(
        pEngine: *mut ma_engine,
        flags: ma_uint32,
        pParentGroup: *mut ma_sound_group,
        pGroup: *mut ma_sound_group,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_sound_group_init_ex(
        pEngine: *mut ma_engine,
        pConfig: *const ma_sound_group_config,
        pGroup: *mut ma_sound_group,
    ) -> ma_result;
}
extern "C" {
    pub fn ma_sound_group_uninit(pGroup: *mut ma_sound_group);
}
extern "C" {
    pub fn ma_sound_group_get_engine(pGroup: *const ma_sound_group) -> *mut ma_engine;
}
extern "C" {
    pub fn ma_sound_group_start(pGroup: *mut ma_sound_group) -> ma_result;
}
extern "C" {
    pub fn ma_sound_group_stop(pGroup: *mut ma_sound_group) -> ma_result;
}
extern "C" {
    pub fn ma_sound_group_set_volume(pGroup: *mut ma_sound_group, volume: f32);
}
extern "C" {
    pub fn ma_sound_group_get_volume(pGroup: *const ma_sound_group) -> f32;
}
extern "C" {
    pub fn ma_sound_group_set_pan(pGroup: *mut ma_sound_group, pan: f32);
}
extern "C" {
    pub fn ma_sound_group_get_pan(pGroup: *const ma_sound_group) -> f32;
}
extern "C" {
    pub fn ma_sound_group_set_pan_mode(pGroup: *mut ma_sound_group, panMode: ma_pan_mode);
}
extern "C" {
    pub fn ma_sound_group_get_pan_mode(pGroup: *const ma_sound_group) -> ma_pan_mode;
}
extern "C" {
    pub fn ma_sound_group_set_pitch(pGroup: *mut ma_sound_group, pitch: f32);
}
extern "C" {
    pub fn ma_sound_group_get_pitch(pGroup: *const ma_sound_group) -> f32;
}
extern "C" {
    pub fn ma_sound_group_set_spatialization_enabled(
        pGroup: *mut ma_sound_group,
        enabled: ma_bool32,
    );
}
extern "C" {
    pub fn ma_sound_group_is_spatialization_enabled(pGroup: *const ma_sound_group) -> ma_bool32;
}
extern "C" {
    pub fn ma_sound_group_set_pinned_listener_index(
        pGroup: *mut ma_sound_group,
        listenerIndex: ma_uint32,
    );
}
extern "C" {
    pub fn ma_sound_group_get_pinned_listener_index(pGroup: *const ma_sound_group) -> ma_uint32;
}
extern "C" {
    pub fn ma_sound_group_get_listener_index(pGroup: *const ma_sound_group) -> ma_uint32;
}
extern "C" {
    pub fn ma_sound_group_get_direction_to_listener(pGroup: *const ma_sound_group) -> ma_vec3f;
}
extern "C" {
    pub fn ma_sound_group_set_position(pGroup: *mut ma_sound_group, x: f32, y: f32, z: f32);
}
extern "C" {
    pub fn ma_sound_group_get_position(pGroup: *const ma_sound_group) -> ma_vec3f;
}
extern "C" {
    pub fn ma_sound_group_set_direction(pGroup: *mut ma_sound_group, x: f32, y: f32, z: f32);
}
extern "C" {
    pub fn ma_sound_group_get_direction(pGroup: *const ma_sound_group) -> ma_vec3f;
}
extern "C" {
    pub fn ma_sound_group_set_velocity(pGroup: *mut ma_sound_group, x: f32, y: f32, z: f32);
}
extern "C" {
    pub fn ma_sound_group_get_velocity(pGroup: *const ma_sound_group) -> ma_vec3f;
}
extern "C" {
    pub fn ma_sound_group_set_attenuation_model(
        pGroup: *mut ma_sound_group,
        attenuationModel: ma_attenuation_model,
    );
}
extern "C" {
    pub fn ma_sound_group_get_attenuation_model(
        pGroup: *const ma_sound_group,
    ) -> ma_attenuation_model;
}
extern "C" {
    pub fn ma_sound_group_set_positioning(pGroup: *mut ma_sound_group, positioning: ma_positioning);
}
extern "C" {
    pub fn ma_sound_group_get_positioning(pGroup: *const ma_sound_group) -> ma_positioning;
}
extern "C" {
    pub fn ma_sound_group_set_rolloff(pGroup: *mut ma_sound_group, rolloff: f32);
}
extern "C" {
    pub fn ma_sound_group_get_rolloff(pGroup: *const ma_sound_group) -> f32;
}
extern "C" {
    pub fn ma_sound_group_set_min_gain(pGroup: *mut ma_sound_group, minGain: f32);
}
extern "C" {
    pub fn ma_sound_group_get_min_gain(pGroup: *const ma_sound_group) -> f32;
}
extern "C" {
    pub fn ma_sound_group_set_max_gain(pGroup: *mut ma_sound_group, maxGain: f32);
}
extern "C" {
    pub fn ma_sound_group_get_max_gain(pGroup: *const ma_sound_group) -> f32;
}
extern "C" {
    pub fn ma_sound_group_set_min_distance(pGroup: *mut ma_sound_group, minDistance: f32);
}
extern "C" {
    pub fn ma_sound_group_get_min_distance(pGroup: *const ma_sound_group) -> f32;
}
extern "C" {
    pub fn ma_sound_group_set_max_distance(pGroup: *mut ma_sound_group, maxDistance: f32);
}
extern "C" {
    pub fn ma_sound_group_get_max_distance(pGroup: *const ma_sound_group) -> f32;
}
extern "C" {
    pub fn ma_sound_group_set_cone(
        pGroup: *mut ma_sound_group,
        innerAngleInRadians: f32,
        outerAngleInRadians: f32,
        outerGain: f32,
    );
}
extern "C" {
    pub fn ma_sound_group_get_cone(
        pGroup: *const ma_sound_group,
        pInnerAngleInRadians: *mut f32,
        pOuterAngleInRadians: *mut f32,
        pOuterGain: *mut f32,
    );
}
extern "C" {
    pub fn ma_sound_group_set_doppler_factor(pGroup: *mut ma_sound_group, dopplerFactor: f32);
}
extern "C" {
    pub fn ma_sound_group_get_doppler_factor(pGroup: *const ma_sound_group) -> f32;
}
extern "C" {
    pub fn ma_sound_group_set_directional_attenuation_factor(
        pGroup: *mut ma_sound_group,
        directionalAttenuationFactor: f32,
    );
}
extern "C" {
    pub fn ma_sound_group_get_directional_attenuation_factor(pGroup: *const ma_sound_group) -> f32;
}
extern "C" {
    pub fn ma_sound_group_set_fade_in_pcm_frames(
        pGroup: *mut ma_sound_group,
        volumeBeg: f32,
        volumeEnd: f32,
        fadeLengthInFrames: ma_uint64,
    );
}
extern "C" {
    pub fn ma_sound_group_set_fade_in_milliseconds(
        pGroup: *mut ma_sound_group,
        volumeBeg: f32,
        volumeEnd: f32,
        fadeLengthInMilliseconds: ma_uint64,
    );
}
extern "C" {
    pub fn ma_sound_group_get_current_fade_volume(pGroup: *mut ma_sound_group) -> f32;
}
extern "C" {
    pub fn ma_sound_group_set_start_time_in_pcm_frames(
        pGroup: *mut ma_sound_group,
        absoluteGlobalTimeInFrames: ma_uint64,
    );
}
extern "C" {
    pub fn ma_sound_group_set_start_time_in_milliseconds(
        pGroup: *mut ma_sound_group,
        absoluteGlobalTimeInMilliseconds: ma_uint64,
    );
}
extern "C" {
    pub fn ma_sound_group_set_stop_time_in_pcm_frames(
        pGroup: *mut ma_sound_group,
        absoluteGlobalTimeInFrames: ma_uint64,
    );
}
extern "C" {
    pub fn ma_sound_group_set_stop_time_in_milliseconds(
        pGroup: *mut ma_sound_group,
        absoluteGlobalTimeInMilliseconds: ma_uint64,
    );
}
extern "C" {
    pub fn ma_sound_group_is_playing(pGroup: *const ma_sound_group) -> ma_bool32;
}
extern "C" {
    pub fn ma_sound_group_get_time_in_pcm_frames(pGroup: *const ma_sound_group) -> ma_uint64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
